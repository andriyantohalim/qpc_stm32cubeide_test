
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08004b50  08004b50  00005b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004de8  08004de8  00005de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08004dec  08004dec  00005dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000028  24000000  08004df0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a10  24000028  08004e18  00006028  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000a38  08004e18  00006a38  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010b14  00000000  00000000  00006056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003738  00000000  00000000  00016b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b58  00000000  00000000  0001a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000889  00000000  00000000  0001ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000379c7  00000000  00000000  0001b689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010192  00000000  00000000  00053050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00162480  00000000  00000000  000631e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c5662  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002bac  00000000  00000000  001c56a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000081  00000000  00000000  001c8254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000028 	.word	0x24000028
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004b38 	.word	0x08004b38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400002c 	.word	0x2400002c
 80002dc:	08004b38 	.word	0x08004b38

080002e0 <Blinky_ctor>:
//----------------------------------------------------------------------------
Blinky Blinky_inst;
QActive * const AO_Blinky = &Blinky_inst.super;

//............................................................................
void Blinky_ctor(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
    Blinky * const me = &Blinky_inst;
 80002e6:	4b09      	ldr	r3, [pc, #36]	@ (800030c <Blinky_ctor+0x2c>)
 80002e8:	607b      	str	r3, [r7, #4]
    QActive_ctor(&me->super, Q_STATE_CAST(&Blinky_initial));
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4908      	ldr	r1, [pc, #32]	@ (8000310 <Blinky_ctor+0x30>)
 80002ee:	4618      	mov	r0, r3
 80002f0:	f004 fa14 	bl	800471c <QActive_ctor>
    QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 80002fa:	6879      	ldr	r1, [r7, #4]
 80002fc:	2300      	movs	r3, #0
 80002fe:	2206      	movs	r2, #6
 8000300:	f004 fae2 	bl	80048c8 <QTimeEvt_ctorX>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	24000044 	.word	0x24000044
 8000310:	08000315 	.word	0x08000315

08000314 <Blinky_initial>:

// HSM definition ----------------------------------------------------------
QState Blinky_initial(Blinky * const me, void const * const par) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(par);

    // arm the time event to expire in half a second and every half second
    QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	33ac      	adds	r3, #172	@ 0xac
 8000322:	2232      	movs	r2, #50	@ 0x32
 8000324:	2132      	movs	r1, #50	@ 0x32
 8000326:	4618      	mov	r0, r3
 8000328:	f004 fb0c 	bl	8004944 <QTimeEvt_armX>

    return Q_TRAN(&Blinky_off);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a03      	ldr	r2, [pc, #12]	@ (800033c <Blinky_initial+0x28>)
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	2307      	movs	r3, #7
}
 8000334:	4618      	mov	r0, r3
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	08000341 	.word	0x08000341

08000340 <Blinky_off>:
//............................................................................
QState Blinky_off(Blinky * const me, QEvt const * const e) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d002      	beq.n	8000358 <Blinky_off+0x18>
 8000352:	2b06      	cmp	r3, #6
 8000354:	d005      	beq.n	8000362 <Blinky_off+0x22>
 8000356:	e00a      	b.n	800036e <Blinky_off+0x2e>
        case Q_ENTRY_SIG: {
            BSP_ledOff();
 8000358:	f000 fa37 	bl	80007ca <BSP_ledOff>
            status = Q_HANDLED();
 800035c:	2302      	movs	r3, #2
 800035e:	73fb      	strb	r3, [r7, #15]
            break;
 8000360:	e00b      	b.n	800037a <Blinky_off+0x3a>
        }
        case TIMEOUT_SIG: {
            status = Q_TRAN(&Blinky_on);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a07      	ldr	r2, [pc, #28]	@ (8000384 <Blinky_off+0x44>)
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	2307      	movs	r3, #7
 800036a:	73fb      	strb	r3, [r7, #15]
            break;
 800036c:	e005      	b.n	800037a <Blinky_off+0x3a>
        }
        default: {
            status = Q_SUPER(&QHsm_top);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a05      	ldr	r2, [pc, #20]	@ (8000388 <Blinky_off+0x48>)
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	2300      	movs	r3, #0
 8000376:	73fb      	strb	r3, [r7, #15]
            break;
 8000378:	bf00      	nop
        }
    }
    return status;
 800037a:	7bfb      	ldrb	r3, [r7, #15]
}
 800037c:	4618      	mov	r0, r3
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	0800038d 	.word	0x0800038d
 8000388:	08004241 	.word	0x08004241

0800038c <Blinky_on>:
//............................................................................
QState Blinky_on(Blinky * const me, QEvt const * const e) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d002      	beq.n	80003a4 <Blinky_on+0x18>
 800039e:	2b06      	cmp	r3, #6
 80003a0:	d005      	beq.n	80003ae <Blinky_on+0x22>
 80003a2:	e00a      	b.n	80003ba <Blinky_on+0x2e>
        case Q_ENTRY_SIG: {
            BSP_ledOn();
 80003a4:	f000 fa04 	bl	80007b0 <BSP_ledOn>
            status = Q_HANDLED();
 80003a8:	2302      	movs	r3, #2
 80003aa:	73fb      	strb	r3, [r7, #15]
            break;
 80003ac:	e00b      	b.n	80003c6 <Blinky_on+0x3a>
        }
        case TIMEOUT_SIG: {
            status = Q_TRAN(&Blinky_off);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a07      	ldr	r2, [pc, #28]	@ (80003d0 <Blinky_on+0x44>)
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	2307      	movs	r3, #7
 80003b6:	73fb      	strb	r3, [r7, #15]
            break;
 80003b8:	e005      	b.n	80003c6 <Blinky_on+0x3a>
        }
        default: {
            status = Q_SUPER(&QHsm_top);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a05      	ldr	r2, [pc, #20]	@ (80003d4 <Blinky_on+0x48>)
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	2300      	movs	r3, #0
 80003c2:	73fb      	strb	r3, [r7, #15]
            break;
 80003c4:	bf00      	nop
        }
    }
    return status;
 80003c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	08000341 	.word	0x08000341
 80003d4:	08004241 	.word	0x08004241

080003d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f003 0307 	and.w	r3, r3, #7
 80003e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <__NVIC_SetPriorityGrouping+0x40>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003ee:	68ba      	ldr	r2, [r7, #8]
 80003f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80003f4:	4013      	ands	r3, r2
 80003f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <__NVIC_SetPriorityGrouping+0x44>)
 8000402:	4313      	orrs	r3, r2
 8000404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000406:	4a04      	ldr	r2, [pc, #16]	@ (8000418 <__NVIC_SetPriorityGrouping+0x40>)
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	60d3      	str	r3, [r2, #12]
}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	e000ed00 	.word	0xe000ed00
 800041c:	05fa0000 	.word	0x05fa0000

08000420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800042a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800042e:	2b00      	cmp	r3, #0
 8000430:	db0b      	blt.n	800044a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000432:	88fb      	ldrh	r3, [r7, #6]
 8000434:	f003 021f 	and.w	r2, r3, #31
 8000438:	4907      	ldr	r1, [pc, #28]	@ (8000458 <__NVIC_EnableIRQ+0x38>)
 800043a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800043e:	095b      	lsrs	r3, r3, #5
 8000440:	2001      	movs	r0, #1
 8000442:	fa00 f202 	lsl.w	r2, r0, r2
 8000446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	e000e100 	.word	0xe000e100

0800045c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	6039      	str	r1, [r7, #0]
 8000466:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800046c:	2b00      	cmp	r3, #0
 800046e:	db0a      	blt.n	8000486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	490c      	ldr	r1, [pc, #48]	@ (80004a8 <__NVIC_SetPriority+0x4c>)
 8000476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800047a:	0112      	lsls	r2, r2, #4
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	440b      	add	r3, r1
 8000480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000484:	e00a      	b.n	800049c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4908      	ldr	r1, [pc, #32]	@ (80004ac <__NVIC_SetPriority+0x50>)
 800048c:	88fb      	ldrh	r3, [r7, #6]
 800048e:	f003 030f 	and.w	r3, r3, #15
 8000492:	3b04      	subs	r3, #4
 8000494:	0112      	lsls	r2, r2, #4
 8000496:	b2d2      	uxtb	r2, r2
 8000498:	440b      	add	r3, r1
 800049a:	761a      	strb	r2, [r3, #24]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000e100 	.word	0xe000e100
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <Q_onError>:
#endif

//============================================================================
// Error handler

Q_NORETURN Q_onError(char const * const module, int_t const id) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(id);
    QS_ASSERTION(module, id, 10000U); // report assertion to QS

#ifndef NDEBUG
    // light up LED
    BSP_LED_On(LED1);
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 fc8a 	bl	8000dd4 <BSP_LED_On>
    // for debugging, hang on in an endless loop...
    for (;;) {
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <Q_onError+0x10>

080004c4 <assert_failed>:
    }
#endif
}
//............................................................................
void assert_failed(char const * const module, int_t const id); // prototype
void assert_failed(char const * const module, int_t const id) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
    Q_onError(module, id);
 80004ce:	6839      	ldr	r1, [r7, #0]
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f7ff ffed 	bl	80004b0 <Q_onError>
	...

080004d8 <EXTI0_IRQHandler>:
}

// ISRs used in the application ==============================================
// NOTE: only the "FromISR" API variants are allowed in the ISRs!
void EXTI0_IRQHandler(void); // prototype
void EXTI0_IRQHandler(void) {
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b085      	sub	sp, #20
 80004dc:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]

    // for testing...
    QACTIVE_POST_FROM_ISR(AO_Blinky,
 80004e2:	4b10      	ldr	r3, [pc, #64]	@ (8000524 <EXTI0_IRQHandler+0x4c>)
 80004e4:	681c      	ldr	r4, [r3, #0]
 80004e6:	2205      	movs	r2, #5
 80004e8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004ec:	2004      	movs	r0, #4
 80004ee:	f003 f95f 	bl	80037b0 <QF_newXFromISR_>
 80004f2:	4601      	mov	r1, r0
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004fe:	4620      	mov	r0, r4
 8000500:	f002 ff80 	bl	8003404 <QActive_postFromISR_>
        Q_NEW_FROM_ISR(QEvt, MAX_PUB_SIG),
        &xHigherPriorityTaskWoken,
        &l_EXTI0_IRQHandler);

    // the usual end of FreeRTOS ISR...
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d007      	beq.n	800051a <EXTI0_IRQHandler+0x42>
 800050a:	4b07      	ldr	r3, [pc, #28]	@ (8000528 <EXTI0_IRQHandler+0x50>)
 800050c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	f3bf 8f4f 	dsb	sy
 8000516:	f3bf 8f6f 	isb	sy
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bd90      	pop	{r4, r7, pc}
 8000522:	bf00      	nop
 8000524:	08004d5c 	.word	0x08004d5c
 8000528:	e000ed04 	.word	0xe000ed04

0800052c <vApplicationTickHook>:
#endif

// Application hooks used in this project ====================================
// NOTE: only the "FromISR" API variants are allowed in vApplicationTickHook

void vApplicationTickHook(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]

    // process time events at rate 0
    QTIMEEVT_TICK_FROM_ISR(0U, &xHigherPriorityTaskWoken, &l_TickHook);
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	4619      	mov	r1, r3
 800053c:	2000      	movs	r0, #0
 800053e:	f003 f803 	bl	8003548 <QTimeEvt_tickFromISR_>
    tmp = SysTick->CTRL; // clear SysTick_CTRL_COUNTFLAG
    QS_tickTime_ += QS_tickPeriod_; // account for the clock rollover
#endif

    // notify FreeRTOS to perform context switch from ISR, if needed
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d007      	beq.n	8000558 <vApplicationTickHook+0x2c>
 8000548:	4b05      	ldr	r3, [pc, #20]	@ (8000560 <vApplicationTickHook+0x34>)
 800054a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	f3bf 8f4f 	dsb	sy
 8000554:	f3bf 8f6f 	isb	sy
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	e000ed04 	.word	0xe000ed04
 8000564:	00000000 	.word	0x00000000

08000568 <vApplicationIdleHook>:
//............................................................................
void vApplicationIdleHook(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800056e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8000572:	b672      	cpsid	i
 8000574:	f383 8811 	msr	BASEPRI, r3
 8000578:	f3bf 8f6f 	isb	sy
 800057c:	f3bf 8f4f 	dsb	sy
 8000580:	b662      	cpsie	i
 8000582:	60bb      	str	r3, [r7, #8]
            "   isb                                                     \n"\
            "   dsb                                                     \n"\
            "   cpsie i                                                 \n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000584:	bf00      	nop
    // toggle the User LED on and then off, see NOTE01
    QF_INT_DISABLE();
    BSP_LED_On (LED3);
 8000586:	2002      	movs	r0, #2
 8000588:	f000 fc24 	bl	8000dd4 <BSP_LED_On>
    BSP_LED_Off(LED3);
 800058c:	2002      	movs	r0, #2
 800058e:	f000 fc4b 	bl	8000e28 <BSP_LED_Off>
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f383 8811 	msr	BASEPRI, r3
        (
            "   msr basepri, %0 "::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800059c:	bf00      	nop
    QF_INT_ENABLE();

    // Some floating point code is to exercise the VFP...
    double volatile x = 1.73205;
 800059e:	a308      	add	r3, pc, #32	@ (adr r3, 80005c0 <vApplicationIdleHook+0x58>)
 80005a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005a4:	e9c7 2300 	strd	r2, r3, [r7]
    x = x * 1.73205;
 80005a8:	ed97 7b00 	vldr	d7, [r7]
 80005ac:	ed9f 6b04 	vldr	d6, [pc, #16]	@ 80005c0 <vApplicationIdleHook+0x58>
 80005b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005b4:	ed87 7b00 	vstr	d7, [r7]
    // The trick with BOOT(0) is it gets the part to run the System Loader
    // instead of your broken code. When done disconnect BOOT0, and start over.
    //
    //__WFI(); // Wait-For-Interrupt
#endif
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	0f9096bc 	.word	0x0f9096bc
 80005c4:	3ffbb67a 	.word	0x3ffbb67a

080005c8 <vApplicationStackOverflowHook>:
//............................................................................
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
    (void)xTask;
    (void)pcTaskName;
    Q_ERROR();
 80005d2:	f001 f899 	bl	8001708 <vPortEnterCritical>
 80005d6:	21e2      	movs	r1, #226	@ 0xe2
 80005d8:	4801      	ldr	r0, [pc, #4]	@ (80005e0 <vApplicationStackOverflowHook+0x18>)
 80005da:	f7ff ff69 	bl	80004b0 <Q_onError>
 80005de:	bf00      	nop
 80005e0:	08004d60 	.word	0x08004d60

080005e4 <vApplicationGetIdleTaskMemory>:
// provide an implementation of vApplicationGetIdleTaskMemory() to provide
// the memory that is used by the Idle task.
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    // Pass out a pointer to the StaticTask_t structure in which the
    // Idle task's state will be stored.
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	@ (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]

    // Pass out the array that will be used as the Idle task's stack.
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	@ (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]

    // Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    // Note that, as the array is necessarily of type StackType_t,
    // configMINIMAL_STACK_SIZE is specified in words, not bytes.
    //
    *pulIdleTaskStackSize = Q_DIM(uxIdleTaskStack);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000602:	601a      	str	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	24000114 	.word	0x24000114
 8000614:	24000160 	.word	0x24000160

08000618 <BSP_init>:

// BSP functions =============================================================

//............................................................................
void BSP_init(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
    // Configure the MPU to prevent NULL-pointer dereferencing ...
    MPU->RBAR = 0x0U                          // base address (NULL)
 800061e:	4b47      	ldr	r3, [pc, #284]	@ (800073c <BSP_init+0x124>)
 8000620:	2217      	movs	r2, #23
 8000622:	60da      	str	r2, [r3, #12]
                | MPU_RBAR_VALID_Msk          // valid region
                | (MPU_RBAR_REGION_Msk & 7U); // region #7
    MPU->RASR = (7U << MPU_RASR_SIZE_Pos)     // 2^(7+1) region
 8000624:	4b45      	ldr	r3, [pc, #276]	@ (800073c <BSP_init+0x124>)
 8000626:	220f      	movs	r2, #15
 8000628:	611a      	str	r2, [r3, #16]
                | (0x0U << MPU_RASR_AP_Pos)   // no-access region
                | MPU_RASR_ENABLE_Msk;        // region enable
    MPU->CTRL = MPU_CTRL_PRIVDEFENA_Msk       // enable background region
 800062a:	4b44      	ldr	r3, [pc, #272]	@ (800073c <BSP_init+0x124>)
 800062c:	2205      	movs	r2, #5
 800062e:	605a      	str	r2, [r3, #4]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000630:	f3bf 8f6f 	isb	sy
}
 8000634:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
                | MPU_CTRL_ENABLE_Msk;        // enable the MPU
    __ISB();
    __DSB();

    // enable the MemManage_Handler for MPU exception
    SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800063c:	4b40      	ldr	r3, [pc, #256]	@ (8000740 <BSP_init+0x128>)
 800063e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000640:	4a3f      	ldr	r2, [pc, #252]	@ (8000740 <BSP_init+0x128>)
 8000642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000646:	6253      	str	r3, [r2, #36]	@ 0x24

    // NOTE: SystemInit() has been already called from the startup code
    // but SystemCoreClock needs to be updated
    SystemCoreClockUpdate();
 8000648:	f000 f990 	bl	800096c <SystemCoreClockUpdate>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800064c:	4b3c      	ldr	r3, [pc, #240]	@ (8000740 <BSP_init+0x128>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000654:	2b00      	cmp	r3, #0
 8000656:	d11b      	bne.n	8000690 <BSP_init+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000658:	f3bf 8f4f 	dsb	sy
}
 800065c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065e:	f3bf 8f6f 	isb	sy
}
 8000662:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000664:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <BSP_init+0x128>)
 8000666:	2200      	movs	r2, #0
 8000668:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000678:	4b31      	ldr	r3, [pc, #196]	@ (8000740 <BSP_init+0x128>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4a30      	ldr	r2, [pc, #192]	@ (8000740 <BSP_init+0x128>)
 800067e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000682:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000684:	f3bf 8f4f 	dsb	sy
}
 8000688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800068a:	f3bf 8f6f 	isb	sy
}
 800068e:	e000      	b.n	8000692 <BSP_init+0x7a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000690:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000692:	4b2b      	ldr	r3, [pc, #172]	@ (8000740 <BSP_init+0x128>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d138      	bne.n	8000710 <BSP_init+0xf8>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800069e:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <BSP_init+0x128>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006a6:	f3bf 8f4f 	dsb	sy
}
 80006aa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <BSP_init+0x128>)
 80006ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80006b2:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	0b5b      	lsrs	r3, r3, #13
 80006b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006bc:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006c6:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	015a      	lsls	r2, r3, #5
 80006cc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80006d0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006d6:	491a      	ldr	r1, [pc, #104]	@ (8000740 <BSP_init+0x128>)
 80006d8:	4313      	orrs	r3, r2
 80006da:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1ef      	bne.n	80006c8 <BSP_init+0xb0>
    } while(sets-- != 0U);
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	1e5a      	subs	r2, r3, #1
 80006ec:	60ba      	str	r2, [r7, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1e5      	bne.n	80006be <BSP_init+0xa6>
  __ASM volatile ("dsb 0xF":::"memory");
 80006f2:	f3bf 8f4f 	dsb	sy
}
 80006f6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <BSP_init+0x128>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <BSP_init+0x128>)
 80006fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000702:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800070a:	f3bf 8f6f 	isb	sy
}
 800070e:	e000      	b.n	8000712 <BSP_init+0xfa>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000710:	bf00      	nop
#if (ART_ACCLERATOR_ENABLE != 0)
    __HAL_FLASH_ART_ENABLE();
#endif // ART_ACCLERATOR_ENABLE

    // Configure the LEDs
    BSP_LED_Init(LED1);
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fae8 	bl	8000ce8 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fae5 	bl	8000ce8 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 800071e:	2002      	movs	r0, #2
 8000720:	f000 fae2 	bl	8000ce8 <BSP_LED_Init>

    // configure the User Button in GPIO Mode
    BSP_PB_Init(BUTTONn, BUTTON_MODE_GPIO);
 8000724:	2100      	movs	r1, #0
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fba8 	bl	8000e7c <BSP_PB_Init>

    BSP_randomSeed(1234U);
 800072c:	f240 40d2 	movw	r0, #1234	@ 0x4d2
 8000730:	f000 f82e 	bl	8000790 <BSP_randomSeed>
    QS_ONLY(produce_sig_dict());

    // setup the QS filters...
    QS_GLB_FILTER(QS_ALL_RECORDS);   // all records
    QS_GLB_FILTER(-QS_QF_TICK);      // exclude the clock tick
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	e000ed90 	.word	0xe000ed90
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <BSP_start>:
//............................................................................
void BSP_start(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af04      	add	r7, sp, #16
    // initialize event pools
    static QF_MPOOL_EL(QEvt) smlPoolSto[10];
    QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
 800074a:	2208      	movs	r2, #8
 800074c:	2150      	movs	r1, #80	@ 0x50
 800074e:	480c      	ldr	r0, [pc, #48]	@ (8000780 <BSP_start+0x3c>)
 8000750:	f003 fdee 	bl	8004330 <QF_poolInit>

    // initialize publish-subscribe
    static QSubscrList subscrSto[MAX_PUB_SIG];
    QActive_psInit(subscrSto, Q_DIM(subscrSto));
 8000754:	2105      	movs	r1, #5
 8000756:	480b      	ldr	r0, [pc, #44]	@ (8000784 <BSP_start+0x40>)
 8000758:	f003 ffae 	bl	80046b8 <QActive_psInit>

    // instantiate and start AOs/threads...

    static QEvtPtr blinkyQueueSto[10];
    Blinky_ctor();
 800075c:	f7ff fdc0 	bl	80002e0 <Blinky_ctor>
    QActive_start(AO_Blinky,
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <BSP_start+0x44>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	2300      	movs	r3, #0
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	2300      	movs	r3, #0
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	2300      	movs	r3, #0
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	230a      	movs	r3, #10
 8000772:	4a06      	ldr	r2, [pc, #24]	@ (800078c <BSP_start+0x48>)
 8000774:	2101      	movs	r1, #1
 8000776:	f002 fdb1 	bl	80032dc <QActive_start>
        1U,                          // QP prio. of the AO
        blinkyQueueSto,               // event queue storage
        Q_DIM(blinkyQueueSto),       // queue length [events]
        (void *)0, 0U,               // no stack storage
        (void *)0);                  // no initialization param
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	24000560 	.word	0x24000560
 8000784:	240005b0 	.word	0x240005b0
 8000788:	08004d5c 	.word	0x08004d5c
 800078c:	240005d8 	.word	0x240005d8

08000790 <BSP_randomSeed>:
    QS_BEGIN_ID(PAUSED_STAT, AO_Table->prio)
        QS_U8(1, paused);  // Paused status
    QS_END()
}
//............................................................................
void BSP_randomSeed(uint32_t const seed) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    l_rndSeed = seed;
 8000798:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <BSP_randomSeed+0x1c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	24000110 	.word	0x24000110

080007b0 <BSP_ledOn>:
    xTaskResumeAll(); // unlock the FreeRTOS scheduler

    return (rnd >> 8);
}
//............................................................................
void BSP_ledOn(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    BSP_LED_On(LED1);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fb0d 	bl	8000dd4 <BSP_LED_On>
    BSP_LED_On(LED2);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 fb0a 	bl	8000dd4 <BSP_LED_On>
    BSP_LED_On(LED3);
 80007c0:	2002      	movs	r0, #2
 80007c2:	f000 fb07 	bl	8000dd4 <BSP_LED_On>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}

080007ca <BSP_ledOff>:
//............................................................................
void BSP_ledOff(void) {
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
    BSP_LED_Off(LED1);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fb2a 	bl	8000e28 <BSP_LED_Off>
    BSP_LED_Off(LED2);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f000 fb27 	bl	8000e28 <BSP_LED_Off>
    BSP_LED_Off(LED3);
 80007da:	2002      	movs	r0, #2
 80007dc:	f000 fb24 	bl	8000e28 <BSP_LED_Off>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <QF_onStartup>:

//============================================================================

// QF callbacks --------------------------------------------------------------

void QF_onStartup(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
    // set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate
    //SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC); // done in FreeRTOS

    // assign all priority bits for preemption-prio. and none to sub-prio.
    NVIC_SetPriorityGrouping(0U);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff fdf5 	bl	80003d8 <__NVIC_SetPriorityGrouping>

    // set priorities of ALL ISRs used in the system, see NOTE1
    NVIC_SetPriority(USART3_IRQn,    0U); // kernel unaware interrupt
 80007ee:	2100      	movs	r1, #0
 80007f0:	2027      	movs	r0, #39	@ 0x27
 80007f2:	f7ff fe33 	bl	800045c <__NVIC_SetPriority>
    NVIC_SetPriority(EXTI0_IRQn,     RTOS_AWARE_ISR_CMSIS_PRI + 0U);
 80007f6:	2104      	movs	r1, #4
 80007f8:	2006      	movs	r0, #6
 80007fa:	f7ff fe2f 	bl	800045c <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn,   RTOS_AWARE_ISR_CMSIS_PRI + 1U);
 80007fe:	2105      	movs	r1, #5
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f7ff fe2a 	bl	800045c <__NVIC_SetPriority>
    // ...

    // enable IRQs...
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000808:	2006      	movs	r0, #6
 800080a:	f7ff fe09 	bl	8000420 <__NVIC_EnableIRQ>

#ifdef Q_SPY
    NVIC_EnableIRQ(USART3_IRQn); // UART3 interrupt used for QS-RX
#endif
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}

08000812 <main>:
#include "qpc.h"                 // QP/C real-time embedded framework
#include "blinky.h"              // Blinky Application interface
#include "bsp.h"                 // Board Support Package

//............................................................................
int main() {
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
    QF_init();       // initialize the framework and the underlying RT kernel
 8000816:	f002 fd2b 	bl	8003270 <QF_init>
    BSP_init();      // initialize the BSP
 800081a:	f7ff fefd 	bl	8000618 <BSP_init>
    BSP_start();     // start the AOs/Threads
 800081e:	f7ff ff91 	bl	8000744 <BSP_start>
    return QF_run(); // run the QF application
 8000822:	f002 fd37 	bl	8003294 <QF_run>
 8000826:	4603      	mov	r3, r0
}
 8000828:	4618      	mov	r0, r3
 800082a:	bd80      	pop	{r7, pc}

0800082c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000830:	4b43      	ldr	r3, [pc, #268]	@ (8000940 <SystemInit+0x114>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000836:	4a42      	ldr	r2, [pc, #264]	@ (8000940 <SystemInit+0x114>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000840:	4b40      	ldr	r3, [pc, #256]	@ (8000944 <SystemInit+0x118>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f003 030f 	and.w	r3, r3, #15
 8000848:	2b06      	cmp	r3, #6
 800084a:	d807      	bhi.n	800085c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800084c:	4b3d      	ldr	r3, [pc, #244]	@ (8000944 <SystemInit+0x118>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f023 030f 	bic.w	r3, r3, #15
 8000854:	4a3b      	ldr	r2, [pc, #236]	@ (8000944 <SystemInit+0x118>)
 8000856:	f043 0307 	orr.w	r3, r3, #7
 800085a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800085c:	4b3a      	ldr	r3, [pc, #232]	@ (8000948 <SystemInit+0x11c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a39      	ldr	r2, [pc, #228]	@ (8000948 <SystemInit+0x11c>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000868:	4b37      	ldr	r3, [pc, #220]	@ (8000948 <SystemInit+0x11c>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800086e:	4b36      	ldr	r3, [pc, #216]	@ (8000948 <SystemInit+0x11c>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4935      	ldr	r1, [pc, #212]	@ (8000948 <SystemInit+0x11c>)
 8000874:	4b35      	ldr	r3, [pc, #212]	@ (800094c <SystemInit+0x120>)
 8000876:	4013      	ands	r3, r2
 8000878:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800087a:	4b32      	ldr	r3, [pc, #200]	@ (8000944 <SystemInit+0x118>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	2b00      	cmp	r3, #0
 8000884:	d007      	beq.n	8000896 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000886:	4b2f      	ldr	r3, [pc, #188]	@ (8000944 <SystemInit+0x118>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f023 030f 	bic.w	r3, r3, #15
 800088e:	4a2d      	ldr	r2, [pc, #180]	@ (8000944 <SystemInit+0x118>)
 8000890:	f043 0307 	orr.w	r3, r3, #7
 8000894:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000896:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <SystemInit+0x11c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800089c:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <SystemInit+0x11c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <SystemInit+0x11c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008a8:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <SystemInit+0x11c>)
 80008aa:	4a29      	ldr	r2, [pc, #164]	@ (8000950 <SystemInit+0x124>)
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <SystemInit+0x11c>)
 80008b0:	4a28      	ldr	r2, [pc, #160]	@ (8000954 <SystemInit+0x128>)
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <SystemInit+0x11c>)
 80008b6:	4a28      	ldr	r2, [pc, #160]	@ (8000958 <SystemInit+0x12c>)
 80008b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <SystemInit+0x11c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <SystemInit+0x11c>)
 80008c2:	4a25      	ldr	r2, [pc, #148]	@ (8000958 <SystemInit+0x12c>)
 80008c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <SystemInit+0x11c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <SystemInit+0x11c>)
 80008ce:	4a22      	ldr	r2, [pc, #136]	@ (8000958 <SystemInit+0x12c>)
 80008d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <SystemInit+0x11c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <SystemInit+0x11c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000948 <SystemInit+0x11c>)
 80008de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <SystemInit+0x11c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <SystemInit+0x130>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <SystemInit+0x134>)
 80008f0:	4013      	ands	r3, r2
 80008f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80008f6:	d202      	bcs.n	80008fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <SystemInit+0x138>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80008fe:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <SystemInit+0x11c>)
 8000900:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000904:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000908:	2b00      	cmp	r3, #0
 800090a:	d113      	bne.n	8000934 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800090c:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <SystemInit+0x11c>)
 800090e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000912:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <SystemInit+0x11c>)
 8000914:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000918:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <SystemInit+0x13c>)
 800091e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000922:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <SystemInit+0x11c>)
 8000926:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800092a:	4a07      	ldr	r2, [pc, #28]	@ (8000948 <SystemInit+0x11c>)
 800092c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000930:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00
 8000944:	52002000 	.word	0x52002000
 8000948:	58024400 	.word	0x58024400
 800094c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000950:	02020200 	.word	0x02020200
 8000954:	01ff0000 	.word	0x01ff0000
 8000958:	01010280 	.word	0x01010280
 800095c:	5c001000 	.word	0x5c001000
 8000960:	ffff0000 	.word	0xffff0000
 8000964:	51008108 	.word	0x51008108
 8000968:	52004000 	.word	0x52004000

0800096c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800096c:	b480      	push	{r7}
 800096e:	b08b      	sub	sp, #44	@ 0x2c
 8000970:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000972:	4bb1      	ldr	r3, [pc, #708]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800097a:	2b18      	cmp	r3, #24
 800097c:	f200 812e 	bhi.w	8000bdc <SystemCoreClockUpdate+0x270>
 8000980:	a201      	add	r2, pc, #4	@ (adr r2, 8000988 <SystemCoreClockUpdate+0x1c>)
 8000982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000986:	bf00      	nop
 8000988:	080009ed 	.word	0x080009ed
 800098c:	08000bdd 	.word	0x08000bdd
 8000990:	08000bdd 	.word	0x08000bdd
 8000994:	08000bdd 	.word	0x08000bdd
 8000998:	08000bdd 	.word	0x08000bdd
 800099c:	08000bdd 	.word	0x08000bdd
 80009a0:	08000bdd 	.word	0x08000bdd
 80009a4:	08000bdd 	.word	0x08000bdd
 80009a8:	08000a01 	.word	0x08000a01
 80009ac:	08000bdd 	.word	0x08000bdd
 80009b0:	08000bdd 	.word	0x08000bdd
 80009b4:	08000bdd 	.word	0x08000bdd
 80009b8:	08000bdd 	.word	0x08000bdd
 80009bc:	08000bdd 	.word	0x08000bdd
 80009c0:	08000bdd 	.word	0x08000bdd
 80009c4:	08000bdd 	.word	0x08000bdd
 80009c8:	08000a07 	.word	0x08000a07
 80009cc:	08000bdd 	.word	0x08000bdd
 80009d0:	08000bdd 	.word	0x08000bdd
 80009d4:	08000bdd 	.word	0x08000bdd
 80009d8:	08000bdd 	.word	0x08000bdd
 80009dc:	08000bdd 	.word	0x08000bdd
 80009e0:	08000bdd 	.word	0x08000bdd
 80009e4:	08000bdd 	.word	0x08000bdd
 80009e8:	08000a0d 	.word	0x08000a0d
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 80009ec:	4b92      	ldr	r3, [pc, #584]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	08db      	lsrs	r3, r3, #3
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	4a91      	ldr	r2, [pc, #580]	@ (8000c3c <SystemCoreClockUpdate+0x2d0>)
 80009f8:	fa22 f303 	lsr.w	r3, r2, r3
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80009fe:	e0f7      	b.n	8000bf0 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
 8000a00:	4b8f      	ldr	r3, [pc, #572]	@ (8000c40 <SystemCoreClockUpdate+0x2d4>)
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000a04:	e0f4      	b.n	8000bf0 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
 8000a06:	4b8f      	ldr	r3, [pc, #572]	@ (8000c44 <SystemCoreClockUpdate+0x2d8>)
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000a0a:	e0f1      	b.n	8000bf0 <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000a0c:	4b8a      	ldr	r3, [pc, #552]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000a16:	4b88      	ldr	r3, [pc, #544]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a1a:	091b      	lsrs	r3, r3, #4
 8000a1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a20:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000a22:	4b85      	ldr	r3, [pc, #532]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000a2c:	4b82      	ldr	r3, [pc, #520]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	fb02 f303 	mul.w	r3, r2, r3
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a44:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 80c3 	beq.w	8000bd6 <SystemCoreClockUpdate+0x26a>
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d059      	beq.n	8000b0a <SystemCoreClockUpdate+0x19e>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d878      	bhi.n	8000b4e <SystemCoreClockUpdate+0x1e2>
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <SystemCoreClockUpdate+0xfe>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d02e      	beq.n	8000ac6 <SystemCoreClockUpdate+0x15a>
 8000a68:	e071      	b.n	8000b4e <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8000a6a:	4b73      	ldr	r3, [pc, #460]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	4a71      	ldr	r2, [pc, #452]	@ (8000c3c <SystemCoreClockUpdate+0x2d0>)
 8000a76:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7a:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	ee07 3a90 	vmov	s15, r3
 8000a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a94:	4b68      	ldr	r3, [pc, #416]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a9c:	ee07 3a90 	vmov	s15, r3
 8000aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000aa4:	ed97 6a04 	vldr	s12, [r7, #16]
 8000aa8:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8000c48 <SystemCoreClockUpdate+0x2dc>
 8000aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ab4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac0:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
 8000ac4:	e071      	b.n	8000baa <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	ee07 3a90 	vmov	s15, r3
 8000acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8000c4c <SystemCoreClockUpdate+0x2e0>
 8000ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ad8:	4b57      	ldr	r3, [pc, #348]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ae0:	ee07 3a90 	vmov	s15, r3
 8000ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ae8:	ed97 6a04 	vldr	s12, [r7, #16]
 8000aec:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8000c48 <SystemCoreClockUpdate+0x2dc>
 8000af0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000af8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b04:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000b08:	e04f      	b.n	8000baa <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	ee07 3a90 	vmov	s15, r3
 8000b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b14:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8000c50 <SystemCoreClockUpdate+0x2e4>
 8000b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b1c:	4b46      	ldr	r3, [pc, #280]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000b2c:	ed97 6a04 	vldr	s12, [r7, #16]
 8000b30:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8000c48 <SystemCoreClockUpdate+0x2dc>
 8000b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000b3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b48:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000b4c:	e02d      	b.n	8000baa <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	08db      	lsrs	r3, r3, #3
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	4a38      	ldr	r2, [pc, #224]	@ (8000c3c <SystemCoreClockUpdate+0x2d0>)
 8000b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5e:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	ee07 3a90 	vmov	s15, r3
 8000b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b78:	4b2f      	ldr	r3, [pc, #188]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b80:	ee07 3a90 	vmov	s15, r3
 8000b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000b88:	ed97 6a04 	vldr	s12, [r7, #16]
 8000b8c:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8000c48 <SystemCoreClockUpdate+0x2dc>
 8000b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000b98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ba4:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000ba8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000baa:	4b23      	ldr	r3, [pc, #140]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	0a5b      	lsrs	r3, r3, #9
 8000bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bc2:	edd7 6a08 	vldr	s13, [r7, #32]
 8000bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bce:	ee17 3a90 	vmov	r3, s15
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
 8000bd4:	e00c      	b.n	8000bf0 <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000bda:	e009      	b.n	8000bf0 <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	08db      	lsrs	r3, r3, #3
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	4a15      	ldr	r2, [pc, #84]	@ (8000c3c <SystemCoreClockUpdate+0x2d0>)
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000bee:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	4a16      	ldr	r2, [pc, #88]	@ (8000c54 <SystemCoreClockUpdate+0x2e8>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
 8000c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	fa22 f303 	lsr.w	r3, r2, r3
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <SystemCoreClockUpdate+0x2cc>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <SystemCoreClockUpdate+0x2e8>)
 8000c14:	5cd3      	ldrb	r3, [r2, r3]
 8000c16:	f003 031f 	and.w	r3, r3, #31
 8000c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <SystemCoreClockUpdate+0x2ec>)
 8000c22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <SystemCoreClockUpdate+0x2f0>)
 8000c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
 8000c2a:	bf00      	nop
 8000c2c:	372c      	adds	r7, #44	@ 0x2c
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	03d09000 	.word	0x03d09000
 8000c40:	003d0900 	.word	0x003d0900
 8000c44:	017d7840 	.word	0x017d7840
 8000c48:	46000000 	.word	0x46000000
 8000c4c:	4a742400 	.word	0x4a742400
 8000c50:	4bbebc20 	.word	0x4bbebc20
 8000c54:	08004d74 	.word	0x08004d74
 8000c58:	24000004 	.word	0x24000004
 8000c5c:	24000000 	.word	0x24000000

08000c60 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <ExitRun0Mode+0x2c>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <ExitRun0Mode+0x2c>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c70:	bf00      	nop
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <ExitRun0Mode+0x2c>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f9      	beq.n	8000c72 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	58024800 	.word	0x58024800

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ccc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c94:	f7ff ffe4 	bl	8000c60 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c98:	f7ff fdc8 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	@ (8000cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f003 ff07 	bl	8004ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fda4 	bl	8000812 <main>
  bx  lr
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ccc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cd4:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8000cd8:	08004df0 	.word	0x08004df0
  ldr r2, =_sbss
 8000cdc:	24000028 	.word	0x24000028
  ldr r4, =_ebss
 8000ce0:	24000a38 	.word	0x24000a38

08000ce4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC3_IRQHandler>
	...

08000ce8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	@ 0x30
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d009      	beq.n	8000d10 <BSP_LED_Init+0x28>
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d006      	beq.n	8000d10 <BSP_LED_Init+0x28>
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d003      	beq.n	8000d10 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d08:	f06f 0301 	mvn.w	r3, #1
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d0e:	e055      	b.n	8000dbc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10f      	bne.n	8000d36 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000d16:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc8 <BSP_LED_Init+0xe0>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8000dc8 <BSP_LED_Init+0xe0>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d26:	4b28      	ldr	r3, [pc, #160]	@ (8000dc8 <BSP_LED_Init+0xe0>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	e021      	b.n	8000d7a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d10f      	bne.n	8000d5c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000d3c:	4b22      	ldr	r3, [pc, #136]	@ (8000dc8 <BSP_LED_Init+0xe0>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	4a21      	ldr	r2, [pc, #132]	@ (8000dc8 <BSP_LED_Init+0xe0>)
 8000d44:	f043 0310 	orr.w	r3, r3, #16
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc8 <BSP_LED_Init+0xe0>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	e00e      	b.n	8000d7a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <BSP_LED_Init+0xe0>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <BSP_LED_Init+0xe0>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6c:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <BSP_LED_Init+0xe0>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	4a13      	ldr	r2, [pc, #76]	@ (8000dcc <BSP_LED_Init+0xe4>)
 8000d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d82:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <BSP_LED_Init+0xe8>)
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	f107 0218 	add.w	r2, r7, #24
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f9d4 	bl	800114c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <BSP_LED_Init+0xe8>)
 8000da8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <BSP_LED_Init+0xe4>)
 8000db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	f000 fb78 	bl	80014ac <HAL_GPIO_WritePin>
  }

  return ret;
 8000dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3730      	adds	r7, #48	@ 0x30
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	08004d84 	.word	0x08004d84
 8000dd0:	24000008 	.word	0x24000008

08000dd4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d009      	beq.n	8000dfc <BSP_LED_On+0x28>
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d006      	beq.n	8000dfc <BSP_LED_On+0x28>
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d003      	beq.n	8000dfc <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000df4:	f06f 0301 	mvn.w	r3, #1
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	e00b      	b.n	8000e14 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <BSP_LED_On+0x4c>)
 8000e00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	4a07      	ldr	r2, [pc, #28]	@ (8000e24 <BSP_LED_On+0x50>)
 8000e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f000 fb4c 	bl	80014ac <HAL_GPIO_WritePin>
  }

  return ret;
 8000e14:	68fb      	ldr	r3, [r7, #12]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	24000008 	.word	0x24000008
 8000e24:	08004d84 	.word	0x08004d84

08000e28 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d009      	beq.n	8000e50 <BSP_LED_Off+0x28>
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d006      	beq.n	8000e50 <BSP_LED_Off+0x28>
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d003      	beq.n	8000e50 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e48:	f06f 0301 	mvn.w	r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	e00b      	b.n	8000e68 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4a08      	ldr	r2, [pc, #32]	@ (8000e74 <BSP_LED_Off+0x4c>)
 8000e54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <BSP_LED_Off+0x50>)
 8000e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e60:	2200      	movs	r2, #0
 8000e62:	4619      	mov	r1, r3
 8000e64:	f000 fb22 	bl	80014ac <HAL_GPIO_WritePin>
  }

  return ret;
 8000e68:	68fb      	ldr	r3, [r7, #12]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24000008 	.word	0x24000008
 8000e78:	08004d84 	.word	0x08004d84

08000e7c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	460a      	mov	r2, r1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f48 <BSP_PB_Init+0xcc>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e92:	4a2d      	ldr	r2, [pc, #180]	@ (8000f48 <BSP_PB_Init+0xcc>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f48 <BSP_PB_Init+0xcc>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000eaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eae:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10c      	bne.n	8000ed8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4a21      	ldr	r2, [pc, #132]	@ (8000f4c <BSP_PB_Init+0xd0>)
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	f107 020c 	add.w	r2, r7, #12
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f93b 	bl	800114c <HAL_GPIO_Init>
 8000ed6:	e031      	b.n	8000f3c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000ed8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000edc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f4c <BSP_PB_Init+0xd0>)
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	f107 020c 	add.w	r2, r7, #12
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f92d 	bl	800114c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4a16      	ldr	r2, [pc, #88]	@ (8000f50 <BSP_PB_Init+0xd4>)
 8000ef8:	441a      	add	r2, r3
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4915      	ldr	r1, [pc, #84]	@ (8000f54 <BSP_PB_Init+0xd8>)
 8000efe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f02:	4619      	mov	r1, r3
 8000f04:	4610      	mov	r0, r2
 8000f06:	f000 f90d 	bl	8001124 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	4a10      	ldr	r2, [pc, #64]	@ (8000f50 <BSP_PB_Init+0xd4>)
 8000f10:	1898      	adds	r0, r3, r2
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <BSP_PB_Init+0xdc>)
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f000 f8e2 	bl	80010e6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f22:	2028      	movs	r0, #40	@ 0x28
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <BSP_PB_Init+0xe0>)
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f000 f8b1 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f34:	2328      	movs	r3, #40	@ 0x28
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f8c7 	bl	80010ca <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	24000014 	.word	0x24000014
 8000f50:	24000600 	.word	0x24000600
 8000f54:	08004d8c 	.word	0x08004d8c
 8000f58:	24000018 	.word	0x24000018
 8000f5c:	2400001c 	.word	0x2400001c

08000f60 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fff0 	bl	8000f60 <BSP_PB_Callback>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <__NVIC_GetPriorityGrouping>:
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff6e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ffbe 	bl	8001030 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff8d 	bl	8000fdc <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff61 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80010e6:	b480      	push	{r7}
 80010e8:	b087      	sub	sp, #28
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	460b      	mov	r3, r1
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00a      	b.n	8001118 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001102:	7afb      	ldrb	r3, [r7, #11]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d103      	bne.n	8001110 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	605a      	str	r2, [r3, #4]
      break;
 800110e:	e002      	b.n	8001116 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	75fb      	strb	r3, [r7, #23]
      break;
 8001114:	bf00      	nop
  }

  return status;
 8001116:	7dfb      	ldrb	r3, [r7, #23]
}
 8001118:	4618      	mov	r0, r3
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e003      	b.n	8001140 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800113e:	2300      	movs	r3, #0
  }
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	@ 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800115a:	4b89      	ldr	r3, [pc, #548]	@ (8001380 <HAL_GPIO_Init+0x234>)
 800115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800115e:	e194      	b.n	800148a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8186 	beq.w	8001484 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d005      	beq.n	8001190 <HAL_GPIO_Init+0x44>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d130      	bne.n	80011f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 0201 	and.w	r2, r3, #1
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d017      	beq.n	800122e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d123      	bne.n	8001282 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	69b9      	ldr	r1, [r7, #24]
 800127e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0203 	and.w	r2, r3, #3
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80e0 	beq.w	8001484 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <HAL_GPIO_Init+0x238>)
 80012c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001384 <HAL_GPIO_Init+0x238>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_GPIO_Init+0x238>)
 80012d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e2:	4a29      	ldr	r2, [pc, #164]	@ (8001388 <HAL_GPIO_Init+0x23c>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a20      	ldr	r2, [pc, #128]	@ (800138c <HAL_GPIO_Init+0x240>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d052      	beq.n	80013b4 <HAL_GPIO_Init+0x268>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1f      	ldr	r2, [pc, #124]	@ (8001390 <HAL_GPIO_Init+0x244>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d031      	beq.n	800137a <HAL_GPIO_Init+0x22e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a1e      	ldr	r2, [pc, #120]	@ (8001394 <HAL_GPIO_Init+0x248>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d02b      	beq.n	8001376 <HAL_GPIO_Init+0x22a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <HAL_GPIO_Init+0x24c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d025      	beq.n	8001372 <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1c      	ldr	r2, [pc, #112]	@ (800139c <HAL_GPIO_Init+0x250>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01f      	beq.n	800136e <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <HAL_GPIO_Init+0x254>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d019      	beq.n	800136a <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1a      	ldr	r2, [pc, #104]	@ (80013a4 <HAL_GPIO_Init+0x258>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0x21a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a19      	ldr	r2, [pc, #100]	@ (80013a8 <HAL_GPIO_Init+0x25c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x216>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a18      	ldr	r2, [pc, #96]	@ (80013ac <HAL_GPIO_Init+0x260>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x212>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a17      	ldr	r2, [pc, #92]	@ (80013b0 <HAL_GPIO_Init+0x264>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x20e>
 8001356:	2309      	movs	r3, #9
 8001358:	e02d      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800135a:	230a      	movs	r3, #10
 800135c:	e02b      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800135e:	2308      	movs	r3, #8
 8001360:	e029      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 8001362:	2307      	movs	r3, #7
 8001364:	e027      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 8001366:	2306      	movs	r3, #6
 8001368:	e025      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800136a:	2305      	movs	r3, #5
 800136c:	e023      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800136e:	2304      	movs	r3, #4
 8001370:	e021      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 8001372:	2303      	movs	r3, #3
 8001374:	e01f      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 8001376:	2302      	movs	r3, #2
 8001378:	e01d      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800137a:	2301      	movs	r3, #1
 800137c:	e01b      	b.n	80013b6 <HAL_GPIO_Init+0x26a>
 800137e:	bf00      	nop
 8001380:	58000080 	.word	0x58000080
 8001384:	58024400 	.word	0x58024400
 8001388:	58000400 	.word	0x58000400
 800138c:	58020000 	.word	0x58020000
 8001390:	58020400 	.word	0x58020400
 8001394:	58020800 	.word	0x58020800
 8001398:	58020c00 	.word	0x58020c00
 800139c:	58021000 	.word	0x58021000
 80013a0:	58021400 	.word	0x58021400
 80013a4:	58021800 	.word	0x58021800
 80013a8:	58021c00 	.word	0x58021c00
 80013ac:	58022000 	.word	0x58022000
 80013b0:	58022400 	.word	0x58022400
 80013b4:	2300      	movs	r3, #0
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	f002 0203 	and.w	r2, r2, #3
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	4093      	lsls	r3, r2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c6:	4938      	ldr	r1, [pc, #224]	@ (80014a8 <HAL_GPIO_Init+0x35c>)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	3302      	adds	r3, #2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001428:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	3301      	adds	r3, #1
 8001488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	f47f ae63 	bne.w	8001160 <HAL_GPIO_Init+0x14>
  }
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3724      	adds	r7, #36	@ 0x24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	58000400 	.word	0x58000400

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3b04      	subs	r3, #4
 80014f0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3b04      	subs	r3, #4
 80014fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f023 0201 	bic.w	r2, r3, #1
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3b04      	subs	r3, #4
 800150e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001510:	4a0c      	ldr	r2, [pc, #48]	@ (8001544 <pxPortInitialiseStack+0x64>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3b14      	subs	r3, #20
 800151a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3b04      	subs	r3, #4
 8001526:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f06f 0202 	mvn.w	r2, #2
 800152e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3b20      	subs	r3, #32
 8001534:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	08001549 	.word	0x08001549

08001548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <prvTaskExitError+0x48>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155a:	d003      	beq.n	8001564 <prvTaskExitError+0x1c>
 800155c:	21e5      	movs	r1, #229	@ 0xe5
 800155e:	480d      	ldr	r0, [pc, #52]	@ (8001594 <prvTaskExitError+0x4c>)
 8001560:	f7fe ffb0 	bl	80004c4 <assert_failed>
        __asm volatile
 8001564:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8001568:	b672      	cpsid	i
 800156a:	f383 8811 	msr	BASEPRI, r3
 800156e:	f3bf 8f6f 	isb	sy
 8001572:	f3bf 8f4f 	dsb	sy
 8001576:	b662      	cpsie	i
 8001578:	607b      	str	r3, [r7, #4]
    }
 800157a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800157c:	bf00      	nop
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0fc      	beq.n	800157e <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24000020 	.word	0x24000020
 8001594:	08004b50 	.word	0x08004b50
	...

080015a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80015a0:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <pxCurrentTCBConst2>)
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	6808      	ldr	r0, [r1, #0]
 80015a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015aa:	f380 8809 	msr	PSP, r0
 80015ae:	f3bf 8f6f 	isb	sy
 80015b2:	f04f 0000 	mov.w	r0, #0
 80015b6:	f380 8811 	msr	BASEPRI, r0
 80015ba:	4770      	bx	lr
 80015bc:	f3af 8000 	nop.w

080015c0 <pxCurrentTCBConst2>:
 80015c0:	24000624 	.word	0x24000624
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop

080015c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80015c8:	4808      	ldr	r0, [pc, #32]	@ (80015ec <prvPortStartFirstTask+0x24>)
 80015ca:	6800      	ldr	r0, [r0, #0]
 80015cc:	6800      	ldr	r0, [r0, #0]
 80015ce:	f380 8808 	msr	MSP, r0
 80015d2:	f04f 0000 	mov.w	r0, #0
 80015d6:	f380 8814 	msr	CONTROL, r0
 80015da:	b662      	cpsie	i
 80015dc:	b661      	cpsie	f
 80015de:	f3bf 8f4f 	dsb	sy
 80015e2:	f3bf 8f6f 	isb	sy
 80015e6:	df00      	svc	0
 80015e8:	bf00      	nop
 80015ea:	0000      	.short	0x0000
 80015ec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop

080015f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <xPortStartScheduler+0xf8>)
 8001600:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	72fb      	strb	r3, [r7, #11]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	22ff      	movs	r2, #255	@ 0xff
 800160e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <xPortStartScheduler+0xfc>)
 8001624:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8001626:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <xPortStartScheduler+0xfc>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d104      	bne.n	8001638 <xPortStartScheduler+0x44>
 800162e:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8001632:	4830      	ldr	r0, [pc, #192]	@ (80016f4 <xPortStartScheduler+0x100>)
 8001634:	f7fe ff46 	bl	80004c4 <assert_failed>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00d      	beq.n	8001662 <xPortStartScheduler+0x6e>
 8001646:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800164a:	482a      	ldr	r0, [pc, #168]	@ (80016f4 <xPortStartScheduler+0x100>)
 800164c:	f7fe ff3a 	bl	80004c4 <assert_failed>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001650:	e007      	b.n	8001662 <xPortStartScheduler+0x6e>
        {
            ulImplementedPrioBits++;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3301      	adds	r3, #1
 8001656:	607b      	str	r3, [r7, #4]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166a:	2b80      	cmp	r3, #128	@ 0x80
 800166c:	d0f1      	beq.n	8001652 <xPortStartScheduler+0x5e>
        }

        if( ulImplementedPrioBits == 8 )
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b08      	cmp	r3, #8
 8001672:	d103      	bne.n	800167c <xPortStartScheduler+0x88>
            *
            * The following assert ensures that the sub-priority bit in the
            * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
            * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <xPortStartScheduler+0x104>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e004      	b.n	8001686 <xPortStartScheduler+0x92>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	4a1d      	ldr	r2, [pc, #116]	@ (80016f8 <xPortStartScheduler+0x104>)
 8001684:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001686:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <xPortStartScheduler+0x104>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	4a1a      	ldr	r2, [pc, #104]	@ (80016f8 <xPortStartScheduler+0x104>)
 800168e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001690:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <xPortStartScheduler+0x104>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001698:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <xPortStartScheduler+0x104>)
 800169a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800169c:	7afb      	ldrb	r3, [r7, #11]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <xPortStartScheduler+0x108>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <xPortStartScheduler+0x108>)
 80016aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80016ae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <xPortStartScheduler+0x108>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a11      	ldr	r2, [pc, #68]	@ (80016fc <xPortStartScheduler+0x108>)
 80016b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80016ba:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80016bc:	f000 f8d0 	bl	8001860 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <xPortStartScheduler+0x10c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80016c6:	f000 f8ef 	bl	80018a8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <xPortStartScheduler+0x110>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <xPortStartScheduler+0x110>)
 80016d0:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80016d4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80016d6:	f7ff ff77 	bl	80015c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80016da:	f001 f9b3 	bl	8002a44 <vTaskSwitchContext>
    prvTaskExitError();
 80016de:	f7ff ff33 	bl	8001548 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	e000e400 	.word	0xe000e400
 80016f0:	24000608 	.word	0x24000608
 80016f4:	08004b50 	.word	0x08004b50
 80016f8:	2400060c 	.word	0x2400060c
 80016fc:	e000ed20 	.word	0xe000ed20
 8001700:	24000020 	.word	0x24000020
 8001704:	e000ef34 	.word	0xe000ef34

08001708 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
        __asm volatile
 800170e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8001712:	b672      	cpsid	i
 8001714:	f383 8811 	msr	BASEPRI, r3
 8001718:	f3bf 8f6f 	isb	sy
 800171c:	f3bf 8f4f 	dsb	sy
 8001720:	b662      	cpsie	i
 8001722:	607b      	str	r3, [r7, #4]
    }
 8001724:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001726:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <vPortEnterCritical+0x4c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	4a09      	ldr	r2, [pc, #36]	@ (8001754 <vPortEnterCritical+0x4c>)
 800172e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <vPortEnterCritical+0x4c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d109      	bne.n	800174c <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <vPortEnterCritical+0x50>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <vPortEnterCritical+0x44>
 8001742:	f240 11af 	movw	r1, #431	@ 0x1af
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <vPortEnterCritical+0x54>)
 8001748:	f7fe febc 	bl	80004c4 <assert_failed>
    }
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	24000020 	.word	0x24000020
 8001758:	e000ed04 	.word	0xe000ed04
 800175c:	08004b50 	.word	0x08004b50

08001760 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <vPortExitCritical+0x40>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d104      	bne.n	8001778 <vPortExitCritical+0x18>
 800176e:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 8001772:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <vPortExitCritical+0x44>)
 8001774:	f7fe fea6 	bl	80004c4 <assert_failed>
    uxCriticalNesting--;
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <vPortExitCritical+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <vPortExitCritical+0x40>)
 8001780:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001782:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <vPortExitCritical+0x40>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <vPortExitCritical+0x36>
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f383 8811 	msr	BASEPRI, r3
    }
 8001794:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	24000020 	.word	0x24000020
 80017a4:	08004b50 	.word	0x08004b50
	...

080017b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80017b0:	f3ef 8009 	mrs	r0, PSP
 80017b4:	f3bf 8f6f 	isb	sy
 80017b8:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <pxCurrentTCBConst>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	f01e 0f10 	tst.w	lr, #16
 80017c0:	bf08      	it	eq
 80017c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80017c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ca:	6010      	str	r0, [r2, #0]
 80017cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80017d0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 80017d4:	b672      	cpsid	i
 80017d6:	f380 8811 	msr	BASEPRI, r0
 80017da:	f3bf 8f4f 	dsb	sy
 80017de:	f3bf 8f6f 	isb	sy
 80017e2:	b662      	cpsie	i
 80017e4:	f001 f92e 	bl	8002a44 <vTaskSwitchContext>
 80017e8:	f04f 0000 	mov.w	r0, #0
 80017ec:	f380 8811 	msr	BASEPRI, r0
 80017f0:	bc09      	pop	{r0, r3}
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	6808      	ldr	r0, [r1, #0]
 80017f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017fa:	f01e 0f10 	tst.w	lr, #16
 80017fe:	bf08      	it	eq
 8001800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001804:	f380 8809 	msr	PSP, r0
 8001808:	f3bf 8f6f 	isb	sy
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <pxCurrentTCBConst>:
 8001810:	24000624 	.word	0x24000624
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop

08001818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
        __asm volatile
 800181e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8001822:	b672      	cpsid	i
 8001824:	f383 8811 	msr	BASEPRI, r3
 8001828:	f3bf 8f6f 	isb	sy
 800182c:	f3bf 8f4f 	dsb	sy
 8001830:	b662      	cpsie	i
 8001832:	607b      	str	r3, [r7, #4]
    }
 8001834:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001836:	f000 ffeb 	bl	8002810 <xTaskIncrementTick>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <SysTick_Handler+0x44>)
 8001842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f383 8811 	msr	BASEPRI, r3
    }
 8001852:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	e000ed04 	.word	0xe000ed04

08001860 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <vPortSetupTimerInterrupt+0x34>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800186a:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <vPortSetupTimerInterrupt+0x38>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001870:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <vPortSetupTimerInterrupt+0x3c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <vPortSetupTimerInterrupt+0x40>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	099b      	lsrs	r3, r3, #6
 800187c:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <vPortSetupTimerInterrupt+0x44>)
 800187e:	3b01      	subs	r3, #1
 8001880:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001882:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <vPortSetupTimerInterrupt+0x34>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010
 8001898:	e000e018 	.word	0xe000e018
 800189c:	24000000 	.word	0x24000000
 80018a0:	10624dd3 	.word	0x10624dd3
 80018a4:	e000e014 	.word	0xe000e014

080018a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80018a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80018b8 <vPortEnableVFP+0x10>
 80018ac:	6801      	ldr	r1, [r0, #0]
 80018ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80018b2:	6001      	str	r1, [r0, #0]
 80018b4:	4770      	bx	lr
 80018b6:	0000      	.short	0x0000
 80018b8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop

080018c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80018c6:	f3ef 8305 	mrs	r3, IPSR
 80018ca:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	d90e      	bls.n	80018f0 <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80018d2:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <vPortValidateInterruptPriority+0x54>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80018dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <vPortValidateInterruptPriority+0x58>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d204      	bcs.n	80018f0 <vPortValidateInterruptPriority+0x30>
 80018e6:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 80018ea:	480c      	ldr	r0, [pc, #48]	@ (800191c <vPortValidateInterruptPriority+0x5c>)
 80018ec:	f7fe fdea 	bl	80004c4 <assert_failed>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <vPortValidateInterruptPriority+0x60>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80018f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <vPortValidateInterruptPriority+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d904      	bls.n	800190a <vPortValidateInterruptPriority+0x4a>
 8001900:	f44f 7153 	mov.w	r1, #844	@ 0x34c
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <vPortValidateInterruptPriority+0x5c>)
 8001906:	f7fe fddd 	bl	80004c4 <assert_failed>
    }
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e3f0 	.word	0xe000e3f0
 8001918:	24000608 	.word	0x24000608
 800191c:	08004b50 	.word	0x08004b50
 8001920:	e000ed0c 	.word	0xe000ed0c
 8001924:	2400060c 	.word	0x2400060c

08001928 <vPortFree>:
    return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d03d      	beq.n	80019b6 <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800193a:	2308      	movs	r3, #8
 800193c:	425b      	negs	r3, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db04      	blt.n	800195a <vPortFree+0x32>
 8001950:	f240 1141 	movw	r1, #321	@ 0x141
 8001954:	481a      	ldr	r0, [pc, #104]	@ (80019c0 <vPortFree+0x98>)
 8001956:	f7fe fdb5 	bl	80004c4 <assert_failed>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <vPortFree+0x44>
 8001962:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8001966:	4816      	ldr	r0, [pc, #88]	@ (80019c0 <vPortFree+0x98>)
 8001968:	f7fe fdac 	bl	80004c4 <assert_failed>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	0fdb      	lsrs	r3, r3, #31
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01c      	beq.n	80019b6 <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d118      	bne.n	80019b6 <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001990:	f000 fe2c 	bl	80025ec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <vPortFree+0x9c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4413      	add	r3, r2
 800199e:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <vPortFree+0x9c>)
 80019a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019a2:	68b8      	ldr	r0, [r7, #8]
 80019a4:	f000 f812 	bl	80019cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <vPortFree+0xa0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a06      	ldr	r2, [pc, #24]	@ (80019c8 <vPortFree+0xa0>)
 80019b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80019b2:	f000 fe29 	bl	8002608 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	08004be0 	.word	0x08004be0
 80019c4:	2400061c 	.word	0x2400061c
 80019c8:	24000620 	.word	0x24000620

080019cc <prvInsertBlockIntoFreeList>:
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80019d4:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <prvInsertBlockIntoFreeList+0xac>)
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e002      	b.n	80019e0 <prvInsertBlockIntoFreeList+0x14>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d8f7      	bhi.n	80019da <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	4413      	add	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d108      	bne.n	8001a0e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	441a      	add	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	441a      	add	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d118      	bne.n	8001a54 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <prvInsertBlockIntoFreeList+0xb0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d00d      	beq.n	8001a4a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	441a      	add	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e008      	b.n	8001a5c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <prvInsertBlockIntoFreeList+0xb0>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e003      	b.n	8001a5c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d002      	beq.n	8001a6a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	24000610 	.word	0x24000610
 8001a7c:	24000618 	.word	0x24000618

08001a80 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f103 0208 	add.w	r2, r3, #8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f103 0208 	add.w	r2, r3, #8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f103 0208 	add.w	r2, r3, #8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d103      	bne.n	8001afa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e00c      	b.n	8001b14 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3308      	adds	r3, #8
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e002      	b.n	8001b08 <vListInsert+0x2e>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d2f6      	bcs.n	8001b02 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6892      	ldr	r2, [r2, #8]
 8001b62:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6852      	ldr	r2, [r2, #4]
 8001b6c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d103      	bne.n	8001b80 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	1e5a      	subs	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001baa:	2301      	movs	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d104      	bne.n	8001bc2 <xQueueGenericReset+0x22>
 8001bb8:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8001bbc:	4839      	ldr	r0, [pc, #228]	@ (8001ca4 <xQueueGenericReset+0x104>)
 8001bbe:	f7fe fc81 	bl	80004c4 <assert_failed>

    if( ( pxQueue != NULL ) &&
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d05d      	beq.n	8001c84 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d059      	beq.n	8001c84 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd8:	2100      	movs	r1, #0
 8001bda:	fba3 2302 	umull	r2, r3, r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d000      	beq.n	8001be4 <xQueueGenericReset+0x44>
 8001be2:	2101      	movs	r1, #1
 8001be4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d14c      	bne.n	8001c84 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 8001bea:	f7ff fd8d 	bl	8001708 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	441a      	add	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2200      	movs	r2, #0
 8001c08:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	441a      	add	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	22ff      	movs	r2, #255	@ 0xff
 8001c2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	22ff      	movs	r2, #255	@ 0xff
 8001c36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d114      	bne.n	8001c6a <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01a      	beq.n	8001c7e <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3310      	adds	r3, #16
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 ff95 	bl	8002b7c <xTaskRemoveFromEventList>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d012      	beq.n	8001c7e <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001c58:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <xQueueGenericReset+0x108>)
 8001c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	e009      	b.n	8001c7e <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	3310      	adds	r3, #16
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff06 	bl	8001a80 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	3324      	adds	r3, #36	@ 0x24
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff01 	bl	8001a80 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001c7e:	f7ff fd6f 	bl	8001760 <vPortExitCritical>
 8001c82:	e001      	b.n	8001c88 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d104      	bne.n	8001c98 <xQueueGenericReset+0xf8>
 8001c8e:	f240 1163 	movw	r1, #355	@ 0x163
 8001c92:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <xQueueGenericReset+0x104>)
 8001c94:	f7fe fc16 	bl	80004c4 <assert_failed>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001c98:	68fb      	ldr	r3, [r7, #12]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	08004c68 	.word	0x08004c68
 8001ca8:	e000ed04 	.word	0xe000ed04

08001cac <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d104      	bne.n	8001cce <xQueueGenericCreateStatic+0x22>
 8001cc4:	f240 1177 	movw	r1, #375	@ 0x177
 8001cc8:	481e      	ldr	r0, [pc, #120]	@ (8001d44 <xQueueGenericCreateStatic+0x98>)
 8001cca:	f7fe fbfb 	bl	80004c4 <assert_failed>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d02a      	beq.n	8001d2a <xQueueGenericCreateStatic+0x7e>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d027      	beq.n	8001d2a <xQueueGenericCreateStatic+0x7e>
            ( pxStaticQueue != NULL ) &&
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <xQueueGenericCreateStatic+0x3a>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d021      	beq.n	8001d2a <xQueueGenericCreateStatic+0x7e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <xQueueGenericCreateStatic+0x46>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d11b      	bne.n	8001d2a <xQueueGenericCreateStatic+0x7e>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8001cf2:	2348      	movs	r3, #72	@ 0x48
 8001cf4:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b48      	cmp	r3, #72	@ 0x48
 8001cfa:	d004      	beq.n	8001d06 <xQueueGenericCreateStatic+0x5a>
 8001cfc:	f240 1189 	movw	r1, #393	@ 0x189
 8001d00:	4810      	ldr	r0, [pc, #64]	@ (8001d44 <xQueueGenericCreateStatic+0x98>)
 8001d02:	f7fe fbdf 	bl	80004c4 <assert_failed>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8001d06:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d14:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f810 	bl	8001d48 <prvInitialiseNewQueue>
 8001d28:	e007      	b.n	8001d3a <xQueueGenericCreateStatic+0x8e>
        }
        else
        {
            configASSERT( pxNewQueue );
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d104      	bne.n	8001d3a <xQueueGenericCreateStatic+0x8e>
 8001d30:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8001d34:	4803      	ldr	r0, [pc, #12]	@ (8001d44 <xQueueGenericCreateStatic+0x98>)
 8001d36:	f7fe fbc5 	bl	80004c4 <assert_failed>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001d3a:	697b      	ldr	r3, [r7, #20]
    }
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	08004c68 	.word	0x08004c68

08001d48 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e002      	b.n	8001d6a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d76:	2101      	movs	r1, #1
 8001d78:	69b8      	ldr	r0, [r7, #24]
 8001d7a:	f7ff ff11 	bl	8001ba0 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	@ 0x38
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d104      	bne.n	8001daa <xQueueGenericSendFromISR+0x22>
 8001da0:	f240 4151 	movw	r1, #1105	@ 0x451
 8001da4:	4846      	ldr	r0, [pc, #280]	@ (8001ec0 <xQueueGenericSendFromISR+0x138>)
 8001da6:	f7fe fb8d 	bl	80004c4 <assert_failed>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d103      	bne.n	8001db8 <xQueueGenericSendFromISR+0x30>
 8001db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <xQueueGenericSendFromISR+0x34>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <xQueueGenericSendFromISR+0x36>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d104      	bne.n	8001dcc <xQueueGenericSendFromISR+0x44>
 8001dc2:	f240 4152 	movw	r1, #1106	@ 0x452
 8001dc6:	483e      	ldr	r0, [pc, #248]	@ (8001ec0 <xQueueGenericSendFromISR+0x138>)
 8001dc8:	f7fe fb7c 	bl	80004c4 <assert_failed>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d103      	bne.n	8001dda <xQueueGenericSendFromISR+0x52>
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <xQueueGenericSendFromISR+0x56>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <xQueueGenericSendFromISR+0x58>
 8001dde:	2300      	movs	r3, #0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d104      	bne.n	8001dee <xQueueGenericSendFromISR+0x66>
 8001de4:	f240 4153 	movw	r1, #1107	@ 0x453
 8001de8:	4835      	ldr	r0, [pc, #212]	@ (8001ec0 <xQueueGenericSendFromISR+0x138>)
 8001dea:	f7fe fb6b 	bl	80004c4 <assert_failed>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001dee:	f7ff fd67 	bl	80018c0 <vPortValidateInterruptPriority>
        __asm volatile
 8001df2:	f3ef 8211 	mrs	r2, BASEPRI
 8001df6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8001dfa:	b672      	cpsid	i
 8001dfc:	f383 8811 	msr	BASEPRI, r3
 8001e00:	f3bf 8f6f 	isb	sy
 8001e04:	f3bf 8f4f 	dsb	sy
 8001e08:	b662      	cpsie	i
 8001e0a:	61fa      	str	r2, [r7, #28]
 8001e0c:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <xQueueGenericSendFromISR+0x9c>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d140      	bne.n	8001ea6 <xQueueGenericSendFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e3a:	f000 f913 	bl	8002064 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001e3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e46:	d112      	bne.n	8001e6e <xQueueGenericSendFromISR+0xe6>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d027      	beq.n	8001ea0 <xQueueGenericSendFromISR+0x118>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e52:	3324      	adds	r3, #36	@ 0x24
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fe91 	bl	8002b7c <xTaskRemoveFromEventList>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01f      	beq.n	8001ea0 <xQueueGenericSendFromISR+0x118>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d01c      	beq.n	8001ea0 <xQueueGenericSendFromISR+0x118>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e018      	b.n	8001ea0 <xQueueGenericSendFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8001e6e:	f000 fcc3 	bl	80027f8 <uxTaskGetNumberOfTasks>
 8001e72:	6238      	str	r0, [r7, #32]
 8001e74:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8001e78:	6a3a      	ldr	r2, [r7, #32]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d910      	bls.n	8001ea0 <xQueueGenericSendFromISR+0x118>
 8001e7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8001e82:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e84:	d104      	bne.n	8001e90 <xQueueGenericSendFromISR+0x108>
 8001e86:	f240 41dc 	movw	r1, #1244	@ 0x4dc
 8001e8a:	480d      	ldr	r0, [pc, #52]	@ (8001ec0 <xQueueGenericSendFromISR+0x138>)
 8001e8c:	f7fe fb1a 	bl	80004c4 <assert_failed>
 8001e90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	b25a      	sxtb	r2, r3
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	637b      	str	r3, [r7, #52]	@ 0x34
        {
 8001ea4:	e001      	b.n	8001eaa <xQueueGenericSendFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eac:	617b      	str	r3, [r7, #20]
        __asm volatile
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f383 8811 	msr	BASEPRI, r3
    }
 8001eb4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3738      	adds	r7, #56	@ 0x38
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	08004c68 	.word	0x08004c68

08001ec4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	@ 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d104      	bne.n	8001ee8 <xQueueReceive+0x24>
 8001ede:	f240 519c 	movw	r1, #1436	@ 0x59c
 8001ee2:	485e      	ldr	r0, [pc, #376]	@ (800205c <xQueueReceive+0x198>)
 8001ee4:	f7fe faee 	bl	80004c4 <assert_failed>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <xQueueReceive+0x32>
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <xQueueReceive+0x36>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <xQueueReceive+0x38>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <xQueueReceive+0x46>
 8001f00:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 8001f04:	4855      	ldr	r0, [pc, #340]	@ (800205c <xQueueReceive+0x198>)
 8001f06:	f7fe fadd 	bl	80004c4 <assert_failed>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f0a:	f001 f837 	bl	8002f7c <xTaskGetSchedulerState>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <xQueueReceive+0x56>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <xQueueReceive+0x5a>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <xQueueReceive+0x5c>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <xQueueReceive+0x6a>
 8001f24:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 8001f28:	484c      	ldr	r0, [pc, #304]	@ (800205c <xQueueReceive+0x198>)
 8001f2a:	f7fe facb 	bl	80004c4 <assert_failed>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001f2e:	f7ff fbeb 	bl	8001708 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f36:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01f      	beq.n	8001f7e <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	6a38      	ldr	r0, [r7, #32]
 8001f42:	f000 f8f9 	bl	8002138 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00f      	beq.n	8001f76 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	3310      	adds	r3, #16
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fe0e 	bl	8002b7c <xTaskRemoveFromEventList>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001f66:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <xQueueReceive+0x19c>)
 8001f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f3bf 8f4f 	dsb	sy
 8001f72:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001f76:	f7ff fbf3 	bl	8001760 <vPortExitCritical>
                return pdPASS;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e069      	b.n	8002052 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d103      	bne.n	8001f8c <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f84:	f7ff fbec 	bl	8001760 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e062      	b.n	8002052 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fec0 	bl	8002d1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001fa0:	f7ff fbde 	bl	8001760 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001fa4:	f000 fb22 	bl	80025ec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001fa8:	f7ff fbae 	bl	8001708 <vPortEnterCritical>
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d103      	bne.n	8001fc2 <xQueueReceive+0xfe>
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001fc8:	b25b      	sxtb	r3, r3
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d103      	bne.n	8001fd8 <xQueueReceive+0x114>
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fd8:	f7ff fbc2 	bl	8001760 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fdc:	1d3a      	adds	r2, r7, #4
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 feaf 	bl	8002d48 <xTaskCheckForTimeOut>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d123      	bne.n	8002038 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ff0:	6a38      	ldr	r0, [r7, #32]
 8001ff2:	f000 f919 	bl	8002228 <prvIsQueueEmpty>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d017      	beq.n	800202c <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	3324      	adds	r3, #36	@ 0x24
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fd99 	bl	8002b3c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800200a:	6a38      	ldr	r0, [r7, #32]
 800200c:	f000 f8ba 	bl	8002184 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002010:	f000 fafa 	bl	8002608 <xTaskResumeAll>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d189      	bne.n	8001f2e <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 800201a:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <xQueueReceive+0x19c>)
 800201c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f3bf 8f4f 	dsb	sy
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	e780      	b.n	8001f2e <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800202c:	6a38      	ldr	r0, [r7, #32]
 800202e:	f000 f8a9 	bl	8002184 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002032:	f000 fae9 	bl	8002608 <xTaskResumeAll>
 8002036:	e77a      	b.n	8001f2e <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002038:	6a38      	ldr	r0, [r7, #32]
 800203a:	f000 f8a3 	bl	8002184 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800203e:	f000 fae3 	bl	8002608 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002042:	6a38      	ldr	r0, [r7, #32]
 8002044:	f000 f8f0 	bl	8002228 <prvIsQueueEmpty>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	f43f af6f 	beq.w	8001f2e <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002050:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002052:	4618      	mov	r0, r3
 8002054:	3728      	adds	r7, #40	@ 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	08004c68 	.word	0x08004c68
 8002060:	e000ed04 	.word	0xe000ed04

08002064 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002078:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d14d      	bne.n	8002126 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 ff92 	bl	8002fb8 <xTaskPriorityDisinherit>
 8002094:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e043      	b.n	8002126 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d119      	bne.n	80020d8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6858      	ldr	r0, [r3, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	461a      	mov	r2, r3
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	f002 fd34 	bl	8004b1c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	441a      	add	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d32b      	bcc.n	8002126 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	e026      	b.n	8002126 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	68d8      	ldr	r0, [r3, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	461a      	mov	r2, r3
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	f002 fd1a 	bl	8004b1c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	425b      	negs	r3, r3
 80020f2:	441a      	add	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d207      	bcs.n	8002114 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	425b      	negs	r3, r3
 800210e:	441a      	add	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d105      	bne.n	8002126 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	3b01      	subs	r3, #1
 8002124:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800212e:	697b      	ldr	r3, [r7, #20]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d018      	beq.n	800217c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	441a      	add	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	429a      	cmp	r2, r3
 8002162:	d303      	bcc.n	800216c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68d9      	ldr	r1, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	461a      	mov	r2, r3
 8002176:	6838      	ldr	r0, [r7, #0]
 8002178:	f002 fcd0 	bl	8004b1c <memcpy>
    }
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800218c:	f7ff fabc 	bl	8001708 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002196:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002198:	e011      	b.n	80021be <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d012      	beq.n	80021c8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3324      	adds	r3, #36	@ 0x24
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fce8 	bl	8002b7c <xTaskRemoveFromEventList>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80021b2:	f000 fe1d 	bl	8002df0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	dce9      	bgt.n	800219a <prvUnlockQueue+0x16>
 80021c6:	e000      	b.n	80021ca <prvUnlockQueue+0x46>
                    break;
 80021c8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	22ff      	movs	r2, #255	@ 0xff
 80021ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80021d2:	f7ff fac5 	bl	8001760 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80021d6:	f7ff fa97 	bl	8001708 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021e0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80021e2:	e011      	b.n	8002208 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d012      	beq.n	8002212 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3310      	adds	r3, #16
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fcc3 	bl	8002b7c <xTaskRemoveFromEventList>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80021fc:	f000 fdf8 	bl	8002df0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002200:	7bbb      	ldrb	r3, [r7, #14]
 8002202:	3b01      	subs	r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800220c:	2b00      	cmp	r3, #0
 800220e:	dce9      	bgt.n	80021e4 <prvUnlockQueue+0x60>
 8002210:	e000      	b.n	8002214 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002212:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	22ff      	movs	r2, #255	@ 0xff
 8002218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800221c:	f7ff faa0 	bl	8001760 <vPortExitCritical>
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002230:	f7ff fa6a 	bl	8001708 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800223c:	2301      	movs	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e001      	b.n	8002246 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002246:	f7ff fa8b 	bl	8001760 <vPortExitCritical>

    return xReturn;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	@ 0x30
 8002258:	af04      	add	r7, sp, #16
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8002262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <xTaskCreateStatic+0x1e>
 8002268:	f240 2143 	movw	r1, #579	@ 0x243
 800226c:	4821      	ldr	r0, [pc, #132]	@ (80022f4 <xTaskCreateStatic+0xa0>)
 800226e:	f7fe f929 	bl	80004c4 <assert_failed>
        configASSERT( pxTaskBuffer != NULL );
 8002272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002274:	2b00      	cmp	r3, #0
 8002276:	d104      	bne.n	8002282 <xTaskCreateStatic+0x2e>
 8002278:	f44f 7111 	mov.w	r1, #580	@ 0x244
 800227c:	481d      	ldr	r0, [pc, #116]	@ (80022f4 <xTaskCreateStatic+0xa0>)
 800227e:	f7fe f921 	bl	80004c4 <assert_failed>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8002282:	234c      	movs	r3, #76	@ 0x4c
 8002284:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b4c      	cmp	r3, #76	@ 0x4c
 800228a:	d004      	beq.n	8002296 <xTaskCreateStatic+0x42>
 800228c:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8002290:	4818      	ldr	r0, [pc, #96]	@ (80022f4 <xTaskCreateStatic+0xa0>)
 8002292:	f7fe f917 	bl	80004c4 <assert_failed>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002296:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	2b00      	cmp	r3, #0
 800229c:	d023      	beq.n	80022e6 <xTaskCreateStatic+0x92>
 800229e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <xTaskCreateStatic+0x92>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a6:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022a8:	224c      	movs	r2, #76	@ 0x4c
 80022aa:	2100      	movs	r1, #0
 80022ac:	69f8      	ldr	r0, [r7, #28]
 80022ae:	f002 fc09 	bl	8004ac4 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022c0:	2300      	movs	r3, #0
 80022c2:	9303      	str	r3, [sp, #12]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	9302      	str	r3, [sp, #8]
 80022c8:	f107 0318 	add.w	r3, r7, #24
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f80d 	bl	80022f8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80022de:	69f8      	ldr	r0, [r7, #28]
 80022e0:	f000 f88e 	bl	8002400 <prvAddNewTaskToReadyList>
 80022e4:	e001      	b.n	80022ea <xTaskCreateStatic+0x96>
        }
        else
        {
            xReturn = NULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80022ea:	69bb      	ldr	r3, [r7, #24]
    }
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	08004cdc 	.word	0x08004cdc

080022f8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	461a      	mov	r2, r3
 8002310:	21a5      	movs	r1, #165	@ 0xa5
 8002312:	f002 fbd7 	bl	8004ac4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002320:	440b      	add	r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f023 0307 	bic.w	r3, r3, #7
 800232e:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <prvInitialiseNewTask+0x4c>
 800233a:	f240 3161 	movw	r1, #865	@ 0x361
 800233e:	482f      	ldr	r0, [pc, #188]	@ (80023fc <prvInitialiseNewTask+0x104>)
 8002340:	f7fe f8c0 	bl	80004c4 <assert_failed>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d01e      	beq.n	8002388 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e012      	b.n	8002376 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	4413      	add	r3, r2
 8002356:	7819      	ldrb	r1, [r3, #0]
 8002358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	4413      	add	r3, r2
 800235e:	3334      	adds	r3, #52	@ 0x34
 8002360:	460a      	mov	r2, r1
 8002362:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	4413      	add	r3, r2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3301      	adds	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b07      	cmp	r3, #7
 800237a:	d9e9      	bls.n	8002350 <prvInitialiseNewTask+0x58>
 800237c:	e000      	b.n	8002380 <prvInitialiseNewTask+0x88>
            {
                break;
 800237e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	2b1f      	cmp	r3, #31
 800238c:	d904      	bls.n	8002398 <prvInitialiseNewTask+0xa0>
 800238e:	f240 3196 	movw	r1, #918	@ 0x396
 8002392:	481a      	ldr	r0, [pc, #104]	@ (80023fc <prvInitialiseNewTask+0x104>)
 8002394:	f7fe f896 	bl	80004c4 <assert_failed>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	2b1f      	cmp	r3, #31
 800239c:	d901      	bls.n	80023a2 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800239e:	231f      	movs	r3, #31
 80023a0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	6a3a      	ldr	r2, [r7, #32]
 80023a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80023a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023aa:	6a3a      	ldr	r2, [r7, #32]
 80023ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b0:	3304      	adds	r3, #4
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fb84 	bl	8001ac0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ba:	3318      	adds	r3, #24
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fb7f 	bl	8001ac0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023c6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	f1c3 0220 	rsb	r2, r3, #32
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023d6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	68f9      	ldr	r1, [r7, #12]
 80023dc:	6938      	ldr	r0, [r7, #16]
 80023de:	f7ff f87f 	bl	80014e0 <pxPortInitialiseStack>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023f2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023f4:	bf00      	nop
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	08004cdc 	.word	0x08004cdc

08002400 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002408:	f7ff f97e 	bl	8001708 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800240c:	4b3e      	ldr	r3, [pc, #248]	@ (8002508 <prvAddNewTaskToReadyList+0x108>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a3d      	ldr	r2, [pc, #244]	@ (8002508 <prvAddNewTaskToReadyList+0x108>)
 8002414:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002416:	4b3d      	ldr	r3, [pc, #244]	@ (800250c <prvAddNewTaskToReadyList+0x10c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800241e:	4a3b      	ldr	r2, [pc, #236]	@ (800250c <prvAddNewTaskToReadyList+0x10c>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002424:	4b38      	ldr	r3, [pc, #224]	@ (8002508 <prvAddNewTaskToReadyList+0x108>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d110      	bne.n	800244e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800242c:	f000 fcf6 	bl	8002e1c <prvInitialiseTaskLists>
 8002430:	e00d      	b.n	800244e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002432:	4b37      	ldr	r3, [pc, #220]	@ (8002510 <prvAddNewTaskToReadyList+0x110>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800243a:	4b34      	ldr	r3, [pc, #208]	@ (800250c <prvAddNewTaskToReadyList+0x10c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002444:	429a      	cmp	r2, r3
 8002446:	d802      	bhi.n	800244e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002448:	4a30      	ldr	r2, [pc, #192]	@ (800250c <prvAddNewTaskToReadyList+0x10c>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800244e:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <prvAddNewTaskToReadyList+0x114>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	4a2f      	ldr	r2, [pc, #188]	@ (8002514 <prvAddNewTaskToReadyList+0x114>)
 8002456:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	2201      	movs	r2, #1
 800245e:	409a      	lsls	r2, r3
 8002460:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <prvAddNewTaskToReadyList+0x118>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4313      	orrs	r3, r2
 8002466:	4a2c      	ldr	r2, [pc, #176]	@ (8002518 <prvAddNewTaskToReadyList+0x118>)
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800246e:	492b      	ldr	r1, [pc, #172]	@ (800251c <prvAddNewTaskToReadyList+0x11c>)
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3304      	adds	r3, #4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	3204      	adds	r2, #4
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	1d1a      	adds	r2, r3, #4
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4a1b      	ldr	r2, [pc, #108]	@ (800251c <prvAddNewTaskToReadyList+0x11c>)
 80024ae:	441a      	add	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	615a      	str	r2, [r3, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b8:	4918      	ldr	r1, [pc, #96]	@ (800251c <prvAddNewTaskToReadyList+0x11c>)
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	1c59      	adds	r1, r3, #1
 80024c8:	4814      	ldr	r0, [pc, #80]	@ (800251c <prvAddNewTaskToReadyList+0x11c>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4403      	add	r3, r0
 80024d4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024d6:	f7ff f943 	bl	8001760 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <prvAddNewTaskToReadyList+0x110>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00e      	beq.n	8002500 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024e2:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <prvAddNewTaskToReadyList+0x10c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d207      	bcs.n	8002500 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <prvAddNewTaskToReadyList+0x120>)
 80024f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	24000904 	.word	0x24000904
 800250c:	24000624 	.word	0x24000624
 8002510:	24000910 	.word	0x24000910
 8002514:	24000920 	.word	0x24000920
 8002518:	2400090c 	.word	0x2400090c
 800251c:	24000628 	.word	0x24000628
 8002520:	e000ed04 	.word	0xe000ed04

08002524 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	@ 0x28
 8002528:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002532:	1d3a      	adds	r2, r7, #4
 8002534:	f107 0108 	add.w	r1, r7, #8
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f851 	bl	80005e4 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	9202      	str	r2, [sp, #8]
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	2300      	movs	r3, #0
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2300      	movs	r3, #0
 8002552:	460a      	mov	r2, r1
 8002554:	491d      	ldr	r1, [pc, #116]	@ (80025cc <vTaskStartScheduler+0xa8>)
 8002556:	481e      	ldr	r0, [pc, #120]	@ (80025d0 <vTaskStartScheduler+0xac>)
 8002558:	f7ff fe7c 	bl	8002254 <xTaskCreateStatic>
 800255c:	4603      	mov	r3, r0
 800255e:	4a1d      	ldr	r2, [pc, #116]	@ (80025d4 <vTaskStartScheduler+0xb0>)
 8002560:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8002562:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <vTaskStartScheduler+0xb0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <vTaskStartScheduler+0x4c>
        {
            xReturn = pdPASS;
 800256a:	2301      	movs	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e001      	b.n	8002574 <vTaskStartScheduler+0x50>
        }
        else
        {
            xReturn = pdFAIL;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d118      	bne.n	80025ac <vTaskStartScheduler+0x88>
        __asm volatile
 800257a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800257e:	b672      	cpsid	i
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	b662      	cpsie	i
 800258e:	613b      	str	r3, [r7, #16]
    }
 8002590:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002592:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <vTaskStartScheduler+0xb4>)
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800259a:	4b10      	ldr	r3, [pc, #64]	@ (80025dc <vTaskStartScheduler+0xb8>)
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025a0:	4b0f      	ldr	r3, [pc, #60]	@ (80025e0 <vTaskStartScheduler+0xbc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80025a6:	f7ff f825 	bl	80015f4 <xPortStartScheduler>
 80025aa:	e008      	b.n	80025be <vTaskStartScheduler+0x9a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d104      	bne.n	80025be <vTaskStartScheduler+0x9a>
 80025b4:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 80025b8:	480a      	ldr	r0, [pc, #40]	@ (80025e4 <vTaskStartScheduler+0xc0>)
 80025ba:	f7fd ff83 	bl	80004c4 <assert_failed>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <vTaskStartScheduler+0xc4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	08004d50 	.word	0x08004d50
 80025d0:	08002e09 	.word	0x08002e09
 80025d4:	24000928 	.word	0x24000928
 80025d8:	24000924 	.word	0x24000924
 80025dc:	24000910 	.word	0x24000910
 80025e0:	24000908 	.word	0x24000908
 80025e4:	08004cdc 	.word	0x08004cdc
 80025e8:	24000024 	.word	0x24000024

080025ec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80025f0:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <vTaskSuspendAll+0x18>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	4a03      	ldr	r2, [pc, #12]	@ (8002604 <vTaskSuspendAll+0x18>)
 80025f8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	2400092c 	.word	0x2400092c

08002608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8002616:	4b6e      	ldr	r3, [pc, #440]	@ (80027d0 <xTaskResumeAll+0x1c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <xTaskResumeAll+0x20>
 800261e:	f640 0193 	movw	r1, #2195	@ 0x893
 8002622:	486c      	ldr	r0, [pc, #432]	@ (80027d4 <xTaskResumeAll+0x1cc>)
 8002624:	f7fd ff4e 	bl	80004c4 <assert_failed>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002628:	f7ff f86e 	bl	8001708 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800262c:	4b68      	ldr	r3, [pc, #416]	@ (80027d0 <xTaskResumeAll+0x1c8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	3b01      	subs	r3, #1
 8002632:	4a67      	ldr	r2, [pc, #412]	@ (80027d0 <xTaskResumeAll+0x1c8>)
 8002634:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002636:	4b66      	ldr	r3, [pc, #408]	@ (80027d0 <xTaskResumeAll+0x1c8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 80c0 	bne.w	80027c0 <xTaskResumeAll+0x1b8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002640:	4b65      	ldr	r3, [pc, #404]	@ (80027d8 <xTaskResumeAll+0x1d0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80bb 	beq.w	80027c0 <xTaskResumeAll+0x1b8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800264a:	e08a      	b.n	8002762 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800264c:	4b63      	ldr	r3, [pc, #396]	@ (80027dc <xTaskResumeAll+0x1d4>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	6a12      	ldr	r2, [r2, #32]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	69d2      	ldr	r2, [r2, #28]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3318      	adds	r3, #24
 8002676:	429a      	cmp	r2, r3
 8002678:	d103      	bne.n	8002682 <xTaskResumeAll+0x7a>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	6a1a      	ldr	r2, [r3, #32]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2200      	movs	r2, #0
 8002686:	629a      	str	r2, [r3, #40]	@ 0x28
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	68d2      	ldr	r2, [r2, #12]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	6892      	ldr	r2, [r2, #8]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3304      	adds	r3, #4
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d103      	bne.n	80026c0 <xTaskResumeAll+0xb8>
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2200      	movs	r2, #0
 80026c4:	615a      	str	r2, [r3, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1e5a      	subs	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	2201      	movs	r2, #1
 80026d6:	409a      	lsls	r2, r3
 80026d8:	4b41      	ldr	r3, [pc, #260]	@ (80027e0 <xTaskResumeAll+0x1d8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	4a40      	ldr	r2, [pc, #256]	@ (80027e0 <xTaskResumeAll+0x1d8>)
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e6:	493f      	ldr	r1, [pc, #252]	@ (80027e4 <xTaskResumeAll+0x1dc>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	3304      	adds	r3, #4
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	3204      	adds	r2, #4
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	1d1a      	adds	r2, r3, #4
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4a2f      	ldr	r2, [pc, #188]	@ (80027e4 <xTaskResumeAll+0x1dc>)
 8002726:	441a      	add	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	615a      	str	r2, [r3, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002730:	492c      	ldr	r1, [pc, #176]	@ (80027e4 <xTaskResumeAll+0x1dc>)
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1c59      	adds	r1, r3, #1
 8002740:	4828      	ldr	r0, [pc, #160]	@ (80027e4 <xTaskResumeAll+0x1dc>)
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4403      	add	r3, r0
 800274c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002752:	4b25      	ldr	r3, [pc, #148]	@ (80027e8 <xTaskResumeAll+0x1e0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	429a      	cmp	r2, r3
 800275a:	d902      	bls.n	8002762 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800275c:	4b23      	ldr	r3, [pc, #140]	@ (80027ec <xTaskResumeAll+0x1e4>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002762:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <xTaskResumeAll+0x1d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f47f af70 	bne.w	800264c <xTaskResumeAll+0x44>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002772:	f000 fbe7 	bl	8002f44 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002776:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <xTaskResumeAll+0x1e8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d010      	beq.n	80027a4 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002782:	f000 f845 	bl	8002810 <xTaskIncrementTick>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800278c:	4b17      	ldr	r3, [pc, #92]	@ (80027ec <xTaskResumeAll+0x1e4>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3b01      	subs	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f1      	bne.n	8002782 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800279e:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <xTaskResumeAll+0x1e8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80027a4:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <xTaskResumeAll+0x1e4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <xTaskResumeAll+0x1b8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80027b0:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <xTaskResumeAll+0x1ec>)
 80027b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80027c0:	f7fe ffce 	bl	8001760 <vPortExitCritical>

    return xAlreadyYielded;
 80027c4:	693b      	ldr	r3, [r7, #16]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2400092c 	.word	0x2400092c
 80027d4:	08004cdc 	.word	0x08004cdc
 80027d8:	24000904 	.word	0x24000904
 80027dc:	240008d8 	.word	0x240008d8
 80027e0:	2400090c 	.word	0x2400090c
 80027e4:	24000628 	.word	0x24000628
 80027e8:	24000624 	.word	0x24000624
 80027ec:	24000918 	.word	0x24000918
 80027f0:	24000914 	.word	0x24000914
 80027f4:	e000ed04 	.word	0xe000ed04

080027f8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80027fc:	4b03      	ldr	r3, [pc, #12]	@ (800280c <uxTaskGetNumberOfTasks+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	24000904 	.word	0x24000904

08002810 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800281a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a14 <xTaskIncrementTick+0x204>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 80ec 	bne.w	80029fc <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002824:	4b7c      	ldr	r3, [pc, #496]	@ (8002a18 <xTaskIncrementTick+0x208>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800282c:	4a7a      	ldr	r2, [pc, #488]	@ (8002a18 <xTaskIncrementTick+0x208>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11a      	bne.n	800286e <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8002838:	4b78      	ldr	r3, [pc, #480]	@ (8002a1c <xTaskIncrementTick+0x20c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d004      	beq.n	800284c <xTaskIncrementTick+0x3c>
 8002842:	f640 21f4 	movw	r1, #2804	@ 0xaf4
 8002846:	4876      	ldr	r0, [pc, #472]	@ (8002a20 <xTaskIncrementTick+0x210>)
 8002848:	f7fd fe3c 	bl	80004c4 <assert_failed>
 800284c:	4b73      	ldr	r3, [pc, #460]	@ (8002a1c <xTaskIncrementTick+0x20c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	4b74      	ldr	r3, [pc, #464]	@ (8002a24 <xTaskIncrementTick+0x214>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a71      	ldr	r2, [pc, #452]	@ (8002a1c <xTaskIncrementTick+0x20c>)
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4a72      	ldr	r2, [pc, #456]	@ (8002a24 <xTaskIncrementTick+0x214>)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b71      	ldr	r3, [pc, #452]	@ (8002a28 <xTaskIncrementTick+0x218>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	4a70      	ldr	r2, [pc, #448]	@ (8002a28 <xTaskIncrementTick+0x218>)
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	f000 fb6b 	bl	8002f44 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800286e:	4b6f      	ldr	r3, [pc, #444]	@ (8002a2c <xTaskIncrementTick+0x21c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	429a      	cmp	r2, r3
 8002876:	f0c0 80a6 	bcc.w	80029c6 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800287a:	4b68      	ldr	r3, [pc, #416]	@ (8002a1c <xTaskIncrementTick+0x20c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d104      	bne.n	800288e <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002884:	4b69      	ldr	r3, [pc, #420]	@ (8002a2c <xTaskIncrementTick+0x21c>)
 8002886:	f04f 32ff 	mov.w	r2, #4294967295
 800288a:	601a      	str	r2, [r3, #0]
                    break;
 800288c:	e09b      	b.n	80029c6 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800288e:	4b63      	ldr	r3, [pc, #396]	@ (8002a1c <xTaskIncrementTick+0x20c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d203      	bcs.n	80028ae <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80028a6:	4a61      	ldr	r2, [pc, #388]	@ (8002a2c <xTaskIncrementTick+0x21c>)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80028ac:	e08b      	b.n	80029c6 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	68d2      	ldr	r2, [r2, #12]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	6892      	ldr	r2, [r2, #8]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	3304      	adds	r3, #4
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d103      	bne.n	80028dc <xTaskIncrementTick+0xcc>
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1e5a      	subs	r2, r3, #1
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01e      	beq.n	8002932 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	6a12      	ldr	r2, [r2, #32]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	69d2      	ldr	r2, [r2, #28]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	3318      	adds	r3, #24
 8002916:	429a      	cmp	r2, r3
 8002918:	d103      	bne.n	8002922 <xTaskIncrementTick+0x112>
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2200      	movs	r2, #0
 8002926:	629a      	str	r2, [r3, #40]	@ 0x28
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1e5a      	subs	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	2201      	movs	r2, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a30 <xTaskIncrementTick+0x220>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	4a3b      	ldr	r2, [pc, #236]	@ (8002a30 <xTaskIncrementTick+0x220>)
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002948:	493a      	ldr	r1, [pc, #232]	@ (8002a34 <xTaskIncrementTick+0x224>)
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3304      	adds	r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	3204      	adds	r2, #4
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1d1a      	adds	r2, r3, #4
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4a2b      	ldr	r2, [pc, #172]	@ (8002a34 <xTaskIncrementTick+0x224>)
 8002988:	441a      	add	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	615a      	str	r2, [r3, #20]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002992:	4928      	ldr	r1, [pc, #160]	@ (8002a34 <xTaskIncrementTick+0x224>)
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	1c59      	adds	r1, r3, #1
 80029a2:	4824      	ldr	r0, [pc, #144]	@ (8002a34 <xTaskIncrementTick+0x224>)
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4403      	add	r3, r0
 80029ae:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029b4:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <xTaskIncrementTick+0x228>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ba:	429a      	cmp	r2, r3
 80029bc:	f67f af5d 	bls.w	800287a <xTaskIncrementTick+0x6a>
                        {
                            xSwitchRequired = pdTRUE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029c4:	e759      	b.n	800287a <xTaskIncrementTick+0x6a>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <xTaskIncrementTick+0x228>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029cc:	4919      	ldr	r1, [pc, #100]	@ (8002a34 <xTaskIncrementTick+0x224>)
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d901      	bls.n	80029e2 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 80029de:	2301      	movs	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]

        #if ( configUSE_TICK_HOOK == 1 )
        {
            /* Guard against the tick hook being called when the pended tick
             * count is being unwound (when the scheduler is being unlocked). */
            if( xPendedTicks == ( TickType_t ) 0 )
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <xTaskIncrementTick+0x22c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <xTaskIncrementTick+0x1de>
            {
                vApplicationTickHook();
 80029ea:	f7fd fd9f 	bl	800052c <vApplicationTickHook>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80029ee:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <xTaskIncrementTick+0x230>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <xTaskIncrementTick+0x1fa>
            {
                xSwitchRequired = pdTRUE;
 80029f6:	2301      	movs	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e006      	b.n	8002a0a <xTaskIncrementTick+0x1fa>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80029fc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <xTaskIncrementTick+0x22c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4a0e      	ldr	r2, [pc, #56]	@ (8002a3c <xTaskIncrementTick+0x22c>)
 8002a04:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
        {
            vApplicationTickHook();
 8002a06:	f7fd fd91 	bl	800052c <vApplicationTickHook>
        }
        #endif
    }

    return xSwitchRequired;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	2400092c 	.word	0x2400092c
 8002a18:	24000908 	.word	0x24000908
 8002a1c:	240008d0 	.word	0x240008d0
 8002a20:	08004cdc 	.word	0x08004cdc
 8002a24:	240008d4 	.word	0x240008d4
 8002a28:	2400091c 	.word	0x2400091c
 8002a2c:	24000924 	.word	0x24000924
 8002a30:	2400090c 	.word	0x2400090c
 8002a34:	24000628 	.word	0x24000628
 8002a38:	24000624 	.word	0x24000624
 8002a3c:	24000914 	.word	0x24000914
 8002a40:	24000918 	.word	0x24000918

08002a44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002a4a:	4b36      	ldr	r3, [pc, #216]	@ (8002b24 <vTaskSwitchContext+0xe0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a52:	4b35      	ldr	r3, [pc, #212]	@ (8002b28 <vTaskSwitchContext+0xe4>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002a58:	e05f      	b.n	8002b1a <vTaskSwitchContext+0xd6>
        xYieldPending = pdFALSE;
 8002a5a:	4b33      	ldr	r3, [pc, #204]	@ (8002b28 <vTaskSwitchContext+0xe4>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8002a60:	4b32      	ldr	r3, [pc, #200]	@ (8002b2c <vTaskSwitchContext+0xe8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d111      	bne.n	8002a9c <vTaskSwitchContext+0x58>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d10b      	bne.n	8002a9c <vTaskSwitchContext+0x58>
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3308      	adds	r3, #8
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d105      	bne.n	8002a9c <vTaskSwitchContext+0x58>
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	330c      	adds	r3, #12
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d008      	beq.n	8002aae <vTaskSwitchContext+0x6a>
 8002a9c:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <vTaskSwitchContext+0xe8>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b22      	ldr	r3, [pc, #136]	@ (8002b2c <vTaskSwitchContext+0xe8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3334      	adds	r3, #52	@ 0x34
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7fd fd8d 	bl	80005c8 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aae:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <vTaskSwitchContext+0xec>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	f1c3 031f 	rsb	r3, r3, #31
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	491b      	ldr	r1, [pc, #108]	@ (8002b34 <vTaskSwitchContext+0xf0>)
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <vTaskSwitchContext+0x9e>
 8002ad8:	f640 4133 	movw	r1, #3123	@ 0xc33
 8002adc:	4816      	ldr	r0, [pc, #88]	@ (8002b38 <vTaskSwitchContext+0xf4>)
 8002ade:	f7fd fcf1 	bl	80004c4 <assert_failed>
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4a11      	ldr	r2, [pc, #68]	@ (8002b34 <vTaskSwitchContext+0xf0>)
 8002aee:	4413      	add	r3, r2
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	3308      	adds	r3, #8
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d103      	bne.n	8002b10 <vTaskSwitchContext+0xcc>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4a05      	ldr	r2, [pc, #20]	@ (8002b2c <vTaskSwitchContext+0xe8>)
 8002b18:	6013      	str	r3, [r2, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	2400092c 	.word	0x2400092c
 8002b28:	24000918 	.word	0x24000918
 8002b2c:	24000624 	.word	0x24000624
 8002b30:	2400090c 	.word	0x2400090c
 8002b34:	24000628 	.word	0x24000628
 8002b38:	08004cdc 	.word	0x08004cdc

08002b3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <vTaskPlaceOnEventList+0x1a>
 8002b4c:	f640 414b 	movw	r1, #3147	@ 0xc4b
 8002b50:	4808      	ldr	r0, [pc, #32]	@ (8002b74 <vTaskPlaceOnEventList+0x38>)
 8002b52:	f7fd fcb7 	bl	80004c4 <assert_failed>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <vTaskPlaceOnEventList+0x3c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe ffbb 	bl	8001ada <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b64:	2101      	movs	r1, #1
 8002b66:	6838      	ldr	r0, [r7, #0]
 8002b68:	f000 fabe 	bl	80030e8 <prvAddCurrentTaskToDelayedList>
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	08004cdc 	.word	0x08004cdc
 8002b78:	24000624 	.word	0x24000624

08002b7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d104      	bne.n	8002b9c <xTaskRemoveFromEventList+0x20>
 8002b92:	f640 41b1 	movw	r1, #3249	@ 0xcb1
 8002b96:	485a      	ldr	r0, [pc, #360]	@ (8002d00 <xTaskRemoveFromEventList+0x184>)
 8002b98:	f7fd fc94 	bl	80004c4 <assert_failed>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	6a12      	ldr	r2, [r2, #32]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	69d2      	ldr	r2, [r2, #28]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	3318      	adds	r3, #24
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d103      	bne.n	8002bca <xTaskRemoveFromEventList+0x4e>
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6a1a      	ldr	r2, [r3, #32]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1e5a      	subs	r2, r3, #1
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002bda:	4b4a      	ldr	r3, [pc, #296]	@ (8002d04 <xTaskRemoveFromEventList+0x188>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d15e      	bne.n	8002ca0 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	68d2      	ldr	r2, [r2, #12]
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	6892      	ldr	r2, [r2, #8]
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	3304      	adds	r3, #4
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d103      	bne.n	8002c10 <xTaskRemoveFromEventList+0x94>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	1e5a      	subs	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	2201      	movs	r2, #1
 8002c26:	409a      	lsls	r2, r3
 8002c28:	4b37      	ldr	r3, [pc, #220]	@ (8002d08 <xTaskRemoveFromEventList+0x18c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	4a36      	ldr	r2, [pc, #216]	@ (8002d08 <xTaskRemoveFromEventList+0x18c>)
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c36:	4935      	ldr	r1, [pc, #212]	@ (8002d0c <xTaskRemoveFromEventList+0x190>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3304      	adds	r3, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	3204      	adds	r2, #4
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	1d1a      	adds	r2, r3, #4
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4a25      	ldr	r2, [pc, #148]	@ (8002d0c <xTaskRemoveFromEventList+0x190>)
 8002c76:	441a      	add	r2, r3
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	615a      	str	r2, [r3, #20]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c80:	4922      	ldr	r1, [pc, #136]	@ (8002d0c <xTaskRemoveFromEventList+0x190>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	1c59      	adds	r1, r3, #1
 8002c90:	481e      	ldr	r0, [pc, #120]	@ (8002d0c <xTaskRemoveFromEventList+0x190>)
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4403      	add	r3, r0
 8002c9c:	6019      	str	r1, [r3, #0]
 8002c9e:	e01b      	b.n	8002cd8 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <xTaskRemoveFromEventList+0x194>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	61da      	str	r2, [r3, #28]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	621a      	str	r2, [r3, #32]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	3218      	adds	r2, #24
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f103 0218 	add.w	r2, r3, #24
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4a11      	ldr	r2, [pc, #68]	@ (8002d10 <xTaskRemoveFromEventList+0x194>)
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <xTaskRemoveFromEventList+0x194>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d10 <xTaskRemoveFromEventList+0x194>)
 8002cd6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <xTaskRemoveFromEventList+0x198>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d905      	bls.n	8002cf2 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002cea:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <xTaskRemoveFromEventList+0x19c>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e001      	b.n	8002cf6 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	08004cdc 	.word	0x08004cdc
 8002d04:	2400092c 	.word	0x2400092c
 8002d08:	2400090c 	.word	0x2400090c
 8002d0c:	24000628 	.word	0x24000628
 8002d10:	240008d8 	.word	0x240008d8
 8002d14:	24000624 	.word	0x24000624
 8002d18:	24000918 	.word	0x24000918

08002d1c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d24:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <vTaskInternalSetTimeOutState+0x24>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <vTaskInternalSetTimeOutState+0x28>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	605a      	str	r2, [r3, #4]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	2400091c 	.word	0x2400091c
 8002d44:	24000908 	.word	0x24000908

08002d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d104      	bne.n	8002d62 <xTaskCheckForTimeOut+0x1a>
 8002d58:	f640 512c 	movw	r1, #3372	@ 0xd2c
 8002d5c:	4821      	ldr	r0, [pc, #132]	@ (8002de4 <xTaskCheckForTimeOut+0x9c>)
 8002d5e:	f7fd fbb1 	bl	80004c4 <assert_failed>
    configASSERT( pxTicksToWait );
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d104      	bne.n	8002d72 <xTaskCheckForTimeOut+0x2a>
 8002d68:	f640 512d 	movw	r1, #3373	@ 0xd2d
 8002d6c:	481d      	ldr	r0, [pc, #116]	@ (8002de4 <xTaskCheckForTimeOut+0x9c>)
 8002d6e:	f7fd fba9 	bl	80004c4 <assert_failed>

    taskENTER_CRITICAL();
 8002d72:	f7fe fcc9 	bl	8001708 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002d76:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <xTaskCheckForTimeOut+0xa0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <xTaskCheckForTimeOut+0xa4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d00a      	beq.n	8002da8 <xTaskCheckForTimeOut+0x60>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d305      	bcc.n	8002da8 <xTaskCheckForTimeOut+0x60>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e015      	b.n	8002dd4 <xTaskCheckForTimeOut+0x8c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d20b      	bcs.n	8002dca <xTaskCheckForTimeOut+0x82>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad2      	subs	r2, r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ffac 	bl	8002d1c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e004      	b.n	8002dd4 <xTaskCheckForTimeOut+0x8c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002dd4:	f7fe fcc4 	bl	8001760 <vPortExitCritical>

    return xReturn;
 8002dd8:	697b      	ldr	r3, [r7, #20]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	08004cdc 	.word	0x08004cdc
 8002de8:	24000908 	.word	0x24000908
 8002dec:	2400091c 	.word	0x2400091c

08002df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002df4:	4b03      	ldr	r3, [pc, #12]	@ (8002e04 <vTaskMissedYield+0x14>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	24000918 	.word	0x24000918

08002e08 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e10:	f000 f83e 	bl	8002e90 <prvCheckTasksWaitingTermination>
        #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */

        #if ( configUSE_IDLE_HOOK == 1 )
        {
            /* Call the user defined function from within the idle task. */
            vApplicationIdleHook();
 8002e14:	f7fd fba8 	bl	8000568 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8002e18:	bf00      	nop
 8002e1a:	e7f9      	b.n	8002e10 <prvIdleTask+0x8>

08002e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	e00c      	b.n	8002e42 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4a10      	ldr	r2, [pc, #64]	@ (8002e74 <prvInitialiseTaskLists+0x58>)
 8002e34:	4413      	add	r3, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fe22 	bl	8001a80 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b1f      	cmp	r3, #31
 8002e46:	d9ef      	bls.n	8002e28 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e48:	480b      	ldr	r0, [pc, #44]	@ (8002e78 <prvInitialiseTaskLists+0x5c>)
 8002e4a:	f7fe fe19 	bl	8001a80 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e4e:	480b      	ldr	r0, [pc, #44]	@ (8002e7c <prvInitialiseTaskLists+0x60>)
 8002e50:	f7fe fe16 	bl	8001a80 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e54:	480a      	ldr	r0, [pc, #40]	@ (8002e80 <prvInitialiseTaskLists+0x64>)
 8002e56:	f7fe fe13 	bl	8001a80 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002e5a:	480a      	ldr	r0, [pc, #40]	@ (8002e84 <prvInitialiseTaskLists+0x68>)
 8002e5c:	f7fe fe10 	bl	8001a80 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <prvInitialiseTaskLists+0x6c>)
 8002e62:	4a05      	ldr	r2, [pc, #20]	@ (8002e78 <prvInitialiseTaskLists+0x5c>)
 8002e64:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e66:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <prvInitialiseTaskLists+0x70>)
 8002e68:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <prvInitialiseTaskLists+0x60>)
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	24000628 	.word	0x24000628
 8002e78:	240008a8 	.word	0x240008a8
 8002e7c:	240008bc 	.word	0x240008bc
 8002e80:	240008d8 	.word	0x240008d8
 8002e84:	240008ec 	.word	0x240008ec
 8002e88:	240008d0 	.word	0x240008d0
 8002e8c:	240008d4 	.word	0x240008d4

08002e90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e96:	e019      	b.n	8002ecc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002e98:	f7fe fc36 	bl	8001708 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <prvCheckTasksWaitingTermination+0x50>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fe4f 	bl	8001b4c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002eae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <prvCheckTasksWaitingTermination+0x54>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee4 <prvCheckTasksWaitingTermination+0x54>)
 8002eb6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <prvCheckTasksWaitingTermination+0x58>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <prvCheckTasksWaitingTermination+0x58>)
 8002ec0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002ec2:	f7fe fc4d 	bl	8001760 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f810 	bl	8002eec <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ecc:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <prvCheckTasksWaitingTermination+0x58>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e1      	bne.n	8002e98 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	240008ec 	.word	0x240008ec
 8002ee4:	24000904 	.word	0x24000904
 8002ee8:	24000900 	.word	0x24000900

08002eec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fd10 	bl	8001928 <vPortFree>
                vPortFree( pxTCB );
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fe fd0d 	bl	8001928 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f0e:	e012      	b.n	8002f36 <prvDeleteTCB+0x4a>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d103      	bne.n	8002f22 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe fd04 	bl	8001928 <vPortFree>
    }
 8002f20:	e009      	b.n	8002f36 <prvDeleteTCB+0x4a>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d004      	beq.n	8002f36 <prvDeleteTCB+0x4a>
 8002f2c:	f640 71d9 	movw	r1, #4057	@ 0xfd9
 8002f30:	4803      	ldr	r0, [pc, #12]	@ (8002f40 <prvDeleteTCB+0x54>)
 8002f32:	f7fd fac7 	bl	80004c4 <assert_failed>
    }
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	08004cdc 	.word	0x08004cdc

08002f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f48:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <prvResetNextTaskUnblockTime+0x30>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d104      	bne.n	8002f5c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f52:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <prvResetNextTaskUnblockTime+0x34>)
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295
 8002f58:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f5a:	e005      	b.n	8002f68 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <prvResetNextTaskUnblockTime+0x30>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a04      	ldr	r2, [pc, #16]	@ (8002f78 <prvResetNextTaskUnblockTime+0x34>)
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	240008d0 	.word	0x240008d0
 8002f78:	24000924 	.word	0x24000924

08002f7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002f82:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <xTaskGetSchedulerState+0x34>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	e008      	b.n	8002fa2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <xTaskGetSchedulerState+0x38>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	e001      	b.n	8002fa2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002fa2:	687b      	ldr	r3, [r7, #4]
    }
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	24000910 	.word	0x24000910
 8002fb4:	2400092c 	.word	0x2400092c

08002fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d07f      	beq.n	80030ce <xTaskPriorityDisinherit+0x116>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002fce:	4b42      	ldr	r3, [pc, #264]	@ (80030d8 <xTaskPriorityDisinherit+0x120>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d004      	beq.n	8002fe2 <xTaskPriorityDisinherit+0x2a>
 8002fd8:	f241 018c 	movw	r1, #4236	@ 0x108c
 8002fdc:	483f      	ldr	r0, [pc, #252]	@ (80030dc <xTaskPriorityDisinherit+0x124>)
 8002fde:	f7fd fa71 	bl	80004c4 <assert_failed>
            configASSERT( pxTCB->uxMutexesHeld );
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <xTaskPriorityDisinherit+0x3c>
 8002fea:	f241 018d 	movw	r1, #4237	@ 0x108d
 8002fee:	483b      	ldr	r0, [pc, #236]	@ (80030dc <xTaskPriorityDisinherit+0x124>)
 8002ff0:	f7fd fa68 	bl	80004c4 <assert_failed>
            ( pxTCB->uxMutexesHeld )--;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	1e5a      	subs	r2, r3, #1
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003006:	429a      	cmp	r2, r3
 8003008:	d061      	beq.n	80030ce <xTaskPriorityDisinherit+0x116>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d15d      	bne.n	80030ce <xTaskPriorityDisinherit+0x116>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	3304      	adds	r3, #4
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fd98 	bl	8001b4c <uxListRemove>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	2201      	movs	r2, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43da      	mvns	r2, r3
 800302e:	4b2c      	ldr	r3, [pc, #176]	@ (80030e0 <xTaskPriorityDisinherit+0x128>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4013      	ands	r3, r2
 8003034:	4a2a      	ldr	r2, [pc, #168]	@ (80030e0 <xTaskPriorityDisinherit+0x128>)
 8003036:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	f1c3 0220 	rsb	r2, r3, #32
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	4b22      	ldr	r3, [pc, #136]	@ (80030e0 <xTaskPriorityDisinherit+0x128>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4313      	orrs	r3, r2
 800305a:	4a21      	ldr	r2, [pc, #132]	@ (80030e0 <xTaskPriorityDisinherit+0x128>)
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003062:	4920      	ldr	r1, [pc, #128]	@ (80030e4 <xTaskPriorityDisinherit+0x12c>)
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3304      	adds	r3, #4
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	609a      	str	r2, [r3, #8]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	3204      	adds	r2, #4
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1d1a      	adds	r2, r3, #4
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4a10      	ldr	r2, [pc, #64]	@ (80030e4 <xTaskPriorityDisinherit+0x12c>)
 80030a2:	441a      	add	r2, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	615a      	str	r2, [r3, #20]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ac:	490d      	ldr	r1, [pc, #52]	@ (80030e4 <xTaskPriorityDisinherit+0x12c>)
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	1c59      	adds	r1, r3, #1
 80030bc:	4809      	ldr	r0, [pc, #36]	@ (80030e4 <xTaskPriorityDisinherit+0x12c>)
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4403      	add	r3, r0
 80030c8:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80030ca:	2301      	movs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80030ce:	697b      	ldr	r3, [r7, #20]
    }
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	24000624 	.word	0x24000624
 80030dc:	08004cdc 	.word	0x08004cdc
 80030e0:	2400090c 	.word	0x2400090c
 80030e4:	24000628 	.word	0x24000628

080030e8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80030f2:	4b21      	ldr	r3, [pc, #132]	@ (8003178 <prvAddCurrentTaskToDelayedList+0x90>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030f8:	4b20      	ldr	r3, [pc, #128]	@ (800317c <prvAddCurrentTaskToDelayedList+0x94>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3304      	adds	r3, #4
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fd24 	bl	8001b4c <uxListRemove>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10b      	bne.n	8003122 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800310a:	4b1c      	ldr	r3, [pc, #112]	@ (800317c <prvAddCurrentTaskToDelayedList+0x94>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003110:	2201      	movs	r2, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <prvAddCurrentTaskToDelayedList+0x98>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4013      	ands	r3, r2
 800311e:	4a18      	ldr	r2, [pc, #96]	@ (8003180 <prvAddCurrentTaskToDelayedList+0x98>)
 8003120:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800312a:	4b14      	ldr	r3, [pc, #80]	@ (800317c <prvAddCurrentTaskToDelayedList+0x94>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	429a      	cmp	r2, r3
 8003138:	d209      	bcs.n	800314e <prvAddCurrentTaskToDelayedList+0x66>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800313a:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <prvAddCurrentTaskToDelayedList+0x9c>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <prvAddCurrentTaskToDelayedList+0x94>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f7fe fcc7 	bl	8001ada <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800314c:	e010      	b.n	8003170 <prvAddCurrentTaskToDelayedList+0x88>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800314e:	4b0e      	ldr	r3, [pc, #56]	@ (8003188 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b0a      	ldr	r3, [pc, #40]	@ (800317c <prvAddCurrentTaskToDelayedList+0x94>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3304      	adds	r3, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f7fe fcbd 	bl	8001ada <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8003160:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	429a      	cmp	r2, r3
 8003168:	d202      	bcs.n	8003170 <prvAddCurrentTaskToDelayedList+0x88>
                xNextTaskUnblockTime = xTimeToWake;
 800316a:	4a08      	ldr	r2, [pc, #32]	@ (800318c <prvAddCurrentTaskToDelayedList+0xa4>)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	24000908 	.word	0x24000908
 800317c:	24000624 	.word	0x24000624
 8003180:	2400090c 	.word	0x2400090c
 8003184:	240008d4 	.word	0x240008d4
 8003188:	240008d0 	.word	0x240008d0
 800318c:	24000924 	.word	0x24000924

08003190 <QEvt_verify_>:

// private:

#ifndef Q_UNSAFE
//! @private @memberof QEvt
static inline bool QEvt_verify_(QEvt const * const me) {
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	78db      	ldrb	r3, [r3, #3]
 800319c:	73fb      	strb	r3, [r7, #15]
    return (rc <= 2U*QF_MAX_ACTIVE)
           && (((me->evtTag_ ^ rc) & 0x0FU) == 0x0FU);
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d80a      	bhi.n	80031ba <QEvt_verify_+0x2a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	789a      	ldrb	r2, [r3, #2]
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	4053      	eors	r3, r2
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d101      	bne.n	80031ba <QEvt_verify_+0x2a>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <QEvt_verify_+0x2c>
 80031ba:	2300      	movs	r3, #0
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <QEvt_getPoolNum_>:
#endif // ndef Q_UNSAFE

//! @private @memberof QEvt
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)(me->evtTag_ >> 4U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	789b      	ldrb	r3, [r3, #2]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	b2db      	uxtb	r3, r3
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <QEvt_refCtr_inc_>:
// Bitmasks are for the QTimeEvt::flags attribute
#define QTE_FLAG_IS_LINKED      (1U << 7U)
#define QTE_FLAG_WAS_DISARMED   (1U << 6U)

//! @private @memberof QEvt
static inline void QEvt_refCtr_inc_(QEvt const *me) {
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_ + 1U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	78db      	ldrb	r3, [r3, #3]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	70da      	strb	r2, [r3, #3]
#ifndef Q_UNSAFE
    ((QEvt *)me)->evtTag_ = (me->evtTag_ & 0xF0U) | ((~rc) & 0x0FU);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	789b      	ldrb	r3, [r3, #2]
 8003206:	f023 030f 	bic.w	r3, r3, #15
 800320a:	b2da      	uxtb	r2, r3
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	43db      	mvns	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4313      	orrs	r3, r2
 800321a:	b2da      	uxtb	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	709a      	strb	r2, [r3, #2]
#endif // ndef Q_UNSAFE
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <QEvt_refCtr_dec_>:

//! @private @memberof QEvt
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_ - 1U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	78db      	ldrb	r3, [r3, #3]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	70da      	strb	r2, [r3, #3]
#ifndef Q_UNSAFE
    ((QEvt *)me)->evtTag_ = (me->evtTag_ & 0xF0U) | ((~rc) & 0x0FU);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	789b      	ldrb	r3, [r3, #2]
 8003248:	f023 030f 	bic.w	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	43db      	mvns	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	b2db      	uxtb	r3, r3
 800325a:	4313      	orrs	r3, r2
 800325c:	b2da      	uxtb	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	709a      	strb	r2, [r3, #2]
#endif // ndef Q_UNSAFE
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <QF_init>:
//
#define FREERTOS_QUEUE_GET_FREE(me_) \
    ((me_)->osObject.uxDummy4[1] - (me_)->osObject.uxDummy4[0])

//============================================================================
void QF_init(void) {
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
    QF_bzero_(&QF_priv_,             sizeof(QF_priv_));
 8003274:	2158      	movs	r1, #88	@ 0x58
 8003276:	4805      	ldr	r0, [pc, #20]	@ (800328c <QF_init+0x1c>)
 8003278:	f000 ffee 	bl	8004258 <QF_bzero_>
    QF_bzero_(&QActive_registry_[0], sizeof(QActive_registry_));
 800327c:	2184      	movs	r1, #132	@ 0x84
 800327e:	4804      	ldr	r0, [pc, #16]	@ (8003290 <QF_init+0x20>)
 8003280:	f000 ffea 	bl	8004258 <QF_bzero_>
    QTimeEvt_init(); // initialize QTimeEvts
 8003284:	f001 fbf4 	bl	8004a70 <QTimeEvt_init>
}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}
 800328c:	240009b4 	.word	0x240009b4
 8003290:	24000930 	.word	0x24000930

08003294 <QF_run>:
//............................................................................
int_t QF_run(void) {
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
    QF_onStartup(); // the startup callback (configure/enable interrupts)
 8003298:	f7fd faa4 	bl	80007e4 <QF_onStartup>
    QS_BEGIN_PRE(QS_QF_RUN, 0U)
    QS_END_PRE()
    QF_CRIT_EXIT();
#endif

    vTaskStartScheduler(); // start the FreeRTOS scheduler
 800329c:	f7ff f942 	bl	8002524 <vTaskStartScheduler>

    QF_CRIT_ENTRY();
 80032a0:	f7fe fa32 	bl	8001708 <vPortEnterCritical>
    Q_ERROR_INCRIT(110); // the FreeRTOS scheduler should never return
 80032a4:	216e      	movs	r1, #110	@ 0x6e
 80032a6:	4801      	ldr	r0, [pc, #4]	@ (80032ac <QF_run+0x18>)
 80032a8:	f7fd f902 	bl	80004b0 <Q_onError>
 80032ac:	08004d90 	.word	0x08004d90

080032b0 <task_function>:
void QF_stop(void) {
    QF_onCleanup(); // cleanup callback
}

//............................................................................
static void task_function(void *pvParameters) { // FreeRTOS task signature
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
    QActive *act = (QActive *)pvParameters;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60fb      	str	r3, [r7, #12]
    while (act->eQueue != (QueueHandle_t)0)
#else
    for (;;) // for-ever
#endif
    {
        QEvt const *e = QActive_get_(act); // wait for event
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f88d 	bl	80033dc <QActive_get_>
 80032c2:	60b8      	str	r0, [r7, #8]
        QASM_DISPATCH(&act->super, e, act->prio); // dispatch to the SM
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4798      	blx	r3
        QF_gc(e); // check if the event is garbage, and collect it if so
 80032d2:	68b8      	ldr	r0, [r7, #8]
 80032d4:	f001 f86e 	bl	80043b4 <QF_gc>
    {
 80032d8:	bf00      	nop
 80032da:	e7ef      	b.n	80032bc <task_function+0xc>

080032dc <QActive_start>:
    QEvtPtr * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08c      	sub	sp, #48	@ 0x30
 80032e0:	af04      	add	r7, sp, #16
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	460b      	mov	r3, r1
 80032ea:	817b      	strh	r3, [r7, #10]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80032ec:	f7fe fa0c 	bl	8001708 <vPortEnterCritical>
    // precondition:
    // - queue storage must be provided
    // - queue size must be provided
    // - stack storage must be provided
    // - stack size must be provided
    Q_REQUIRE_INCRIT(100,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <QActive_start+0x2c>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <QActive_start+0x2c>
 80032fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <QActive_start+0x2c>
 8003302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d103      	bne.n	8003310 <QActive_start+0x34>
 8003308:	2164      	movs	r1, #100	@ 0x64
 800330a:	4831      	ldr	r0, [pc, #196]	@ (80033d0 <QActive_start+0xf4>)
 800330c:	f7fd f8d0 	bl	80004b0 <Q_onError>
        (qSto != (QEvtPtr *)0) && (qLen > 0U)
        && (stkSto != (void *)0) && (stkSize > 0U));
    QF_CRIT_EXIT();
 8003310:	f7fe fa26 	bl	8001760 <vPortExitCritical>

    // create FreeRTOS message queue
    me->eQueue = xQueueCreateStatic(
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	335c      	adds	r3, #92	@ 0x5c
 8003318:	2200      	movs	r2, #0
 800331a:	9200      	str	r2, [sp, #0]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	2104      	movs	r1, #4
 8003320:	6838      	ldr	r0, [r7, #0]
 8003322:	f7fe fcc3 	bl	8001cac <xQueueGenericCreateStatic>
 8003326:	4602      	mov	r2, r0
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        (UBaseType_t)qLen,     // length of the queue
        (UBaseType_t)sizeof(QEvtPtr), // item size
        (uint8_t *)qSto,       // storage buffer
        &me->osObject);        // static queue buffer
    QF_CRIT_ENTRY();
 800332e:	f7fe f9eb 	bl	8001708 <vPortEnterCritical>
    Q_ASSERT_INCRIT(110, me->eQueue != (QueueHandle_t)0);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <QActive_start+0x68>
 800333c:	216e      	movs	r1, #110	@ 0x6e
 800333e:	4824      	ldr	r0, [pc, #144]	@ (80033d0 <QActive_start+0xf4>)
 8003340:	f7fd f8b6 	bl	80004b0 <Q_onError>
    QF_CRIT_EXIT();
 8003344:	f7fe fa0c 	bl	8001760 <vPortExitCritical>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); // QF-priority of the AO
 8003348:	897b      	ldrh	r3, [r7, #10]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	731a      	strb	r2, [r3, #12]
    me->pthre = 0U; // preemption-threshold (not used for AO registration)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	735a      	strb	r2, [r3, #13]
    QActive_register_(me); // make QF aware of this AO
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f001 f9f6 	bl	8004748 <QActive_register_>

    // top-most initial tran. (virtual call)
    (*me->super.vptr->init)(&me->super, par, me->prio);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	7b12      	ldrb	r2, [r2, #12]
 8003368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800336a:	4798      	blx	r3
    QS_FLUSH(); // flush the trace buffer to the host

    // task name provided by the user in QActive_setAttr() or default name
    char const *taskName = (me->thread.pxDummy1 != (void *)0)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	691b      	ldr	r3, [r3, #16]
                             ? (char const *)me->thread.pxDummy1
                             : (char const *)"AO";
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <QActive_start+0x9e>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	e000      	b.n	800337c <QActive_start+0xa0>
 800337a:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <QActive_start+0xf8>)
    char const *taskName = (me->thread.pxDummy1 != (void *)0)
 800337c:	61bb      	str	r3, [r7, #24]
    //    it is consistent with the AO's priority. An example of
    //    inconsistent setting would be assigning FreeRTOS priorities that
    //    would result in a different relative priritization of AO's threads
    //    than indicated by the AO priorities assigned.
    //
    UBaseType_t freertos_prio = (prioSpec >> 8U);
 800337e:	897b      	ldrh	r3, [r7, #10]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	b29b      	uxth	r3, r3
 8003384:	61fb      	str	r3, [r7, #28]
    if (freertos_prio == 0U) {
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <QActive_start+0xb6>
        freertos_prio = FREERTOS_TASK_PRIO(me->prio);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	7b1b      	ldrb	r3, [r3, #12]
 8003390:	61fb      	str	r3, [r7, #28]

    // statically create the FreeRTOS task for the AO
    TaskHandle_t task = xTaskCreateStatic(
        &task_function, // the task function
        taskName ,      // the name of the task
        stkSize/sizeof(portSTACK_TYPE), // stack length
 8003392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003394:	089a      	lsrs	r2, r3, #2
    TaskHandle_t task = xTaskCreateStatic(
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3310      	adds	r3, #16
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	69b9      	ldr	r1, [r7, #24]
 80033a8:	480b      	ldr	r0, [pc, #44]	@ (80033d8 <QActive_start+0xfc>)
 80033aa:	f7fe ff53 	bl	8002254 <xTaskCreateStatic>
 80033ae:	6178      	str	r0, [r7, #20]
        (void *)me,     // the 'pvParameters' parameter
        freertos_prio,  // FreeRTOS priority
        (StackType_t *)stkSto,        // stack storage
        &me->thread);   // task buffer

    QF_CRIT_ENTRY();
 80033b0:	f7fe f9aa 	bl	8001708 <vPortEnterCritical>
    Q_ASSERT_INCRIT(120, task != (TaskHandle_t)0);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <QActive_start+0xe6>
 80033ba:	2178      	movs	r1, #120	@ 0x78
 80033bc:	4804      	ldr	r0, [pc, #16]	@ (80033d0 <QActive_start+0xf4>)
 80033be:	f7fd f877 	bl	80004b0 <Q_onError>
    QF_CRIT_EXIT();
 80033c2:	f7fe f9cd 	bl	8001760 <vPortExitCritical>

#ifdef Q_UNSAFE
    Q_UNUSED_PAR(task);
#endif
}
 80033c6:	bf00      	nop
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	08004d90 	.word	0x08004d90
 80033d4:	08004d58 	.word	0x08004d58
 80033d8:	080032b1 	.word	0x080032b1

080033dc <QActive_get_>:
#ifdef Q_UNSAFE
    Q_UNUSED_PAR(err);
#endif
}
//............................................................................
QEvt const *QActive_get_(QActive * const me) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
    QEvtPtr e;
    xQueueReceive(me->eQueue, (void *)&e, portMAX_DELAY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033ea:	f107 010c 	add.w	r1, r7, #12
 80033ee:	f04f 32ff 	mov.w	r2, #4294967295
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fd66 	bl	8001ec4 <xQueueReceive>
        QS_2U8_PRE(QEvt_getPoolNum_(e), e->refCtr_);
        QS_EQC_PRE((QEQueueCtr)FREERTOS_QUEUE_GET_FREE(me)); // # free
    QS_END_PRE()
    QS_CRIT_EXIT();

    return e;
 80033f8:	68fb      	ldr	r3, [r7, #12]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <QActive_postFromISR_>:
// The "FromISR" QP APIs for the FreeRTOS port...
bool QActive_postFromISR_(QActive * const me, QEvt const * const e,
                          uint_fast16_t const margin,
                          BaseType_t * const pxHigherPriorityTaskWoken,
                          void const * const sender)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b090      	sub	sp, #64	@ 0x40
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003412:	f3ef 8211 	mrs	r2, BASEPRI
 8003416:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800341a:	b672      	cpsid	i
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	b662      	cpsie	i
 800342a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800342c:	62bb      	str	r3, [r7, #40]	@ 0x28
        return ulOriginalBASEPRI;
 800342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003430:	63bb      	str	r3, [r7, #56]	@ 0x38

    Q_REQUIRE_INCRIT(500, e != (QEvt *)0);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <QActive_postFromISR_+0x3e>
 8003438:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800343c:	4841      	ldr	r0, [pc, #260]	@ (8003544 <QActive_postFromISR_+0x140>)
 800343e:	f7fd f837 	bl	80004b0 <Q_onError>
#ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(501, QEvt_verify_(e));
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fea3 	bl	8003190 <QEvt_verify_>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <QActive_postFromISR_+0x56>
 8003450:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8003454:	483b      	ldr	r0, [pc, #236]	@ (8003544 <QActive_postFromISR_+0x140>)
 8003456:	f7fd f82b 	bl	80004b0 <Q_onError>
#endif // ndef Q_UNSAFE

    // find the number of free slots available in the queue
    uint_fast16_t const nFree = (uint_fast16_t)FREERTOS_QUEUE_GET_FREE(me);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	637b      	str	r3, [r7, #52]	@ 0x34

    bool status;
    if (margin == QF_NO_MARGIN) {
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003470:	4293      	cmp	r3, r2
 8003472:	d10e      	bne.n	8003492 <QActive_postFromISR_+0x8e>
        if (nFree > 0U) {
 8003474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <QActive_postFromISR_+0x7e>
            status = true; // can post
 800347a:	2301      	movs	r3, #1
 800347c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003480:	e012      	b.n	80034a8 <QActive_postFromISR_+0xa4>
        }
        else {
            status = false; // cannot post
 8003482:	2300      	movs	r3, #0
 8003484:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            Q_ERROR_INCRIT(510); // must be able to post the event
 8003488:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 800348c:	482d      	ldr	r0, [pc, #180]	@ (8003544 <QActive_postFromISR_+0x140>)
 800348e:	f7fd f80f 	bl	80004b0 <Q_onError>
        }
    }
    else if (nFree > margin) {
 8003492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d903      	bls.n	80034a2 <QActive_postFromISR_+0x9e>
        status = true; // can post
 800349a:	2301      	movs	r3, #1
 800349c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80034a0:	e002      	b.n	80034a8 <QActive_postFromISR_+0xa4>
    }
    else {
        status = false; // cannot post
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }

    if (status) { // can post the event?
 80034a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d038      	beq.n	8003522 <QActive_postFromISR_+0x11e>
            QS_2U8_PRE(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
            QS_EQC_PRE(nFree);  // # free entries available
            QS_EQC_PRE(0U);     // min # free entries (unknown)
        QS_END_PRE()

        if (QEvt_getPoolNum_(e) != 0U) { // is it a pool event?
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fe8b 	bl	80031ce <QEvt_getPoolNum_>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <QActive_postFromISR_+0xc2>
            QEvt_refCtr_inc_(e); // increment the reference counter
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fe92 	bl	80031ea <QEvt_refCtr_inc_>
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	61fb      	str	r3, [r7, #28]
        __asm volatile
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f383 8811 	msr	BASEPRI, r3
    }
 80034d0:	bf00      	nop
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

        BaseType_t err = xQueueSendToBackFromISR(me->eQueue,
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80034d8:	f107 0108 	add.w	r1, r7, #8
 80034dc:	2300      	movs	r3, #0
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	f7fe fc52 	bl	8001d88 <xQueueGenericSendFromISR>
 80034e4:	6338      	str	r0, [r7, #48]	@ 0x30
        __asm volatile
 80034e6:	f3ef 8211 	mrs	r2, BASEPRI
 80034ea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80034ee:	b672      	cpsid	i
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	b662      	cpsie	i
 80034fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8003500:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                              (void const *)&e,
                              pxHigherPriorityTaskWoken);

        // posting to the FreeRTOS message queue must succeed
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003504:	63bb      	str	r3, [r7, #56]	@ 0x38
        Q_ASSERT_INCRIT(520, err == pdPASS);
 8003506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003508:	2b01      	cmp	r3, #1
 800350a:	d004      	beq.n	8003516 <QActive_postFromISR_+0x112>
 800350c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8003510:	480c      	ldr	r0, [pc, #48]	@ (8003544 <QActive_postFromISR_+0x140>)
 8003512:	f7fc ffcd 	bl	80004b0 <Q_onError>
 8003516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003518:	61bb      	str	r3, [r7, #24]
        __asm volatile
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f383 8811 	msr	BASEPRI, r3
    }
 8003520:	e009      	b.n	8003536 <QActive_postFromISR_+0x132>
 8003522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003524:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f383 8811 	msr	BASEPRI, r3
    }
 800352c:	bf00      	nop
            QS_EQC_PRE(nFree);  // # free entries available
            QS_EQC_PRE(margin); // margin requested
        QS_END_PRE()
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

        QF_gcFromISR(e); // recycle the event to avoid a leak
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f9d3 	bl	80038dc <QF_gcFromISR>
    }

    return status;
 8003536:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800353a:	4618      	mov	r0, r3
 800353c:	3740      	adds	r7, #64	@ 0x40
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	08004d90 	.word	0x08004d90

08003548 <QTimeEvt_tickFromISR_>:
}
//............................................................................
void QTimeEvt_tickFromISR_(uint_fast8_t const tickRate,
                          BaseType_t * const pxHigherPriorityTaskWoken,
                          void const * const sender)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b094      	sub	sp, #80	@ 0x50
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
        __asm volatile
 8003554:	f3ef 8211 	mrs	r2, BASEPRI
 8003558:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800355c:	b672      	cpsid	i
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	b662      	cpsie	i
 800356c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800356e:	62bb      	str	r3, [r7, #40]	@ 0x28
        return ulOriginalBASEPRI;
 8003570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
#ifndef Q_SPY
    Q_UNUSED_PAR(sender);
#endif

    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003572:	647b      	str	r3, [r7, #68]	@ 0x44

    Q_REQUIRE_INCRIT(700, tickRate < Q_DIM(QTimeEvt_timeEvtHead_));
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <QTimeEvt_tickFromISR_+0x3c>
 800357a:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 800357e:	4889      	ldr	r0, [pc, #548]	@ (80037a4 <QTimeEvt_tickFromISR_+0x25c>)
 8003580:	f7fc ff96 	bl	80004b0 <Q_onError>

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	015b      	lsls	r3, r3, #5
 8003588:	4a87      	ldr	r2, [pc, #540]	@ (80037a8 <QTimeEvt_tickFromISR_+0x260>)
 800358a:	4413      	add	r3, r2
 800358c:	643b      	str	r3, [r7, #64]	@ 0x40
        QS_TEC_PRE(prev->ctr);   // tick ctr
        QS_U8_PRE(tickRate);     // tick rate
    QS_END_PRE()

    // scan the linked-list of time events at this rate...
    uint_fast8_t lbound = 2U*QF_MAX_ACTIVE; // fixed upper loop bound
 800358e:	2340      	movs	r3, #64	@ 0x40
 8003590:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (; lbound > 0U; --lbound) {
 8003592:	e0ee      	b.n	8003772 <QTimeEvt_tickFromISR_+0x22a>
        Q_ASSERT_INCRIT(710, prev != (QTimeEvt *)0); // sanity check
 8003594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d104      	bne.n	80035a4 <QTimeEvt_tickFromISR_+0x5c>
 800359a:	f240 21c6 	movw	r1, #710	@ 0x2c6
 800359e:	4881      	ldr	r0, [pc, #516]	@ (80037a4 <QTimeEvt_tickFromISR_+0x25c>)
 80035a0:	f7fc ff86 	bl	80004b0 <Q_onError>

        QTimeEvt *te = prev->next; // advance down the time evt. list
 80035a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	63bb      	str	r3, [r7, #56]	@ 0x38
#ifndef Q_UNSAFE
        Q_INVARIANT_INCRIT(711,
 80035aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	43da      	mvns	r2, r3
 80035b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d004      	beq.n	80035c0 <QTimeEvt_tickFromISR_+0x78>
 80035b6:	f240 21c7 	movw	r1, #711	@ 0x2c7
 80035ba:	487a      	ldr	r0, [pc, #488]	@ (80037a4 <QTimeEvt_tickFromISR_+0x25c>)
 80035bc:	f7fc ff78 	bl	80004b0 <Q_onError>
                           Q_PTR2UINT_CAST_(te) == (uintptr_t)~prev->next_dis);
#endif // ndef Q_UNSAFE

        if (te == (QTimeEvt *)0) { // end of the list?
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d138      	bne.n	8003638 <QTimeEvt_tickFromISR_+0xf0>

            // any new time events armed since the last QTimeEvt_tick_()?
            if (QTimeEvt_timeEvtHead_[tickRate].act != (void *)0) {
 80035c6:	4a78      	ldr	r2, [pc, #480]	@ (80037a8 <QTimeEvt_tickFromISR_+0x260>)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	015b      	lsls	r3, r3, #5
 80035cc:	4413      	add	r3, r2
 80035ce:	330c      	adds	r3, #12
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80d2 	beq.w	800377c <QTimeEvt_tickFromISR_+0x234>
#ifndef Q_UNSAFE
                Q_INVARIANT_INCRIT(712,
 80035d8:	4a73      	ldr	r2, [pc, #460]	@ (80037a8 <QTimeEvt_tickFromISR_+0x260>)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	015b      	lsls	r3, r3, #5
 80035de:	4413      	add	r3, r2
 80035e0:	330c      	adds	r3, #12
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	4a71      	ldr	r2, [pc, #452]	@ (80037ac <QTimeEvt_tickFromISR_+0x264>)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	4299      	cmp	r1, r3
 80035f2:	d004      	beq.n	80035fe <QTimeEvt_tickFromISR_+0xb6>
 80035f4:	f44f 7132 	mov.w	r1, #712	@ 0x2c8
 80035f8:	486a      	ldr	r0, [pc, #424]	@ (80037a4 <QTimeEvt_tickFromISR_+0x25c>)
 80035fa:	f7fc ff59 	bl	80004b0 <Q_onError>
                    Q_PTR2UINT_CAST_(QTimeEvt_timeEvtHead_[tickRate].act)
                    == (uintptr_t)~QTimeEvt_timeEvtHead_dis_[tickRate]);
#endif // ndef Q_UNSAFE
                prev->next = QTimeEvt_timeEvtHead_[tickRate].act;
 80035fe:	4a6a      	ldr	r2, [pc, #424]	@ (80037a8 <QTimeEvt_tickFromISR_+0x260>)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	015b      	lsls	r3, r3, #5
 8003604:	4413      	add	r3, r2
 8003606:	330c      	adds	r3, #12
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360c:	605a      	str	r2, [r3, #4]
                QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 800360e:	4a66      	ldr	r2, [pc, #408]	@ (80037a8 <QTimeEvt_tickFromISR_+0x260>)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	015b      	lsls	r3, r3, #5
 8003614:	4413      	add	r3, r2
 8003616:	330c      	adds	r3, #12
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
#ifndef Q_UNSAFE
                prev->next_dis = (uintptr_t)~Q_PTR2UINT_CAST_(prev->next);
 800361c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	43da      	mvns	r2, r3
 8003622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003624:	609a      	str	r2, [r3, #8]
                QTimeEvt_timeEvtHead_dis_[tickRate] =
 8003626:	4a61      	ldr	r2, [pc, #388]	@ (80037ac <QTimeEvt_tickFromISR_+0x264>)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f04f 31ff 	mov.w	r1, #4294967295
 800362e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    (uintptr_t)~Q_PTR2UINT_CAST_((void *)0);
#endif // ndef Q_UNSAFE

                te = prev->next; // switch to the new list
 8003632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	63bb      	str	r3, [r7, #56]	@ 0x38
                break; // terminate the for-loop
            }
        }

        // the time event 'te' must be valid
        Q_ASSERT_INCRIT(720, te != (QTimeEvt *)0);
 8003638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363a:	2b00      	cmp	r3, #0
 800363c:	d104      	bne.n	8003648 <QTimeEvt_tickFromISR_+0x100>
 800363e:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8003642:	4858      	ldr	r0, [pc, #352]	@ (80037a4 <QTimeEvt_tickFromISR_+0x25c>)
 8003644:	f7fc ff34 	bl	80004b0 <Q_onError>

        QTimeEvtCtr ctr = te->ctr;
 8003648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	637b      	str	r3, [r7, #52]	@ 0x34
#ifndef Q_UNSAFE
        Q_INVARIANT_INCRIT(721, QEvt_verify_(&te->super));
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fd9d 	bl	8003190 <QEvt_verify_>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <QTimeEvt_tickFromISR_+0x11e>
 800365c:	f240 21d1 	movw	r1, #721	@ 0x2d1
 8003660:	4850      	ldr	r0, [pc, #320]	@ (80037a4 <QTimeEvt_tickFromISR_+0x25c>)
 8003662:	f7fc ff25 	bl	80004b0 <Q_onError>
        Q_INVARIANT_INCRIT(722, ctr == (QTimeEvtCtr)~te->ctr_dis);
 8003666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	43db      	mvns	r3, r3
 800366c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800366e:	429a      	cmp	r2, r3
 8003670:	d004      	beq.n	800367c <QTimeEvt_tickFromISR_+0x134>
 8003672:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8003676:	484b      	ldr	r0, [pc, #300]	@ (80037a4 <QTimeEvt_tickFromISR_+0x25c>)
 8003678:	f7fc ff1a 	bl	80004b0 <Q_onError>
#endif // ndef Q_UNSAFE

        if (ctr == 0U) { // time event scheduled for removal?
 800367c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367e:	2b00      	cmp	r3, #0
 8003680:	d115      	bne.n	80036ae <QTimeEvt_tickFromISR_+0x166>
            prev->next = te->next;
 8003682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003688:	605a      	str	r2, [r3, #4]
#ifndef Q_UNSAFE
            prev->next_dis = (uintptr_t)~Q_PTR2UINT_CAST_(te->next);
 800368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	43da      	mvns	r2, r3
 8003690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003692:	609a      	str	r2, [r3, #8]
#endif // ndef Q_UNSAFE

            // mark time event 'te' as NOT linked
            te->flags &= (uint8_t)(~QTE_FLAG_IS_LINKED & 0xFFU);
 8003694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003696:	7f5b      	ldrb	r3, [r3, #29]
 8003698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800369c:	b2da      	uxtb	r2, r3
 800369e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a0:	775a      	strb	r2, [r3, #29]
 80036a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
        __asm volatile
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	f383 8811 	msr	BASEPRI, r3
    }
 80036ac:	e04e      	b.n	800374c <QTimeEvt_tickFromISR_+0x204>
            // do NOT advance the prev pointer

            // exit crit. section to reduce latency
            portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
        }
        else if (ctr == 1U) { // is time event about to expire?
 80036ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d139      	bne.n	8003728 <QTimeEvt_tickFromISR_+0x1e0>
            QActive * const act = (QActive *)te->act;
 80036b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	633b      	str	r3, [r7, #48]	@ 0x30
            if (te->interval != 0U) { // periodic time evt?
 80036ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <QTimeEvt_tickFromISR_+0x192>
                te->ctr = te->interval; // rearm the time event
 80036c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c8:	611a      	str	r2, [r3, #16]
#ifndef Q_UNSAFE
                te->ctr_dis = (QTimeEvtCtr)~te->interval;
 80036ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	43da      	mvns	r2, r3
 80036d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d2:	615a      	str	r2, [r3, #20]
#endif // ndef Q_UNSAFE
                prev = te; // advance to this time event
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80036d8:	e016      	b.n	8003708 <QTimeEvt_tickFromISR_+0x1c0>
            }
            else { // one-shot time event: automatically disarm
                te->ctr = 0U;
 80036da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
                prev->next = te->next;
 80036e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e6:	605a      	str	r2, [r3, #4]
#ifndef Q_UNSAFE
                te->ctr_dis = (QTimeEvtCtr)~0U;
 80036e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ea:	f04f 32ff 	mov.w	r2, #4294967295
 80036ee:	615a      	str	r2, [r3, #20]
                prev->next_dis = (uintptr_t)~Q_PTR2UINT_CAST_(te->next);
 80036f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	43da      	mvns	r2, r3
 80036f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f8:	609a      	str	r2, [r3, #8]
#endif // ndef Q_UNSAFE

                // mark time event 'e' as NOT linked
                te->flags &= (uint8_t)(~QTE_FLAG_IS_LINKED & 0xFFU);
 80036fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fc:	7f5b      	ldrb	r3, [r3, #29]
 80036fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003702:	b2da      	uxtb	r2, r3
 8003704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003706:	775a      	strb	r2, [r3, #29]
 8003708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370a:	623b      	str	r3, [r7, #32]
        __asm volatile
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f383 8811 	msr	BASEPRI, r3
    }
 8003712:	bf00      	nop
            QS_END_PRE()

            portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

            // QACTIVE_POST_FROM_ISR() asserts if the queue overflows
            QACTIVE_POST_FROM_ISR(act, &te->super,
 8003714:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003716:	2300      	movs	r3, #0
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003722:	f7ff fe6f 	bl	8003404 <QActive_postFromISR_>
 8003726:	e011      	b.n	800374c <QTimeEvt_tickFromISR_+0x204>
                                  pxHigherPriorityTaskWoken,
                                  sender);
        }
        else { // time event keeps timing out
            --ctr; // decrement the tick counter
 8003728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372a:	3b01      	subs	r3, #1
 800372c:	637b      	str	r3, [r7, #52]	@ 0x34
            te->ctr = ctr; // update the original
 800372e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003730:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003732:	611a      	str	r2, [r3, #16]
#ifndef Q_UNSAFE
            te->ctr_dis = (QTimeEvtCtr)~ctr;
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003736:	43da      	mvns	r2, r3
 8003738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373a:	615a      	str	r2, [r3, #20]
#endif // ndef Q_UNSAFE

            prev = te; // advance to this time event
 800373c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003742:	61fb      	str	r3, [r7, #28]
        __asm volatile
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f383 8811 	msr	BASEPRI, r3
    }
 800374a:	bf00      	nop
        __asm volatile
 800374c:	f3ef 8211 	mrs	r2, BASEPRI
 8003750:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003754:	b672      	cpsid	i
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	b662      	cpsie	i
 8003764:	61ba      	str	r2, [r7, #24]
 8003766:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8003768:	69bb      	ldr	r3, [r7, #24]

            portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
        }
        // re-enter crit. section to continue the loop
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800376a:	647b      	str	r3, [r7, #68]	@ 0x44
    for (; lbound > 0U; --lbound) {
 800376c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800376e:	3b01      	subs	r3, #1
 8003770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003774:	2b00      	cmp	r3, #0
 8003776:	f47f af0d 	bne.w	8003594 <QTimeEvt_tickFromISR_+0x4c>
 800377a:	e000      	b.n	800377e <QTimeEvt_tickFromISR_+0x236>
                break; // terminate the for-loop
 800377c:	bf00      	nop
    }

    Q_ENSURE_INCRIT(890, lbound > 0U);
 800377e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <QTimeEvt_tickFromISR_+0x246>
 8003784:	f240 317a 	movw	r1, #890	@ 0x37a
 8003788:	4806      	ldr	r0, [pc, #24]	@ (80037a4 <QTimeEvt_tickFromISR_+0x25c>)
 800378a:	f7fc fe91 	bl	80004b0 <Q_onError>
 800378e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003790:	613b      	str	r3, [r7, #16]
        __asm volatile
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f383 8811 	msr	BASEPRI, r3
    }
 8003798:	bf00      	nop

    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
}
 800379a:	bf00      	nop
 800379c:	3748      	adds	r7, #72	@ 0x48
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	08004d90 	.word	0x08004d90
 80037a8:	24000a14 	.word	0x24000a14
 80037ac:	24000a34 	.word	0x24000a34

080037b0 <QF_newXFromISR_>:
//............................................................................
QEvt *QF_newXFromISR_(uint_fast16_t const evtSize,
                      uint_fast16_t const margin, enum_t const sig)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08e      	sub	sp, #56	@ 0x38
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
    // find the pool index that fits the requested event size...
    uint_fast8_t poolNum = 0U; // zero-based poolNum initially
 80037bc:	2300      	movs	r3, #0
 80037be:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 80037c0:	e00f      	b.n	80037e2 <QF_newXFromISR_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum])) {
 80037c2:	4944      	ldr	r1, [pc, #272]	@ (80038d4 <QF_newXFromISR_+0x124>)
 80037c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	330c      	adds	r3, #12
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4293      	cmp	r3, r2
 80037da:	d908      	bls.n	80037ee <QF_newXFromISR_+0x3e>
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 80037dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037de:	3301      	adds	r3, #1
 80037e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037e2:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <QF_newXFromISR_+0x124>)
 80037e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3ea      	bcc.n	80037c2 <QF_newXFromISR_+0x12>
 80037ec:	e000      	b.n	80037f0 <QF_newXFromISR_+0x40>
            break;
 80037ee:	bf00      	nop
        __asm volatile
 80037f0:	f3ef 8211 	mrs	r2, BASEPRI
 80037f4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80037f8:	b672      	cpsid	i
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	b662      	cpsie	i
 8003808:	62ba      	str	r2, [r7, #40]	@ 0x28
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
        return ulOriginalBASEPRI;
 800380c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        }
    }

    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800380e:	633b      	str	r3, [r7, #48]	@ 0x30

    // precondition:
    // - cannot run out of registered pools
    Q_REQUIRE_INCRIT(800, poolNum < QF_priv_.maxPool_);
 8003810:	4b30      	ldr	r3, [pc, #192]	@ (80038d4 <QF_newXFromISR_+0x124>)
 8003812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003814:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003816:	429a      	cmp	r2, r3
 8003818:	d304      	bcc.n	8003824 <QF_newXFromISR_+0x74>
 800381a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800381e:	482e      	ldr	r0, [pc, #184]	@ (80038d8 <QF_newXFromISR_+0x128>)
 8003820:	f7fc fe46 	bl	80004b0 <Q_onError>

    ++poolNum; // convert to 1-based poolNum
 8003824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003826:	3301      	adds	r3, #1
 8003828:	637b      	str	r3, [r7, #52]	@ 0x34
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	623b      	str	r3, [r7, #32]
        __asm volatile
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	f383 8811 	msr	BASEPRI, r3
    }
 8003834:	bf00      	nop
#ifdef Q_SPY
    QEvt *e = QMPool_getFromISR(&QF_priv_.ePool_[poolNum - 1U],
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + poolNum);
#else
    QEvt *e = QMPool_getFromISR(&QF_priv_.ePool_[poolNum - 1U],
 8003836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003838:	1e5a      	subs	r2, r3, #1
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4a24      	ldr	r2, [pc, #144]	@ (80038d4 <QF_newXFromISR_+0x124>)
 8003844:	1898      	adds	r0, r3, r2
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800384c:	4293      	cmp	r3, r2
 800384e:	d001      	beq.n	8003854 <QF_newXFromISR_+0xa4>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	e000      	b.n	8003856 <QF_newXFromISR_+0xa6>
 8003854:	2300      	movs	r3, #0
 8003856:	2200      	movs	r2, #0
 8003858:	4619      	mov	r1, r3
 800385a:	f000 f8ab 	bl	80039b4 <QMPool_getFromISR>
 800385e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                      ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
#endif

    if (e != (QEvt *)0) { // was e allocated correctly?
 8003860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d010      	beq.n	8003888 <QF_newXFromISR_+0xd8>
        e->sig     = (QSignal)sig; // set the signal
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	b29a      	uxth	r2, r3
 800386a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386c:	801a      	strh	r2, [r3, #0]
        e->refCtr_ = 0U; // initialize the reference counter to 0
 800386e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003870:	2200      	movs	r2, #0
 8003872:	70da      	strb	r2, [r3, #3]
        e->evtTag_ = (uint8_t)((poolNum << 4U) | 0x0FU);
 8003874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003876:	b2db      	uxtb	r3, r3
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f043 030f 	orr.w	r3, r3, #15
 8003880:	b2da      	uxtb	r2, r3
 8003882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003884:	709a      	strb	r2, [r3, #2]
 8003886:	e01f      	b.n	80038c8 <QF_newXFromISR_+0x118>
        __asm volatile
 8003888:	f3ef 8211 	mrs	r2, BASEPRI
 800388c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003890:	b672      	cpsid	i
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	b662      	cpsie	i
 80038a0:	61fa      	str	r2, [r7, #28]
 80038a2:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80038a4:	69fb      	ldr	r3, [r7, #28]
        QS_END_PRE()
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
#endif // def Q_SPY
    }
    else { // event was not allocated
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30

        // This assertion means that the event allocation failed,
        // and this failure cannot be tolerated. The most frequent
        // reason is an event leak in the application.
        Q_ASSERT_INCRIT(820, margin != QF_NO_MARGIN);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d104      	bne.n	80038bc <QF_newXFromISR_+0x10c>
 80038b2:	f44f 714d 	mov.w	r1, #820	@ 0x334
 80038b6:	4808      	ldr	r0, [pc, #32]	@ (80038d8 <QF_newXFromISR_+0x128>)
 80038b8:	f7fc fdfa 	bl	80004b0 <Q_onError>
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	617b      	str	r3, [r7, #20]
        __asm volatile
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f383 8811 	msr	BASEPRI, r3
    }
 80038c6:	bf00      	nop
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    }

    // the returned event e is guaranteed to be valid (not NULL)
    // if we can't tolerate failed allocation
    return e;
 80038c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3738      	adds	r7, #56	@ 0x38
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	240009b4 	.word	0x240009b4
 80038d8:	08004d90 	.word	0x08004d90

080038dc <QF_gcFromISR>:
//............................................................................
void QF_gcFromISR(QEvt const * const e) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	@ 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
        __asm volatile
 80038e4:	f3ef 8211 	mrs	r2, BASEPRI
 80038e8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80038ec:	b672      	cpsid	i
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	b662      	cpsie	i
 80038fc:	61fa      	str	r2, [r7, #28]
 80038fe:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8003900:	69fb      	ldr	r3, [r7, #28]
    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24

    Q_REQUIRE_INCRIT(700, e != (QEvt *)0);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <QF_gcFromISR+0x38>
 800390a:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 800390e:	4827      	ldr	r0, [pc, #156]	@ (80039ac <QF_gcFromISR+0xd0>)
 8003910:	f7fc fdce 	bl	80004b0 <Q_onError>
#ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(701, QEvt_verify_(e));
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff fc3b 	bl	8003190 <QEvt_verify_>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <QF_gcFromISR+0x4e>
 8003920:	f240 21bd 	movw	r1, #701	@ 0x2bd
 8003924:	4821      	ldr	r0, [pc, #132]	@ (80039ac <QF_gcFromISR+0xd0>)
 8003926:	f7fc fdc3 	bl	80004b0 <Q_onError>
#endif

    uint_fast8_t const poolNum = QEvt_getPoolNum_(e);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fc4f 	bl	80031ce <QEvt_getPoolNum_>
 8003930:	6238      	str	r0, [r7, #32]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d02e      	beq.n	8003996 <QF_gcFromISR+0xba>

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	78db      	ldrb	r3, [r3, #3]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d908      	bls.n	8003954 <QF_gcFromISR+0x78>
                QS_TIME_PRE();       // timestamp
                QS_SIG_PRE(e->sig);  // the signal of the event
                QS_2U8_PRE(poolNum, e->refCtr_);
            QS_END_PRE()

            QEvt_refCtr_dec_(e); // decrement the ref counter
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fc72 	bl	800322c <QEvt_refCtr_dec_>
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f383 8811 	msr	BASEPRI, r3
    }
 8003952:	e026      	b.n	80039a2 <QF_gcFromISR+0xc6>
                QS_SIG_PRE(e->sig);  // the signal of the event
                QS_2U8_PRE(poolNum, e->refCtr_);
            QS_END_PRE()

            // pool number must be in range
            Q_ASSERT_INCRIT(710, (poolNum <= QF_priv_.maxPool_)
 8003954:	4b16      	ldr	r3, [pc, #88]	@ (80039b0 <QF_gcFromISR+0xd4>)
 8003956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	429a      	cmp	r2, r3
 800395c:	d802      	bhi.n	8003964 <QF_gcFromISR+0x88>
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d904      	bls.n	800396e <QF_gcFromISR+0x92>
 8003964:	f240 21c6 	movw	r1, #710	@ 0x2c6
 8003968:	4810      	ldr	r0, [pc, #64]	@ (80039ac <QF_gcFromISR+0xd0>)
 800396a:	f7fc fda1 	bl	80004b0 <Q_onError>
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	613b      	str	r3, [r7, #16]
        __asm volatile
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f383 8811 	msr	BASEPRI, r3
    }
 8003978:	bf00      	nop
#ifdef Q_SPY
            // cast 'const' away in (QEvt *)e is OK because it's a pool event
            QMPool_putFromISR(&QF_priv_.ePool_[poolNum - 1U], (QEvt *)e,
                              (uint_fast8_t)QS_EP_ID + QEvt_getPoolNum_(e));
#else
            QMPool_putFromISR(&QF_priv_.ePool_[poolNum - 1U], (QEvt *)e, 0U);
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <QF_gcFromISR+0xd4>)
 8003988:	4413      	add	r3, r2
 800398a:	2200      	movs	r2, #0
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f8ae 	bl	8003af0 <QMPool_putFromISR>
        }
    }
    else {
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    }
}
 8003994:	e005      	b.n	80039a2 <QF_gcFromISR+0xc6>
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	60fb      	str	r3, [r7, #12]
        __asm volatile
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f383 8811 	msr	BASEPRI, r3
    }
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	3728      	adds	r7, #40	@ 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	08004d90 	.word	0x08004d90
 80039b0:	240009b4 	.word	0x240009b4

080039b4 <QMPool_getFromISR>:
//............................................................................
void *QMPool_getFromISR(QMPool * const me, uint_fast16_t const margin,
                        uint_fast8_t const qsId)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08c      	sub	sp, #48	@ 0x30
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
        __asm volatile
 80039c0:	f3ef 8211 	mrs	r2, BASEPRI
 80039c4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80039c8:	b672      	cpsid	i
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	b662      	cpsie	i
 80039d8:	61fa      	str	r2, [r7, #28]
 80039da:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80039dc:	69fb      	ldr	r3, [r7, #28]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039de:	62bb      	str	r3, [r7, #40]	@ 0x28

    // get volatile into temporaries
    QFreeBlock *fb = me->free_head;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    QMPoolCtr nFree = me->nFree;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8a1b      	ldrh	r3, [r3, #16]
 80039ea:	84fb      	strh	r3, [r7, #38]	@ 0x26

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(801, Q_PTR2UINT_CAST_(fb)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	43da      	mvns	r2, r3
 80039f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d004      	beq.n	8003a02 <QMPool_getFromISR+0x4e>
 80039f8:	f240 3121 	movw	r1, #801	@ 0x321
 80039fc:	483b      	ldr	r0, [pc, #236]	@ (8003aec <QMPool_getFromISR+0x138>)
 80039fe:	f7fc fd57 	bl	80004b0 <Q_onError>
                            == (uintptr_t)~me->free_head_dis);
    Q_INVARIANT_INCRIT(802, nFree == (QMPoolCtr)~me->nFree_dis);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8b1b      	ldrh	r3, [r3, #24]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d004      	beq.n	8003a1a <QMPool_getFromISR+0x66>
 8003a10:	f240 3122 	movw	r1, #802	@ 0x322
 8003a14:	4835      	ldr	r0, [pc, #212]	@ (8003aec <QMPool_getFromISR+0x138>)
 8003a16:	f7fc fd4b 	bl	80004b0 <Q_onError>
    #endif // ndef Q_UNSAFE

    // have more free blocks than the requested margin?
    if (nFree > (QMPoolCtr)margin) {
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d955      	bls.n	8003ad0 <QMPool_getFromISR+0x11c>
        Q_ASSERT_INCRIT(810, fb != (QFreeBlock *)0);
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <QMPool_getFromISR+0x80>
 8003a2a:	f240 312a 	movw	r1, #810	@ 0x32a
 8003a2e:	482f      	ldr	r0, [pc, #188]	@ (8003aec <QMPool_getFromISR+0x138>)
 8003a30:	f7fc fd3e 	bl	80004b0 <Q_onError>

        QFreeBlock * const fb_next = fb->next; // fast temporary
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	623b      	str	r3, [r7, #32]

    #ifndef Q_UNSAFE
        // the free block must have integrity (duplicate inverse storage)
        Q_INVARIANT_INCRIT(811, Q_PTR2UINT_CAST_(fb_next)
 8003a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d004      	beq.n	8003a50 <QMPool_getFromISR+0x9c>
 8003a46:	f240 312b 	movw	r1, #811	@ 0x32b
 8003a4a:	4828      	ldr	r0, [pc, #160]	@ (8003aec <QMPool_getFromISR+0x138>)
 8003a4c:	f7fc fd30 	bl	80004b0 <Q_onError>
                                == (uintptr_t)~fb->next_dis);
    #endif // ndef Q_UNSAFE

        --nFree; // one less free block
 8003a50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003a52:	3b01      	subs	r3, #1
 8003a54:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (nFree == 0U) { // is the pool becoming empty?
 8003a56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d112      	bne.n	8003a82 <QMPool_getFromISR+0xce>
            // pool is becoming empty, so the next free block must be NULL
            Q_ASSERT_INCRIT(820, fb_next == (QFreeBlock *)0);
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <QMPool_getFromISR+0xb8>
 8003a62:	f44f 714d 	mov.w	r1, #820	@ 0x334
 8003a66:	4821      	ldr	r0, [pc, #132]	@ (8003aec <QMPool_getFromISR+0x138>)
 8003a68:	f7fc fd22 	bl	80004b0 <Q_onError>

            me->nFree = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	821a      	strh	r2, [r3, #16]
    #ifndef Q_UNSAFE
            me->nFree_dis = (QMPoolCtr)~0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a78:	831a      	strh	r2, [r3, #24]
            me->nMin = 0U; // remember that the pool got empty
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	825a      	strh	r2, [r3, #18]
 8003a80:	e01e      	b.n	8003ac0 <QMPool_getFromISR+0x10c>
    #endif // ndef Q_UNSAFE
        }
        else {
            me->nFree = nFree;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003a86:	821a      	strh	r2, [r3, #16]
    #ifndef Q_UNSAFE
            me->nFree_dis = (QMPoolCtr)~nFree;
 8003a88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	831a      	strh	r2, [r3, #24]

            // The pool is not empty, so the next free-block pointer
            // must be in range.
            Q_INVARIANT_INCRIT(830,
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a3a      	ldr	r2, [r7, #32]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d304      	bcc.n	8003aa6 <QMPool_getFromISR+0xf2>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d904      	bls.n	8003ab0 <QMPool_getFromISR+0xfc>
 8003aa6:	f240 313e 	movw	r1, #830	@ 0x33e
 8003aaa:	4810      	ldr	r0, [pc, #64]	@ (8003aec <QMPool_getFromISR+0x138>)
 8003aac:	f7fc fd00 	bl	80004b0 <Q_onError>
                (me->start <= fb_next) && (fb_next <= me->end));

            // is the # free blocks the new minimum so far?
            if (me->nMin > nFree) {
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8a5b      	ldrh	r3, [r3, #18]
 8003ab4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d202      	bcs.n	8003ac0 <QMPool_getFromISR+0x10c>
                me->nMin = nFree; // remember the minimum so far
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003abe:	825a      	strh	r2, [r3, #18]
            }
    #endif // ndef Q_UNSAFE
        }

        me->free_head = fb_next; // set the head to the next free block
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a3a      	ldr	r2, [r7, #32]
 8003ac4:	609a      	str	r2, [r3, #8]
    #ifndef Q_UNSAFE
        me->free_head_dis = (uintptr_t)(~Q_PTR2UINT_CAST_(fb_next));
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	615a      	str	r2, [r3, #20]
 8003ace:	e001      	b.n	8003ad4 <QMPool_getFromISR+0x120>
            QS_MPC_PRE(0U);        // min # free blocks (not available)
    #endif // ndef Q_UNSAFE
        QS_END_PRE()
    }
    else { // don't have enough free blocks at this point
        fb = (QFreeBlock *)0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f383 8811 	msr	BASEPRI, r3
    }
 8003ade:	bf00      	nop
        QS_END_PRE()
    }

    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

    return fb; // return the block or NULL pointer to the caller
 8003ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3730      	adds	r7, #48	@ 0x30
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	08004d90 	.word	0x08004d90

08003af0 <QMPool_putFromISR>:
//............................................................................
void QMPool_putFromISR(QMPool * const me, void *block,
                       uint_fast8_t const qsId)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	@ 0x30
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QFreeBlock * const fb = (QFreeBlock *)block;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        __asm volatile
 8003b00:	f3ef 8211 	mrs	r2, BASEPRI
 8003b04:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003b08:	b672      	cpsid	i
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	b662      	cpsie	i
 8003b18:	61fa      	str	r2, [r7, #28]
 8003b1a:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8003b1c:	69fb      	ldr	r3, [r7, #28]

    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b1e:	62bb      	str	r3, [r7, #40]	@ 0x28

    // get volatile into temporaries
    QFreeBlock *free_head = me->free_head;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
    QMPoolCtr nFree = me->nFree;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8a1b      	ldrh	r3, [r3, #16]
 8003b2a:	847b      	strh	r3, [r7, #34]	@ 0x22

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(901, Q_PTR2UINT_CAST_(free_head)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d004      	beq.n	8003b42 <QMPool_putFromISR+0x52>
 8003b38:	f240 3185 	movw	r1, #901	@ 0x385
 8003b3c:	4825      	ldr	r0, [pc, #148]	@ (8003bd4 <QMPool_putFromISR+0xe4>)
 8003b3e:	f7fc fcb7 	bl	80004b0 <Q_onError>
                            == (uintptr_t)~me->free_head_dis);
    Q_INVARIANT_INCRIT(902, nFree == (QMPoolCtr)~me->nFree_dis);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8b1b      	ldrh	r3, [r3, #24]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d004      	beq.n	8003b5a <QMPool_putFromISR+0x6a>
 8003b50:	f240 3186 	movw	r1, #902	@ 0x386
 8003b54:	481f      	ldr	r0, [pc, #124]	@ (8003bd4 <QMPool_putFromISR+0xe4>)
 8003b56:	f7fc fcab 	bl	80004b0 <Q_onError>
    #endif // ndef Q_UNSAFE

    Q_REQUIRE_INCRIT(910, nFree < me->nTot);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	89db      	ldrh	r3, [r3, #14]
 8003b5e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d304      	bcc.n	8003b6e <QMPool_putFromISR+0x7e>
 8003b64:	f240 318e 	movw	r1, #910	@ 0x38e
 8003b68:	481a      	ldr	r0, [pc, #104]	@ (8003bd4 <QMPool_putFromISR+0xe4>)
 8003b6a:	f7fc fca1 	bl	80004b0 <Q_onError>
    Q_REQUIRE_INCRIT(911, (me->start <= fb) && (fb <= me->end));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d304      	bcc.n	8003b82 <QMPool_putFromISR+0x92>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d904      	bls.n	8003b8c <QMPool_putFromISR+0x9c>
 8003b82:	f240 318f 	movw	r1, #911	@ 0x38f
 8003b86:	4813      	ldr	r0, [pc, #76]	@ (8003bd4 <QMPool_putFromISR+0xe4>)
 8003b88:	f7fc fc92 	bl	80004b0 <Q_onError>

    ++nFree; // one more free block in this pool
 8003b8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003b8e:	3301      	adds	r3, #1
 8003b90:	847b      	strh	r3, [r7, #34]	@ 0x22

    me->free_head = fb; // set as new head of the free list
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b96:	609a      	str	r2, [r3, #8]
    me->nFree     = nFree;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003b9c:	821a      	strh	r2, [r3, #16]
    fb->next      = free_head; // link into list
 8003b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba2:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    me->free_head_dis = (uintptr_t)(~Q_PTR2UINT_CAST_(fb));
 8003ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	615a      	str	r2, [r3, #20]
    me->nFree_dis     = (QMPoolCtr)~nFree;
 8003bac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	831a      	strh	r2, [r3, #24]
    fb->next_dis      = (uintptr_t)(~Q_PTR2UINT_CAST_(free_head));
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	43da      	mvns	r2, r3
 8003bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc0:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f383 8811 	msr	BASEPRI, r3
    }
 8003bc8:	bf00      	nop
        QS_OBJ_PRE(me);        // this memory pool
        QS_MPC_PRE(nFree);     // the # free blocks in the pool
    QS_END_PRE()

    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
}
 8003bca:	bf00      	nop
 8003bcc:	3730      	adds	r7, #48	@ 0x30
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	08004d90 	.word	0x08004d90

08003bd8 <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	78db      	ldrb	r3, [r3, #3]
 8003be4:	73fb      	strb	r3, [r7, #15]
           && (((me->evtTag_ ^ rc) & 0x0FU) == 0x0FU);
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b40      	cmp	r3, #64	@ 0x40
 8003bea:	d80a      	bhi.n	8003c02 <QEvt_verify_+0x2a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	789a      	ldrb	r2, [r3, #2]
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	4053      	eors	r3, r2
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	2b0f      	cmp	r3, #15
 8003bfc:	d101      	bne.n	8003c02 <QEvt_verify_+0x2a>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <QEvt_verify_+0x2c>
 8003c02:	2300      	movs	r3, #0
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	b2db      	uxtb	r3, r3
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <QHsm_ctor>:

//${QEP::QHsm::ctor} .........................................................
//! @protected @memberof QHsm
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    // do not call the QAsm_ctor() here
    me->super.vptr      = &vtable;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a06      	ldr	r2, [pc, #24]	@ (8003c40 <QHsm_ctor+0x28>)
 8003c26:	601a      	str	r2, [r3, #0]
    me->super.state.fun = Q_STATE_CAST(&QHsm_top);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a06      	ldr	r2, [pc, #24]	@ (8003c44 <QHsm_ctor+0x2c>)
 8003c2c:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	609a      	str	r2, [r3, #8]
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	08004db0 	.word	0x08004db0
 8003c44:	08004241 	.word	0x08004241

08003c48 <QHsm_init_>:
//! @private @memberof QHsm
void QHsm_init_(
    QAsm * const me,
    void const * const e,
    uint_fast8_t const qsId)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08e      	sub	sp, #56	@ 0x38
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
    }
    #else
    Q_UNUSED_PAR(qsId);
    #endif // def Q_SPY

    QStateHandler t = me->state.fun;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	637b      	str	r3, [r7, #52]	@ 0x34

    QF_CRIT_ENTRY();
 8003c5a:	f7fd fd55 	bl	8001708 <vPortEnterCritical>
    Q_REQUIRE_INCRIT(200, (me->vptr != (struct QAsmVtable *)0)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <QHsm_init_+0x2e>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <QHsm_init_+0x2e>
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c70:	4a3c      	ldr	r2, [pc, #240]	@ (8003d64 <QHsm_init_+0x11c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <QHsm_init_+0x36>
 8003c76:	21c8      	movs	r1, #200	@ 0xc8
 8003c78:	483b      	ldr	r0, [pc, #236]	@ (8003d68 <QHsm_init_+0x120>)
 8003c7a:	f7fc fc19 	bl	80004b0 <Q_onError>
        && (me->temp.fun != Q_STATE_CAST(0))
        && (t == Q_STATE_CAST(&QHsm_top)));
    QF_CRIT_EXIT();
 8003c7e:	f7fd fd6f 	bl	8001760 <vPortExitCritical>

    // execute the top-most initial tran.
    r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	4798      	blx	r3
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    QF_CRIT_ENTRY();
 8003c92:	f7fd fd39 	bl	8001708 <vPortEnterCritical>
    // the top-most initial tran. must be taken
    Q_ASSERT_INCRIT(210, r == Q_RET_TRAN);
 8003c96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c9a:	2b07      	cmp	r3, #7
 8003c9c:	d003      	beq.n	8003ca6 <QHsm_init_+0x5e>
 8003c9e:	21d2      	movs	r1, #210	@ 0xd2
 8003ca0:	4831      	ldr	r0, [pc, #196]	@ (8003d68 <QHsm_init_+0x120>)
 8003ca2:	f7fc fc05 	bl	80004b0 <Q_onError>
        QS_FUN_PRE(t);            // the source state
        QS_FUN_PRE(me->temp.fun); // the target of the initial tran.
    QS_END_PRE()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8003ca6:	f7fd fd5b 	bl	8001760 <vPortExitCritical>

    // drill down into the state hierarchy with initial transitions...
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; // tran. entry path array
        int_fast8_t ip = 0; // tran. entry path index
 8003caa:	2300      	movs	r3, #0
 8003cac:	633b      	str	r3, [r7, #48]	@ 0x30

        path[0] = me->temp.fun;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	617b      	str	r3, [r7, #20]
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	492c      	ldr	r1, [pc, #176]	@ (8003d6c <QHsm_init_+0x124>)
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	4798      	blx	r3
        // note: ip is the fixed upper loop bound
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8003cbe:	e00f      	b.n	8003ce0 <QHsm_init_+0x98>
            ++ip;
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	633b      	str	r3, [r7, #48]	@ 0x30
            path[ip] = me->temp.fun;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	3338      	adds	r3, #56	@ 0x38
 8003cd0:	443b      	add	r3, r7
 8003cd2:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	4924      	ldr	r1, [pc, #144]	@ (8003d6c <QHsm_init_+0x124>)
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d002      	beq.n	8003cf0 <QHsm_init_+0xa8>
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	dde7      	ble.n	8003cc0 <QHsm_init_+0x78>
        }
        QF_CRIT_ENTRY();
 8003cf0:	f7fd fd0a 	bl	8001708 <vPortEnterCritical>
        // too many state nesting levels or "malformed" HSM
        Q_ENSURE_INCRIT(220, ip < QHSM_MAX_NEST_DEPTH_);
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	dd03      	ble.n	8003d02 <QHsm_init_+0xba>
 8003cfa:	21dc      	movs	r1, #220	@ 0xdc
 8003cfc:	481a      	ldr	r0, [pc, #104]	@ (8003d68 <QHsm_init_+0x120>)
 8003cfe:	f7fc fbd7 	bl	80004b0 <Q_onError>
        QF_CRIT_EXIT();
 8003d02:	f7fd fd2d 	bl	8001760 <vPortExitCritical>

        me->temp.fun = path[0];
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]

        // retrace the entry path in reverse (desired) order...
        // note: ip is the fixed upper loop bound
        do {
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	3338      	adds	r3, #56	@ 0x38
 8003d12:	443b      	add	r3, r7
 8003d14:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003d18:	4915      	ldr	r1, [pc, #84]	@ (8003d70 <QHsm_init_+0x128>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	4798      	blx	r3
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
            --ip;
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	3b01      	subs	r3, #1
 8003d22:	633b      	str	r3, [r7, #48]	@ 0x30
        } while (ip >= 0);
 8003d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	daf0      	bge.n	8003d0c <QHsm_init_+0xc4>

        t = path[0]; // current state becomes the new source
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	637b      	str	r3, [r7, #52]	@ 0x34

        r = QHSM_RESERVED_EVT_(t, Q_INIT_SIG); // execute initial tran.
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d30:	4910      	ldr	r1, [pc, #64]	@ (8003d74 <QHsm_init_+0x12c>)
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	4798      	blx	r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            QS_END_PRE()
            QS_MEM_APP();
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY
    } while (r == Q_RET_TRAN);
 8003d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d40:	2b07      	cmp	r3, #7
 8003d42:	d0b2      	beq.n	8003caa <QHsm_init_+0x62>

    QF_CRIT_ENTRY();
 8003d44:	f7fd fce0 	bl	8001708 <vPortEnterCritical>
        QS_OBJ_PRE(me);   // this state machine object
        QS_FUN_PRE(t);    // the new active state
    QS_END_PRE()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8003d48:	f7fd fd0a 	bl	8001760 <vPortExitCritical>

    me->state.fun = t;   // change the current active state
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d50:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	43da      	mvns	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	609a      	str	r2, [r3, #8]
    #endif
}
 8003d5c:	bf00      	nop
 8003d5e:	3738      	adds	r7, #56	@ 0x38
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	08004241 	.word	0x08004241
 8003d68:	08004d98 	.word	0x08004d98
 8003d6c:	08004da0 	.word	0x08004da0
 8003d70:	08004da4 	.word	0x08004da4
 8003d74:	08004dac 	.word	0x08004dac

08003d78 <QHsm_dispatch_>:
//! @private @memberof QHsm
void QHsm_dispatch_(
    QAsm * const me,
    QEvt const * const e,
    uint_fast8_t const qsId)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08e      	sub	sp, #56	@ 0x38
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler s = me->state.fun;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	62bb      	str	r3, [r7, #40]	@ 0x28
    QStateHandler t = s;
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	637b      	str	r3, [r7, #52]	@ 0x34
    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 8003d8e:	f7fd fcbb 	bl	8001708 <vPortEnterCritical>
    Q_REQUIRE_INCRIT(300,
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <QHsm_dispatch_+0x34>
 8003d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d006      	beq.n	8003dac <QHsm_dispatch_+0x34>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d004      	beq.n	8003db6 <QHsm_dispatch_+0x3e>
 8003dac:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003db0:	4873      	ldr	r0, [pc, #460]	@ (8003f80 <QHsm_dispatch_+0x208>)
 8003db2:	f7fc fb7d 	bl	80004b0 <Q_onError>
        (e != (QEvt *)0)
        && (s != Q_STATE_CAST(0))
        && (me->state.uint == (uintptr_t)(~me->temp.uint)));
    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(301, QEvt_verify_(e));
 8003db6:	68b8      	ldr	r0, [r7, #8]
 8003db8:	f7ff ff0e 	bl	8003bd8 <QEvt_verify_>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <QHsm_dispatch_+0x54>
 8003dc2:	f240 112d 	movw	r1, #301	@ 0x12d
 8003dc6:	486e      	ldr	r0, [pc, #440]	@ (8003f80 <QHsm_dispatch_+0x208>)
 8003dc8:	f7fc fb72 	bl	80004b0 <Q_onError>
        QS_OBJ_PRE(me);     // this state machine object
        QS_FUN_PRE(s);      // the current state
    QS_END_PRE()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8003dcc:	f7fd fcc8 	bl	8001760 <vPortExitCritical>

    // process the event hierarchically...
    QState r;
    me->temp.fun = s;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dd4:	609a      	str	r2, [r3, #8]
    int_fast8_t ip = QHSM_MAX_NEST_DEPTH_; // fixed upper loop bound
 8003dd6:	2306      	movs	r3, #6
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    do {
        s = me->temp.fun;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	62bb      	str	r3, [r7, #40]	@ 0x28
        r = (*s)(me, e); // invoke state handler s
 8003de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	4798      	blx	r3
 8003de8:	4603      	mov	r3, r0
 8003dea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        if (r == Q_RET_UNHANDLED) { // unhandled due to a guard?
 8003dee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d106      	bne.n	8003e04 <QHsm_dispatch_+0x8c>
                QS_FUN_PRE(s);      // the current state
            QS_END_PRE()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG); // superstate of s
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	4962      	ldr	r1, [pc, #392]	@ (8003f84 <QHsm_dispatch_+0x20c>)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	4798      	blx	r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        --ip;
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	3b01      	subs	r3, #1
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    } while ((r == Q_RET_SUPER) && (ip > 0));
 8003e0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <QHsm_dispatch_+0xa0>
 8003e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	dce0      	bgt.n	8003dda <QHsm_dispatch_+0x62>

    QF_CRIT_ENTRY();
 8003e18:	f7fd fc76 	bl	8001708 <vPortEnterCritical>
    Q_ENSURE_INCRIT(310, ip > 0);
 8003e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	dc04      	bgt.n	8003e2c <QHsm_dispatch_+0xb4>
 8003e22:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8003e26:	4856      	ldr	r0, [pc, #344]	@ (8003f80 <QHsm_dispatch_+0x208>)
 8003e28:	f7fc fb42 	bl	80004b0 <Q_onError>
    QF_CRIT_EXIT();
 8003e2c:	f7fd fc98 	bl	8001760 <vPortExitCritical>

    if (r >= Q_RET_TRAN) { // tran. (regular or history) taken?
 8003e30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e34:	2b06      	cmp	r3, #6
 8003e36:	f240 8096 	bls.w	8003f66 <QHsm_dispatch_+0x1ee>
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY

        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        path[0] = me->temp.fun; // tran. target
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	613b      	str	r3, [r7, #16]
        path[1] = t; // current state
 8003e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e42:	617b      	str	r3, [r7, #20]
        path[2] = s; // tran. source
 8003e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e46:	61bb      	str	r3, [r7, #24]

        // exit current state to tran. source s...
        ip = QHSM_MAX_NEST_DEPTH_; // fixed upper loop bound
 8003e48:	2306      	movs	r3, #6
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (; (t != s) && (ip > 0); t = me->temp.fun) {
 8003e4c:	e010      	b.n	8003e70 <QHsm_dispatch_+0xf8>
            // exit from t
            if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e50:	494d      	ldr	r1, [pc, #308]	@ (8003f88 <QHsm_dispatch_+0x210>)
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	4798      	blx	r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d103      	bne.n	8003e64 <QHsm_dispatch_+0xec>
                QS_STATE_EXIT_(t, qsId);
                // find superstate of t
                (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5e:	4949      	ldr	r1, [pc, #292]	@ (8003f84 <QHsm_dispatch_+0x20c>)
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	4798      	blx	r3
            }
            --ip;
 8003e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e66:	3b01      	subs	r3, #1
 8003e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (; (t != s) && (ip > 0); t = me->temp.fun) {
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d002      	beq.n	8003e7e <QHsm_dispatch_+0x106>
 8003e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	dce7      	bgt.n	8003e4e <QHsm_dispatch_+0xd6>
        }
        QF_CRIT_ENTRY();
 8003e7e:	f7fd fc43 	bl	8001708 <vPortEnterCritical>
        Q_ENSURE_INCRIT(320, ip > 0);
 8003e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	dc04      	bgt.n	8003e92 <QHsm_dispatch_+0x11a>
 8003e88:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003e8c:	483c      	ldr	r0, [pc, #240]	@ (8003f80 <QHsm_dispatch_+0x208>)
 8003e8e:	f7fc fb0f 	bl	80004b0 <Q_onError>
        QF_CRIT_EXIT();
 8003e92:	f7fd fc65 	bl	8001760 <vPortExitCritical>

        ip = QHsm_tran_(me, path, qsId); // take the tran.
 8003e96:	f107 0310 	add.w	r3, r7, #16
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f8ca 	bl	8004038 <QHsm_tran_>
 8003ea4:	62f8      	str	r0, [r7, #44]	@ 0x2c

        // execute state entry actions in the desired order...
        // note: ip is the fixed upper loop bound
        for (; ip >= 0; --ip) {
 8003ea6:	e00b      	b.n	8003ec0 <QHsm_dispatch_+0x148>
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8003ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	3338      	adds	r3, #56	@ 0x38
 8003eae:	443b      	add	r3, r7
 8003eb0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8003eb4:	4935      	ldr	r1, [pc, #212]	@ (8003f8c <QHsm_dispatch_+0x214>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8003eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	daf0      	bge.n	8003ea8 <QHsm_dispatch_+0x130>
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
        }
        t = path[0];      // stick the target into register
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
        me->temp.fun = t; // update the next state
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ece:	609a      	str	r2, [r3, #8]

        // drill into the target hierarchy...
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8003ed0:	e042      	b.n	8003f58 <QHsm_dispatch_+0x1e0>
                QS_FUN_PRE(me->temp.fun); // the target of the tran.
            QS_END_PRE()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            ip = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            path[0] = me->temp.fun;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	613b      	str	r3, [r7, #16]

            // find superstate
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4928      	ldr	r1, [pc, #160]	@ (8003f84 <QHsm_dispatch_+0x20c>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	4798      	blx	r3

            // note: ip is the fixed upper loop bound
            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8003ee6:	e00f      	b.n	8003f08 <QHsm_dispatch_+0x190>
                ++ip;
 8003ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eea:	3301      	adds	r3, #1
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                path[ip] = me->temp.fun;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	3338      	adds	r3, #56	@ 0x38
 8003ef8:	443b      	add	r3, r7
 8003efa:	f843 2c28 	str.w	r2, [r3, #-40]
                // find superstate
                (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4920      	ldr	r1, [pc, #128]	@ (8003f84 <QHsm_dispatch_+0x20c>)
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	4798      	blx	r3
            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d002      	beq.n	8003f18 <QHsm_dispatch_+0x1a0>
 8003f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	dde7      	ble.n	8003ee8 <QHsm_dispatch_+0x170>
            }
            QF_CRIT_ENTRY();
 8003f18:	f7fd fbf6 	bl	8001708 <vPortEnterCritical>
            // too many state nesting levels or "malformed" HSM
            Q_ENSURE_INCRIT(330, ip < QHSM_MAX_NEST_DEPTH_);
 8003f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	dd04      	ble.n	8003f2c <QHsm_dispatch_+0x1b4>
 8003f22:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8003f26:	4816      	ldr	r0, [pc, #88]	@ (8003f80 <QHsm_dispatch_+0x208>)
 8003f28:	f7fc fac2 	bl	80004b0 <Q_onError>
            QF_CRIT_EXIT();
 8003f2c:	f7fd fc18 	bl	8001760 <vPortExitCritical>

            me->temp.fun = path[0];
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	609a      	str	r2, [r3, #8]

            // retrace the entry path in reverse (correct) order...
            // note: ip is the fixed upper loop bound
            do {
                // enter path[ip]
                if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8003f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	3338      	adds	r3, #56	@ 0x38
 8003f3c:	443b      	add	r3, r7
 8003f3e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8003f42:	4912      	ldr	r1, [pc, #72]	@ (8003f8c <QHsm_dispatch_+0x214>)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	4798      	blx	r3
                    == Q_RET_HANDLED)
                {
                    QS_STATE_ENTRY_(path[ip], qsId);
                }
                --ip;
 8003f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            } while (ip >= 0);
 8003f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	daf0      	bge.n	8003f36 <QHsm_dispatch_+0x1be>

            t = path[0]; // current state becomes the new source
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	637b      	str	r3, [r7, #52]	@ 0x34
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8003f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f5a:	490d      	ldr	r1, [pc, #52]	@ (8003f90 <QHsm_dispatch_+0x218>)
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	4798      	blx	r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b07      	cmp	r3, #7
 8003f64:	d0b5      	beq.n	8003ed2 <QHsm_dispatch_+0x15a>
        QS_MEM_APP();
        QS_CRIT_EXIT();
    }
    #endif // Q_SPY

    me->state.fun = t; // change the current active state
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f6a:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	43da      	mvns	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	609a      	str	r2, [r3, #8]
    #endif
}
 8003f76:	bf00      	nop
 8003f78:	3738      	adds	r7, #56	@ 0x38
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	08004d98 	.word	0x08004d98
 8003f84:	08004da0 	.word	0x08004da0
 8003f88:	08004da8 	.word	0x08004da8
 8003f8c:	08004da4 	.word	0x08004da4
 8003f90:	08004dac 	.word	0x08004dac

08003f94 <QHsm_isIn_>:
//${QEP::QHsm::isIn_} ........................................................
//! @private @memberof QHsm
bool QHsm_isIn_(
    QAsm * const me,
    QStateHandler const state)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003f9e:	f7fd fbb3 	bl	8001708 <vPortEnterCritical>
    Q_INVARIANT_INCRIT(602,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d004      	beq.n	8003fba <QHsm_isIn_+0x26>
 8003fb0:	f240 215a 	movw	r1, #602	@ 0x25a
 8003fb4:	481e      	ldr	r0, [pc, #120]	@ (8004030 <QHsm_isIn_+0x9c>)
 8003fb6:	f7fc fa7b 	bl	80004b0 <Q_onError>
        me->state.uint == (uintptr_t)(~me->temp.uint));
    QF_CRIT_EXIT();
 8003fba:	f7fd fbd1 	bl	8001760 <vPortExitCritical>

    bool inState = false; // assume that this HSM is not in 'state'
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75fb      	strb	r3, [r7, #23]

    // scan the state hierarchy bottom-up
    QStateHandler s = me->state.fun;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	613b      	str	r3, [r7, #16]
    int_fast8_t lbound = QHSM_MAX_NEST_DEPTH_ + 1; // fixed upper loop bound
 8003fc8:	2307      	movs	r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]
    QState r = Q_RET_SUPER;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	72fb      	strb	r3, [r7, #11]
    for (; (r != Q_RET_IGNORED) && (lbound > 0); --lbound) {
 8003fd0:	e012      	b.n	8003ff8 <QHsm_isIn_+0x64>
        if (s == state) { // do the states match?
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d102      	bne.n	8003fe0 <QHsm_isIn_+0x4c>
            inState = true;  // 'true' means that match found
 8003fda:	2301      	movs	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
            break; // break out of the for-loop
 8003fde:	e011      	b.n	8004004 <QHsm_isIn_+0x70>
        }
        else {
            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4914      	ldr	r1, [pc, #80]	@ (8004034 <QHsm_isIn_+0xa0>)
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
 8003fe8:	4603      	mov	r3, r0
 8003fea:	72fb      	strb	r3, [r7, #11]
            s = me->temp.fun;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	613b      	str	r3, [r7, #16]
    for (; (r != Q_RET_IGNORED) && (lbound > 0); --lbound) {
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	7afb      	ldrb	r3, [r7, #11]
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d002      	beq.n	8004004 <QHsm_isIn_+0x70>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	dce6      	bgt.n	8003fd2 <QHsm_isIn_+0x3e>
        }
    }

    QF_CRIT_ENTRY();
 8004004:	f7fd fb80 	bl	8001708 <vPortEnterCritical>
    Q_ENSURE_INCRIT(690, lbound > 0);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	dc04      	bgt.n	8004018 <QHsm_isIn_+0x84>
 800400e:	f240 21b2 	movw	r1, #690	@ 0x2b2
 8004012:	4807      	ldr	r0, [pc, #28]	@ (8004030 <QHsm_isIn_+0x9c>)
 8004014:	f7fc fa4c 	bl	80004b0 <Q_onError>
    QF_CRIT_EXIT();
 8004018:	f7fd fba2 	bl	8001760 <vPortExitCritical>

    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	43da      	mvns	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	609a      	str	r2, [r3, #8]
    #endif

    return inState; // return the status
 8004026:	7dfb      	ldrb	r3, [r7, #23]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	08004d98 	.word	0x08004d98
 8004034:	08004da0 	.word	0x08004da0

08004038 <QHsm_tran_>:
//! @private @memberof QHsm
int_fast8_t QHsm_tran_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	@ 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    int_fast8_t ip = -1; // tran. entry path index
 8004044:	f04f 33ff 	mov.w	r3, #4294967295
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
    QStateHandler t = path[0];
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	613b      	str	r3, [r7, #16]
    QF_CRIT_STAT

    // (a) check source==target (tran. to self)...
    if (s == t) {
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	429a      	cmp	r2, r3
 800405c:	d106      	bne.n	800406c <QHsm_tran_+0x34>
        // exit source s
        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4974      	ldr	r1, [pc, #464]	@ (8004234 <QHsm_tran_+0x1fc>)
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	4798      	blx	r3
            QS_STATE_EXIT_(s, qsId);
        }
        ip = 0; // enter the target
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
 800406a:	e0d1      	b.n	8004210 <QHsm_tran_+0x1d8>
    }
    else {
        // find superstate of target
        (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	4972      	ldr	r1, [pc, #456]	@ (8004238 <QHsm_tran_+0x200>)
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	4798      	blx	r3

        t = me->temp.fun;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	623b      	str	r3, [r7, #32]

        // (b) check source==target->super...
        if (s == t) {
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	429a      	cmp	r2, r3
 8004080:	d102      	bne.n	8004088 <QHsm_tran_+0x50>
            ip = 0; // enter the target
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
 8004086:	e0c3      	b.n	8004210 <QHsm_tran_+0x1d8>
        }
        else {
            // find superstate of src
            (void)QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	496b      	ldr	r1, [pc, #428]	@ (8004238 <QHsm_tran_+0x200>)
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	4798      	blx	r3

            // (c) check source->super==target->super...
            if (me->temp.fun == t) {
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	429a      	cmp	r2, r3
 8004098:	d106      	bne.n	80040a8 <QHsm_tran_+0x70>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4965      	ldr	r1, [pc, #404]	@ (8004234 <QHsm_tran_+0x1fc>)
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	4798      	blx	r3
                    QS_STATE_EXIT_(s, qsId);
                }
                ip = 0; // enter the target
 80040a2:	2300      	movs	r3, #0
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a6:	e0b3      	b.n	8004210 <QHsm_tran_+0x1d8>
            }
            else {
                // (d) check source->super==target...
                if (me->temp.fun == path[0]) {
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d104      	bne.n	80040be <QHsm_tran_+0x86>
                    // exit source s
                    if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	495f      	ldr	r1, [pc, #380]	@ (8004234 <QHsm_tran_+0x1fc>)
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	4798      	blx	r3
 80040bc:	e0a8      	b.n	8004210 <QHsm_tran_+0x1d8>
                    }
                }
                else {
                    // (e) check rest of source==target->super->super..
                    // and store the entry path along the way
                    int_fast8_t iq = 0; // indicate that LCA was found
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
                    ip = 1; // enter target and its superstate
 80040c2:	2301      	movs	r3, #1
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
                    path[1] = t;      // save the superstate of target
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	3304      	adds	r3, #4
 80040ca:	6a3a      	ldr	r2, [r7, #32]
 80040cc:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; // save source->super
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	623b      	str	r3, [r7, #32]

                    // find target->super->super...
                    // note: ip is the fixed upper loop bound
                    QState r = QHSM_RESERVED_EVT_(path[1], Q_EMPTY_SIG);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3304      	adds	r3, #4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4957      	ldr	r1, [pc, #348]	@ (8004238 <QHsm_tran_+0x200>)
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	4798      	blx	r3
 80040e0:	4603      	mov	r3, r0
 80040e2:	76fb      	strb	r3, [r7, #27]
                    while ((r == Q_RET_SUPER)
 80040e4:	e01d      	b.n	8004122 <QHsm_tran_+0xea>
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
                    {
                        ++ip;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	3301      	adds	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
                        path[ip] = me->temp.fun; // store the entry path
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	4413      	add	r3, r2
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	6892      	ldr	r2, [r2, #8]
 80040f8:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { // is it the source?
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <QHsm_tran_+0xdc>
                            iq = 1; // indicate that the LCA found
 8004104:	2301      	movs	r3, #1
 8004106:	61fb      	str	r3, [r7, #28]
                            --ip; // do not enter the source
 8004108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410a:	3b01      	subs	r3, #1
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
                            r = Q_RET_HANDLED; // terminate the loop
 800410e:	2302      	movs	r3, #2
 8004110:	76fb      	strb	r3, [r7, #27]
 8004112:	e006      	b.n	8004122 <QHsm_tran_+0xea>
                        }
                        else { // it is not the source, keep going up
                            r = QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4947      	ldr	r1, [pc, #284]	@ (8004238 <QHsm_tran_+0x200>)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	4798      	blx	r3
 800411e:	4603      	mov	r3, r0
 8004120:	76fb      	strb	r3, [r7, #27]
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
 8004122:	7efb      	ldrb	r3, [r7, #27]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <QHsm_tran_+0xf6>
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	2b04      	cmp	r3, #4
 800412c:	dddb      	ble.n	80040e6 <QHsm_tran_+0xae>
                        }
                    }
                    QF_CRIT_ENTRY();
 800412e:	f7fd faeb 	bl	8001708 <vPortEnterCritical>
                    // NOTE: The following postcondition succeeds only when
                    // ip < QHSM_MAX_NEST_DEPTH, so no additional check is necessary
                    // too many state nesting levels or "malformed" HSM.
                    Q_ENSURE_INCRIT(510, r != Q_RET_SUPER);
 8004132:	7efb      	ldrb	r3, [r7, #27]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <QHsm_tran_+0x10a>
 8004138:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 800413c:	483f      	ldr	r0, [pc, #252]	@ (800423c <QHsm_tran_+0x204>)
 800413e:	f7fc f9b7 	bl	80004b0 <Q_onError>
                    QF_CRIT_EXIT();
 8004142:	f7fd fb0d 	bl	8001760 <vPortExitCritical>

                    // the LCA not found yet?
                    if (iq == 0) {
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d161      	bne.n	8004210 <QHsm_tran_+0x1d8>
                        // exit source s
                        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4939      	ldr	r1, [pc, #228]	@ (8004234 <QHsm_tran_+0x1fc>)
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	4798      	blx	r3
                            QS_STATE_EXIT_(s, qsId);
                        }

                        // (f) check the rest of source->super
                        //                  == target->super->super...
                        iq = ip;
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; // indicate that the LCA NOT found
 8004158:	2303      	movs	r3, #3
 800415a:	76fb      	strb	r3, [r7, #27]
                        // note: iq is the fixed upper loop bound
                        do {
                            if (t == path[iq]) { // is this the LCA?
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	4413      	add	r3, r2
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6a3a      	ldr	r2, [r7, #32]
 8004168:	429a      	cmp	r2, r3
 800416a:	d108      	bne.n	800417e <QHsm_tran_+0x146>
                                r = Q_RET_HANDLED; // indicate the LCA found
 800416c:	2302      	movs	r3, #2
 800416e:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; // do not enter the LCA
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	3b01      	subs	r3, #1
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
                                iq = -1; // cause termination of the loop
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	e002      	b.n	8004184 <QHsm_tran_+0x14c>
                            }
                            else {
                                --iq; // try lower superstate of target
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3b01      	subs	r3, #1
 8004182:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	dae8      	bge.n	800415c <QHsm_tran_+0x124>

                        // the LCA not found yet?
                        if (r != Q_RET_HANDLED) {
 800418a:	7efb      	ldrb	r3, [r7, #27]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d03f      	beq.n	8004210 <QHsm_tran_+0x1d8>
                            // (g) check each source->super->...
                            // for each target->super...
                            r = Q_RET_IGNORED; // keep looping
 8004190:	2303      	movs	r3, #3
 8004192:	76fb      	strb	r3, [r7, #27]
                            int_fast8_t lbound = QHSM_MAX_NEST_DEPTH_;
 8004194:	2306      	movs	r3, #6
 8004196:	617b      	str	r3, [r7, #20]
                            do {
                                // exit from t
                                if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG)
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	4926      	ldr	r1, [pc, #152]	@ (8004234 <QHsm_tran_+0x1fc>)
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	4798      	blx	r3
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d103      	bne.n	80041ae <QHsm_tran_+0x176>
                                    == Q_RET_HANDLED)
                                {
                                    QS_STATE_EXIT_(t, qsId);
                                    // find superstate of t
                                    (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	4923      	ldr	r1, [pc, #140]	@ (8004238 <QHsm_tran_+0x200>)
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	4798      	blx	r3
                                }
                                t = me->temp.fun; // set to super of t
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	623b      	str	r3, [r7, #32]
                                iq = ip;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	61fb      	str	r3, [r7, #28]
                                do {
                                    // is this the LCA?
                                    if (t == path[iq]) {
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4413      	add	r3, r2
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a3a      	ldr	r2, [r7, #32]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d108      	bne.n	80041da <QHsm_tran_+0x1a2>
                                        ip = iq - 1; // do not enter the LCA
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
                                        iq = -1;     // break out of inner loop
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	61fb      	str	r3, [r7, #28]
                                        r = Q_RET_HANDLED; // break outer loop
 80041d4:	2302      	movs	r3, #2
 80041d6:	76fb      	strb	r3, [r7, #27]
 80041d8:	e002      	b.n	80041e0 <QHsm_tran_+0x1a8>
                                    }
                                    else {
                                        --iq;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3b01      	subs	r3, #1
 80041de:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	dae8      	bge.n	80041b8 <QHsm_tran_+0x180>

                                --lbound;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
                            } while ((r != Q_RET_HANDLED) && (lbound > 0));
 80041ec:	7efb      	ldrb	r3, [r7, #27]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d002      	beq.n	80041f8 <QHsm_tran_+0x1c0>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dccf      	bgt.n	8004198 <QHsm_tran_+0x160>
                            QF_CRIT_ENTRY();
 80041f8:	f7fd fa86 	bl	8001708 <vPortEnterCritical>
                            Q_ENSURE_INCRIT(530, lbound > 0);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	dc04      	bgt.n	800420c <QHsm_tran_+0x1d4>
 8004202:	f240 2112 	movw	r1, #530	@ 0x212
 8004206:	480d      	ldr	r0, [pc, #52]	@ (800423c <QHsm_tran_+0x204>)
 8004208:	f7fc f952 	bl	80004b0 <Q_onError>
                            QF_CRIT_EXIT();
 800420c:	f7fd faa8 	bl	8001760 <vPortExitCritical>
                    }
                }
            }
        }
    }
    QF_CRIT_ENTRY();
 8004210:	f7fd fa7a 	bl	8001708 <vPortEnterCritical>
    Q_ENSURE_INCRIT(590, ip < QHSM_MAX_NEST_DEPTH_);
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	2b05      	cmp	r3, #5
 8004218:	dd04      	ble.n	8004224 <QHsm_tran_+0x1ec>
 800421a:	f240 214e 	movw	r1, #590	@ 0x24e
 800421e:	4807      	ldr	r0, [pc, #28]	@ (800423c <QHsm_tran_+0x204>)
 8004220:	f7fc f946 	bl	80004b0 <Q_onError>
    QF_CRIT_EXIT();
 8004224:	f7fd fa9c 	bl	8001760 <vPortExitCritical>
    return ip;
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800422a:	4618      	mov	r0, r3
 800422c:	3728      	adds	r7, #40	@ 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	08004da8 	.word	0x08004da8
 8004238:	08004da0 	.word	0x08004da0
 800423c:	08004d98 	.word	0x08004d98

08004240 <QHsm_top>:

//${QEP::QHsm::top} ..........................................................
//! @protected @memberof QAsm
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; // the top state ignores all events
 800424a:	2303      	movs	r3, #3
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <QF_bzero_>:
//${QF::QF-pkg::bzero_} ......................................................
//! @static @private @memberof QF
void QF_bzero_(
    void * const start,
    uint_fast16_t const len)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	e008      	b.n	800427e <QF_bzero_+0x26>
        *ptr = 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
        ++ptr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	3b01      	subs	r3, #1
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f3      	bne.n	800426c <QF_bzero_+0x14>
    }
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	78db      	ldrb	r3, [r3, #3]
 800429e:	73fb      	strb	r3, [r7, #15]
           && (((me->evtTag_ ^ rc) & 0x0FU) == 0x0FU);
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	2b40      	cmp	r3, #64	@ 0x40
 80042a4:	d80a      	bhi.n	80042bc <QEvt_verify_+0x2a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	789a      	ldrb	r2, [r3, #2]
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	4053      	eors	r3, r2
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	2b0f      	cmp	r3, #15
 80042b6:	d101      	bne.n	80042bc <QEvt_verify_+0x2a>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <QEvt_verify_+0x2c>
 80042bc:	2300      	movs	r3, #0
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	b2db      	uxtb	r3, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <QEvt_getPoolNum_>:
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)(me->evtTag_ >> 4U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	789b      	ldrb	r3, [r3, #2]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	b2db      	uxtb	r3, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <QEvt_refCtr_dec_>:
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_ - 1U;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	78db      	ldrb	r3, [r3, #3]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	70da      	strb	r2, [r3, #3]
    ((QEvt *)me)->evtTag_ = (me->evtTag_ & 0xF0U) | ((~rc) & 0x0FU);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	789b      	ldrb	r3, [r3, #2]
 8004308:	f023 030f 	bic.w	r3, r3, #15
 800430c:	b2da      	uxtb	r2, r3
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	43db      	mvns	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	b2db      	uxtb	r3, r3
 800431a:	4313      	orrs	r3, r2
 800431c:	b2da      	uxtb	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	709a      	strb	r2, [r3, #2]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <QF_poolInit>:
//! @static @public @memberof QF
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
    uint_fast8_t const poolNum = QF_priv_.maxPool_;
 800433c:	4b1b      	ldr	r3, [pc, #108]	@ (80043ac <QF_poolInit+0x7c>)
 800433e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004340:	617b      	str	r3, [r7, #20]

    // see precondition{qf_dyn,200} and precondition{qf_dyn,201}
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8004342:	f7fd f9e1 	bl	8001708 <vPortEnterCritical>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, poolNum < QF_MAX_EPOOL);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d903      	bls.n	8004354 <QF_poolInit+0x24>
 800434c:	21c8      	movs	r1, #200	@ 0xc8
 800434e:	4818      	ldr	r0, [pc, #96]	@ (80043b0 <QF_poolInit+0x80>)
 8004350:	f7fc f8ae 	bl	80004b0 <Q_onError>
    if (poolNum > 0U) {
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d011      	beq.n	800437e <QF_poolInit+0x4e>
        Q_REQUIRE_INCRIT(201,
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	4913      	ldr	r1, [pc, #76]	@ (80043ac <QF_poolInit+0x7c>)
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	330c      	adds	r3, #12
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4293      	cmp	r3, r2
 8004374:	d803      	bhi.n	800437e <QF_poolInit+0x4e>
 8004376:	21c9      	movs	r1, #201	@ 0xc9
 8004378:	480d      	ldr	r0, [pc, #52]	@ (80043b0 <QF_poolInit+0x80>)
 800437a:	f7fc f899 	bl	80004b0 <Q_onError>
            QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum - 1U]) < evtSize);
    }
    QF_priv_.maxPool_ = poolNum + 1U; // one more pool
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3301      	adds	r3, #1
 8004382:	4a0a      	ldr	r2, [pc, #40]	@ (80043ac <QF_poolInit+0x7c>)
 8004384:	6553      	str	r3, [r2, #84]	@ 0x54

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8004386:	f7fd f9eb 	bl	8001760 <vPortExitCritical>

    // perform the port-dependent initialization of the event-pool
    QF_EPOOL_INIT_(QF_priv_.ePool_[poolNum], poolSto, poolSize, evtSize);
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4a05      	ldr	r2, [pc, #20]	@ (80043ac <QF_poolInit+0x7c>)
 8004396:	1898      	adds	r0, r3, r2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	68f9      	ldr	r1, [r7, #12]
 800439e:	f000 f85b 	bl	8004458 <QMPool_init>
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)((uint8_t)'0' + poolNum + 1U);
        QS_obj_dict_pre_(&QF_priv_.ePool_[poolNum], (char const *)obj_name);
    }
    #endif // Q_SPY
}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	240009b4 	.word	0x240009b4
 80043b0:	08004dbc 	.word	0x08004dbc

080043b4 <QF_gc>:
    return e;
}

//${QF::QF-dyn::gc} ..........................................................
//! @static @public @memberof QF
void QF_gc(QEvt const * const e) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80043bc:	f7fd f9a4 	bl	8001708 <vPortEnterCritical>

    Q_REQUIRE_INCRIT(400, e != (QEvt *)0);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <QF_gc+0x1c>
 80043c6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80043ca:	4821      	ldr	r0, [pc, #132]	@ (8004450 <QF_gc+0x9c>)
 80043cc:	f7fc f870 	bl	80004b0 <Q_onError>

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(401, QEvt_verify_(e));
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff5e 	bl	8004292 <QEvt_verify_>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <QF_gc+0x32>
 80043dc:	f240 1191 	movw	r1, #401	@ 0x191
 80043e0:	481b      	ldr	r0, [pc, #108]	@ (8004450 <QF_gc+0x9c>)
 80043e2:	f7fc f865 	bl	80004b0 <Q_onError>
    #endif

    uint_fast8_t const poolNum = QEvt_getPoolNum_(e);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff ff72 	bl	80042d0 <QEvt_getPoolNum_>
 80043ec:	60f8      	str	r0, [r7, #12]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d027      	beq.n	8004444 <QF_gc+0x90>
        QF_MEM_SYS();

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	78db      	ldrb	r3, [r3, #3]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d905      	bls.n	800440a <QF_gc+0x56>
                QS_TIME_PRE();       // timestamp
                QS_SIG_PRE(e->sig);  // the signal of the event
                QS_2U8_PRE(poolNum, e->refCtr_);
            QS_END_PRE()

            QEvt_refCtr_dec_(e); // decrement the ref counter
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff ff74 	bl	80042ec <QEvt_refCtr_dec_>

            QF_MEM_APP();
            QF_CRIT_EXIT();
 8004404:	f7fd f9ac 	bl	8001760 <vPortExitCritical>
        }
    }
    else {
        QF_CRIT_EXIT();
    }
}
 8004408:	e01e      	b.n	8004448 <QF_gc+0x94>
            Q_ASSERT_INCRIT(410, (poolNum <= QF_priv_.maxPool_)
 800440a:	4b12      	ldr	r3, [pc, #72]	@ (8004454 <QF_gc+0xa0>)
 800440c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	429a      	cmp	r2, r3
 8004412:	d802      	bhi.n	800441a <QF_gc+0x66>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d904      	bls.n	8004424 <QF_gc+0x70>
 800441a:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800441e:	480c      	ldr	r0, [pc, #48]	@ (8004450 <QF_gc+0x9c>)
 8004420:	f7fc f846 	bl	80004b0 <Q_onError>
            QF_CRIT_EXIT();
 8004424:	f7fd f99c 	bl	8001760 <vPortExitCritical>
            QF_EPOOL_PUT_(QF_priv_.ePool_[poolNum - 1U],
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e5a      	subs	r2, r3, #1
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4a07      	ldr	r2, [pc, #28]	@ (8004454 <QF_gc+0xa0>)
 8004436:	4413      	add	r3, r2
 8004438:	2200      	movs	r2, #0
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f8ad 	bl	800459c <QMPool_put>
}
 8004442:	e001      	b.n	8004448 <QF_gc+0x94>
        QF_CRIT_EXIT();
 8004444:	f7fd f98c 	bl	8001760 <vPortExitCritical>
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	08004dbc 	.word	0x08004dbc
 8004454:	240009b4 	.word	0x240009b4

08004458 <QMPool_init>:
//! @public @memberof QMPool
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const blockSize)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8004466:	f7fd f94f 	bl	8001708 <vPortEnterCritical>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(100, poolSto != (void *)0);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d103      	bne.n	8004478 <QMPool_init+0x20>
 8004470:	2164      	movs	r1, #100	@ 0x64
 8004472:	4849      	ldr	r0, [pc, #292]	@ (8004598 <QMPool_init+0x140>)
 8004474:	f7fc f81c 	bl	80004b0 <Q_onError>
    Q_REQUIRE_INCRIT(101, poolSize >= (uint_fast32_t)sizeof(QFreeBlock));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b07      	cmp	r3, #7
 800447c:	d803      	bhi.n	8004486 <QMPool_init+0x2e>
 800447e:	2165      	movs	r1, #101	@ 0x65
 8004480:	4845      	ldr	r0, [pc, #276]	@ (8004598 <QMPool_init+0x140>)
 8004482:	f7fc f815 	bl	80004b0 <Q_onError>
    Q_REQUIRE_INCRIT(102, (uint_fast16_t)(blockSize + sizeof(QFreeBlock))
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f113 0f09 	cmn.w	r3, #9
 800448c:	d903      	bls.n	8004496 <QMPool_init+0x3e>
 800448e:	2166      	movs	r1, #102	@ 0x66
 8004490:	4841      	ldr	r0, [pc, #260]	@ (8004598 <QMPool_init+0x140>)
 8004492:	f7fc f80d 	bl	80004b0 <Q_onError>
                          > blockSize);

    me->free_head = (QFreeBlock *)poolSto;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	609a      	str	r2, [r3, #8]

    // find # free blocks in a memory block, NO DIVISION
    me->blockSize = (QMPoolSize)(2U * sizeof(void *));
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2208      	movs	r2, #8
 80044a0:	819a      	strh	r2, [r3, #12]
    uint_fast16_t nblocks = 1U;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 80044a6:	e008      	b.n	80044ba <QMPool_init+0x62>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	899b      	ldrh	r3, [r3, #12]
 80044ac:	3308      	adds	r3, #8
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	899a      	ldrh	r2, [r3, #12]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d3f0      	bcc.n	80044a8 <QMPool_init+0x50>
    }

    // the pool buffer must fit at least one rounded-up block
    Q_ASSERT_INCRIT(110, poolSize >= me->blockSize);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	899b      	ldrh	r3, [r3, #12]
 80044ca:	461a      	mov	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d203      	bcs.n	80044da <QMPool_init+0x82>
 80044d2:	216e      	movs	r1, #110	@ 0x6e
 80044d4:	4830      	ldr	r0, [pc, #192]	@ (8004598 <QMPool_init+0x140>)
 80044d6:	f7fb ffeb 	bl	80004b0 <Q_onError>

    // start at the head of the free list
    QFreeBlock *fb = me->free_head;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	61bb      	str	r3, [r7, #24]
    uint32_t nTot = 1U; // the last block already in the list
 80044e0:	2301      	movs	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]

    // chain all blocks together in a free-list...
    for (uint_fast32_t size = poolSize - me->blockSize;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	899b      	ldrh	r3, [r3, #12]
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e016      	b.n	8004520 <QMPool_init+0xc8>
         size >= (uint_fast32_t)me->blockSize;
         size -= (uint_fast32_t)me->blockSize)
    {
        fb->next = &fb[nblocks]; // point next link to next block
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	441a      	add	r2, r3
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
        fb->next_dis = (uintptr_t)(~Q_PTR2UINT_CAST_(fb->next));
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	43da      	mvns	r2, r3
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	605a      	str	r2, [r3, #4]
    #endif
        fb = fb->next;   // advance to the next block
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	61bb      	str	r3, [r7, #24]
        ++nTot;          // one more free block in the pool
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	3301      	adds	r3, #1
 8004512:	617b      	str	r3, [r7, #20]
         size -= (uint_fast32_t)me->blockSize)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	899b      	ldrh	r3, [r3, #12]
 8004518:	461a      	mov	r2, r3
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	613b      	str	r3, [r7, #16]
         size >= (uint_fast32_t)me->blockSize;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	899b      	ldrh	r3, [r3, #12]
 8004524:	461a      	mov	r2, r3
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4293      	cmp	r3, r2
 800452a:	d2e2      	bcs.n	80044f2 <QMPool_init+0x9a>

    // dynamic range check
    #if (QF_MPOOL_CTR_SIZE == 1U)
    Q_ENSURE_INCRIT(190, nTot < 0xFFU);
    #elif (QF_MPOOL_CTR_SIZE == 2U)
    Q_ENSURE_INCRIT(190, nTot < 0xFFFFU);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004532:	4293      	cmp	r3, r2
 8004534:	d903      	bls.n	800453e <QMPool_init+0xe6>
 8004536:	21be      	movs	r1, #190	@ 0xbe
 8004538:	4817      	ldr	r0, [pc, #92]	@ (8004598 <QMPool_init+0x140>)
 800453a:	f7fb ffb9 	bl	80004b0 <Q_onError>
    #endif

    fb->next  = (QFreeBlock *)0; // the last link points to NULL
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]

    me->nTot  = (QMPoolCtr)nTot;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	81da      	strh	r2, [r3, #14]
    me->nFree = me->nTot;        // all blocks are free
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	89da      	ldrh	r2, [r3, #14]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	821a      	strh	r2, [r3, #16]
    me->start = (QFreeBlock *)poolSto; // the original start this pool buffer
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	601a      	str	r2, [r3, #0]
    me->end   = fb;              // the last block in this pool
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	605a      	str	r2, [r3, #4]

    #ifndef Q_UNSAFE
    me->free_head_dis = (uintptr_t)~Q_PTR2UINT_CAST_(me->free_head);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	43da      	mvns	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	615a      	str	r2, [r3, #20]
    me->nFree_dis     = (QMPoolCtr)~me->nFree;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8a1b      	ldrh	r3, [r3, #16]
 800456e:	b29b      	uxth	r3, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	831a      	strh	r2, [r3, #24]
    me->nMin          = me->nTot;  // the minimum # free blocks
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	89da      	ldrh	r2, [r3, #14]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	825a      	strh	r2, [r3, #18]
    fb->next_dis      = (uintptr_t)(~Q_PTR2UINT_CAST_(fb->next));
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	43da      	mvns	r2, r3
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	605a      	str	r2, [r3, #4]
    #endif

    QF_MEM_APP();
    QF_CRIT_EXIT();
 800458a:	f7fd f8e9 	bl	8001760 <vPortExitCritical>
}
 800458e:	bf00      	nop
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	08004dc4 	.word	0x08004dc4

0800459c <QMPool_put>:
//${QF::QMPool::put} .........................................................
//! @public @memberof QMPool
void QMPool_put(QMPool * const me,
    void * const block,
    uint_fast8_t const qsId)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QFreeBlock * const fb = (QFreeBlock *)block;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	61fb      	str	r3, [r7, #28]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80045ac:	f7fd f8ac 	bl	8001708 <vPortEnterCritical>
    QF_MEM_SYS();

    // get volatile into temporaries
    QFreeBlock * const free_head = me->free_head;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	61bb      	str	r3, [r7, #24]
    QMPoolCtr nFree = me->nFree;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8a1b      	ldrh	r3, [r3, #16]
 80045ba:	82fb      	strh	r3, [r7, #22]

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(401, Q_PTR2UINT_CAST_(free_head)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d004      	beq.n	80045d2 <QMPool_put+0x36>
 80045c8:	f240 1191 	movw	r1, #401	@ 0x191
 80045cc:	482a      	ldr	r0, [pc, #168]	@ (8004678 <QMPool_put+0xdc>)
 80045ce:	f7fb ff6f 	bl	80004b0 <Q_onError>
                            == (uintptr_t)~me->free_head_dis);
    QMPoolCtr const dis = (QMPoolCtr)~me->nFree_dis;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8b1b      	ldrh	r3, [r3, #24]
 80045d6:	43db      	mvns	r3, r3
 80045d8:	82bb      	strh	r3, [r7, #20]
    Q_INVARIANT_INCRIT(402, nFree == dis);
 80045da:	8afa      	ldrh	r2, [r7, #22]
 80045dc:	8abb      	ldrh	r3, [r7, #20]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d004      	beq.n	80045ec <QMPool_put+0x50>
 80045e2:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 80045e6:	4824      	ldr	r0, [pc, #144]	@ (8004678 <QMPool_put+0xdc>)
 80045e8:	f7fb ff62 	bl	80004b0 <Q_onError>

    Q_REQUIRE_INCRIT(410, nFree < me->nTot);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	89db      	ldrh	r3, [r3, #14]
 80045f0:	8afa      	ldrh	r2, [r7, #22]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d304      	bcc.n	8004600 <QMPool_put+0x64>
 80045f6:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 80045fa:	481f      	ldr	r0, [pc, #124]	@ (8004678 <QMPool_put+0xdc>)
 80045fc:	f7fb ff58 	bl	80004b0 <Q_onError>
    Q_REQUIRE_INCRIT(411, (me->start <= fb) && (fb <= me->end));
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	429a      	cmp	r2, r3
 8004608:	d304      	bcc.n	8004614 <QMPool_put+0x78>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	429a      	cmp	r2, r3
 8004612:	d904      	bls.n	800461e <QMPool_put+0x82>
 8004614:	f240 119b 	movw	r1, #411	@ 0x19b
 8004618:	4817      	ldr	r0, [pc, #92]	@ (8004678 <QMPool_put+0xdc>)
 800461a:	f7fb ff49 	bl	80004b0 <Q_onError>

    // the block must not be in the pool already
    Q_REQUIRE_INCRIT(412, Q_PTR2UINT_CAST_(fb->next)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	43db      	mvns	r3, r3
 800462a:	429a      	cmp	r2, r3
 800462c:	d104      	bne.n	8004638 <QMPool_put+0x9c>
 800462e:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8004632:	4811      	ldr	r0, [pc, #68]	@ (8004678 <QMPool_put+0xdc>)
 8004634:	f7fb ff3c 	bl	80004b0 <Q_onError>
        != (uintptr_t)~fb->next_dis);
    #endif // ndef Q_UNSAFE

    ++nFree; // one more free block in this pool
 8004638:	8afb      	ldrh	r3, [r7, #22]
 800463a:	3301      	adds	r3, #1
 800463c:	82fb      	strh	r3, [r7, #22]

    me->free_head = fb; // set as new head of the free list
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	609a      	str	r2, [r3, #8]
    me->nFree     = nFree;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8afa      	ldrh	r2, [r7, #22]
 8004648:	821a      	strh	r2, [r3, #16]
    fb->next      = free_head; // link into the list
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    me->free_head_dis = (uintptr_t)(~Q_PTR2UINT_CAST_(fb));
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	43da      	mvns	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	615a      	str	r2, [r3, #20]
    me->nFree_dis     = (QMPoolCtr)~nFree;
 8004658:	8afb      	ldrh	r3, [r7, #22]
 800465a:	43db      	mvns	r3, r3
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	831a      	strh	r2, [r3, #24]
    fb->next_dis      = (uintptr_t)(~Q_PTR2UINT_CAST_(free_head));
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	43da      	mvns	r2, r3
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	605a      	str	r2, [r3, #4]
        QS_OBJ_PRE(me);        // this memory pool
        QS_MPC_PRE(nFree);     // the # free blocks in the pool
    QS_END_PRE()

    QF_MEM_APP();
    QF_CRIT_EXIT();
 800466a:	f7fd f879 	bl	8001760 <vPortExitCritical>
}
 800466e:	bf00      	nop
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	08004dc4 	.word	0x08004dc4

0800467c <QPSet_setEmpty>:
} QPSet;

// public:

//! @public @memberof QPSet
static inline void QPSet_setEmpty(QPSet * const me) {
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
    me->bits[0] = 0U;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
    #if (QF_MAX_ACTIVE > 32)
    me->bits[1] = 0U;
    #endif
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <QPSet_update_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline void QPSet_update_(QPSet const * const me,
    QPSet * const dis)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	43da      	mvns	r2, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	601a      	str	r2, [r3, #0]
    #if (QF_MAX_ACTIVE > 32U)
    dis->bits[1] = ~me->bits[1];
    #endif
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <QActive_psInit>:
//${QF::QActive::psInit} .....................................................
//! @static @public @memberof QActive
void QActive_psInit(
    QSubscrList * const subscrSto,
    enum_t const maxSignal)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
    QActive_subscrList_   = subscrSto;
 80046c2:	4a14      	ldr	r2, [pc, #80]	@ (8004714 <QActive_psInit+0x5c>)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6013      	str	r3, [r2, #0]
    QActive_maxPubSignal_ = maxSignal;
 80046c8:	4a13      	ldr	r2, [pc, #76]	@ (8004718 <QActive_psInit+0x60>)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6013      	str	r3, [r2, #0]

    // initialize the subscriber list
    for (enum_t sig = 0; sig < maxSignal; ++sig) {
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e016      	b.n	8004702 <QActive_psInit+0x4a>
        QPSet_setEmpty(&subscrSto[sig].set);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	4413      	add	r3, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ffcd 	bl	800467c <QPSet_setEmpty>
    #ifndef Q_UNSAFE
        QPSet_update_(&subscrSto[sig].set, &subscrSto[sig].set_dis);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	f7ff ffcd 	bl	8004696 <QPSet_update_>
    for (enum_t sig = 0; sig < maxSignal; ++sig) {
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3301      	adds	r3, #1
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	dbe4      	blt.n	80046d4 <QActive_psInit+0x1c>
    #endif
    }
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	24000a0c 	.word	0x24000a0c
 8004718:	24000a10 	.word	0x24000a10

0800471c <QActive_ctor>:

//${QF::QActive::ctor} .......................................................
//! @protected @memberof QActive
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
    // clear the whole QActive object, so that the framework can start
    // correctly even if the startup code fails to clear the uninitialized
    // data (as is required by the C Standard).
    QF_bzero_(me, sizeof(*me));
 8004726:	21ac      	movs	r1, #172	@ 0xac
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff fd95 	bl	8004258 <QF_bzero_>

    // NOTE: QActive inherits the abstract QAsm class, but it calls the
    // constructor of the QHsm subclass. This is because QActive inherits
    // the behavior from the QHsm subclass.
    QHsm_ctor((QHsm *)(me), initial);
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fa71 	bl	8003c18 <QHsm_ctor>
        &QHsm_isIn_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->super.vptr = &vtable; // hook vptr to QActive vtable
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a02      	ldr	r2, [pc, #8]	@ (8004744 <QActive_ctor+0x28>)
 800473a:	601a      	str	r2, [r3, #0]
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	08004dd4 	.word	0x08004dd4

08004748 <QActive_register_>:

//$define${QF::QActive::register_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::QActive::register_} ..................................................
//! @private @memberof QActive
void QActive_register_(QActive * const me) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8004750:	f7fc ffda 	bl	8001708 <vPortEnterCritical>
    QF_MEM_SYS();

    if (me->pthre == 0U) { // preemption-threshold not defined?
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7b5b      	ldrb	r3, [r3, #13]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d103      	bne.n	8004764 <QActive_register_+0x1c>
        me->pthre = me->prio; // apply the default
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	7b1a      	ldrb	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	735a      	strb	r2, [r3, #13]
    }

    #ifndef Q_UNSAFE

    Q_REQUIRE_INCRIT(100, (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	7b1b      	ldrb	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d011      	beq.n	8004790 <QActive_register_+0x48>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	7b1b      	ldrb	r3, [r3, #12]
 8004770:	2b20      	cmp	r3, #32
 8004772:	d80d      	bhi.n	8004790 <QActive_register_+0x48>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	7b1b      	ldrb	r3, [r3, #12]
 8004778:	461a      	mov	r2, r3
 800477a:	4b37      	ldr	r3, [pc, #220]	@ (8004858 <QActive_register_+0x110>)
 800477c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <QActive_register_+0x48>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	7b1a      	ldrb	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	7b5b      	ldrb	r3, [r3, #13]
 800478c:	429a      	cmp	r2, r3
 800478e:	d903      	bls.n	8004798 <QActive_register_+0x50>
 8004790:	2164      	movs	r1, #100	@ 0x64
 8004792:	4832      	ldr	r0, [pc, #200]	@ (800485c <QActive_register_+0x114>)
 8004794:	f7fb fe8c 	bl	80004b0 <Q_onError>
                      && (QActive_registry_[me->prio] == (QActive *)0)
                      && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	7b5b      	ldrb	r3, [r3, #13]
 800479c:	73fb      	strb	r3, [r7, #15]
    uint8_t next_thre = me->pthre;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	7b5b      	ldrb	r3, [r3, #13]
 80047a2:	73bb      	strb	r3, [r7, #14]

    uint_fast8_t p;
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	7b1b      	ldrb	r3, [r3, #12]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	e00f      	b.n	80047ce <QActive_register_+0x86>
        if (QActive_registry_[p] != (QActive *)0) {
 80047ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004858 <QActive_register_+0x110>)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <QActive_register_+0x80>
            prev_thre = QActive_registry_[p]->pthre;
 80047ba:	4a27      	ldr	r2, [pc, #156]	@ (8004858 <QActive_register_+0x110>)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c2:	7b5b      	ldrb	r3, [r3, #13]
 80047c4:	73fb      	strb	r3, [r7, #15]
            break;
 80047c6:	e005      	b.n	80047d4 <QActive_register_+0x8c>
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ec      	bne.n	80047ae <QActive_register_+0x66>
        }
    }
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	7b1b      	ldrb	r3, [r3, #12]
 80047d8:	3301      	adds	r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	e00f      	b.n	80047fe <QActive_register_+0xb6>
        if (QActive_registry_[p] != (QActive *)0) {
 80047de:	4a1e      	ldr	r2, [pc, #120]	@ (8004858 <QActive_register_+0x110>)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d006      	beq.n	80047f8 <QActive_register_+0xb0>
            next_thre = QActive_registry_[p]->pthre;
 80047ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004858 <QActive_register_+0x110>)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f2:	7b5b      	ldrb	r3, [r3, #13]
 80047f4:	73bb      	strb	r3, [r7, #14]
            break;
 80047f6:	e005      	b.n	8004804 <QActive_register_+0xbc>
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b20      	cmp	r3, #32
 8004802:	d9ec      	bls.n	80047de <QActive_register_+0x96>
        }
    }

    Q_ASSERT_INCRIT(190, (prev_thre <= me->pthre)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	7b5b      	ldrb	r3, [r3, #13]
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	429a      	cmp	r2, r3
 800480c:	d804      	bhi.n	8004818 <QActive_register_+0xd0>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	7b5b      	ldrb	r3, [r3, #13]
 8004812:	7bba      	ldrb	r2, [r7, #14]
 8004814:	429a      	cmp	r2, r3
 8004816:	d203      	bcs.n	8004820 <QActive_register_+0xd8>
 8004818:	21be      	movs	r1, #190	@ 0xbe
 800481a:	4810      	ldr	r0, [pc, #64]	@ (800485c <QActive_register_+0x114>)
 800481c:	f7fb fe48 	bl	80004b0 <Q_onError>
                          && (me->pthre <= next_thre));

    me->prio_dis  = (uint8_t)(~me->prio);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	7b1b      	ldrb	r3, [r3, #12]
 8004824:	43db      	mvns	r3, r3
 8004826:	b2da      	uxtb	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    me->pthre_dis = (uint8_t)(~me->pthre);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	7b5b      	ldrb	r3, [r3, #13]
 8004832:	43db      	mvns	r3, r3
 8004834:	b2da      	uxtb	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9

    #endif // Q_UNSAFE

    // register the AO at the QF-prio.
    QActive_registry_[me->prio] = me;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	7b1b      	ldrb	r3, [r3, #12]
 8004840:	4619      	mov	r1, r3
 8004842:	4a05      	ldr	r2, [pc, #20]	@ (8004858 <QActive_register_+0x110>)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 800484a:	f7fc ff89 	bl	8001760 <vPortExitCritical>
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	24000930 	.word	0x24000930
 800485c:	08004dcc 	.word	0x08004dcc

08004860 <QEvt_ctor>:
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
    me->sig     = (QSignal)sig;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	801a      	strh	r2, [r3, #0]
    me->evtTag_ = 0x0FU;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	220f      	movs	r2, #15
 8004876:	709a      	strb	r2, [r3, #2]
    me->refCtr_ = 0U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	70da      	strb	r2, [r3, #3]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	78db      	ldrb	r3, [r3, #3]
 8004896:	73fb      	strb	r3, [r7, #15]
           && (((me->evtTag_ ^ rc) & 0x0FU) == 0x0FU);
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b40      	cmp	r3, #64	@ 0x40
 800489c:	d80a      	bhi.n	80048b4 <QEvt_verify_+0x2a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	789a      	ldrb	r2, [r3, #2]
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	4053      	eors	r3, r2
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	2b0f      	cmp	r3, #15
 80048ae:	d101      	bne.n	80048b4 <QEvt_verify_+0x2a>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <QEvt_verify_+0x2c>
 80048b4:	2300      	movs	r3, #0
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <QTimeEvt_ctorX>:
//! @public @memberof QTimeEvt
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80048d6:	f7fc ff17 	bl	8001708 <vPortEnterCritical>
    Q_REQUIRE_INCRIT(300, (sig != 0)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <QTimeEvt_ctorX+0x1e>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <QTimeEvt_ctorX+0x28>
 80048e6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80048ea:	4815      	ldr	r0, [pc, #84]	@ (8004940 <QTimeEvt_ctorX+0x78>)
 80048ec:	f7fb fde0 	bl	80004b0 <Q_onError>
        && (tickRate < QF_MAX_TICK_RATE));
    QF_CRIT_EXIT();
 80048f0:	f7fc ff36 	bl	8001760 <vPortExitCritical>

    QEvt_ctor(&me->super, sig);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ffb1 	bl	8004860 <QEvt_ctor>

    me->next     = (QTimeEvt *)0;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	605a      	str	r2, [r3, #4]
    me->act      = act;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	60da      	str	r2, [r3, #12]
    me->ctr      = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	611a      	str	r2, [r3, #16]
    me->interval = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	619a      	str	r2, [r3, #24]
    me->tickRate = (uint8_t)tickRate;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	771a      	strb	r2, [r3, #28]
    me->flags    = 0U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	775a      	strb	r2, [r3, #29]

    #ifndef Q_UNSAFE
    me->next_dis = (uintptr_t)~Q_PTR2UINT_CAST_(me->next);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	43da      	mvns	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	609a      	str	r2, [r3, #8]
    me->ctr_dis  = (QTimeEvtCtr)~me->ctr;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	43da      	mvns	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	615a      	str	r2, [r3, #20]
    #endif // ndef Q_UNSAFE
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	08004de0 	.word	0x08004de0

08004944 <QTimeEvt_armX>:
//${QF::QTimeEvt::armX} ......................................................
//! @public @memberof QTimeEvt
void QTimeEvt_armX(QTimeEvt * const me,
    uint32_t const nTicks,
    uint32_t const interval)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8004950:	f7fc feda 	bl	8001708 <vPortEnterCritical>
    #elif (QF_TIMEEVT_CTR_SIZE == 2U)
    Q_REQUIRE_INCRIT(400, (nTicks < 0xFFFFU) && (interval < 0xFFFFU));
    #endif

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(401, QEvt_verify_(&me->super));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ff97 	bl	800488a <QEvt_verify_>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d104      	bne.n	800496c <QTimeEvt_armX+0x28>
 8004962:	f240 1191 	movw	r1, #401	@ 0x191
 8004966:	483f      	ldr	r0, [pc, #252]	@ (8004a64 <QTimeEvt_armX+0x120>)
 8004968:	f7fb fda2 	bl	80004b0 <Q_onError>
    #endif

    QTimeEvtCtr const ctr = me->ctr;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	61fb      	str	r3, [r7, #28]
    uint8_t const tickRate = me->tickRate;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	7f1b      	ldrb	r3, [r3, #28]
 8004976:	76fb      	strb	r3, [r7, #27]
    #ifdef Q_SPY
    uint_fast8_t const qsId = ((QActive *)(me->act))->prio;
    #endif

    Q_REQUIRE_INCRIT(410,
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <QTimeEvt_armX+0x4e>
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <QTimeEvt_armX+0x4e>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <QTimeEvt_armX+0x4e>
 800498c:	7efb      	ldrb	r3, [r7, #27]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <QTimeEvt_armX+0x58>
 8004992:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8004996:	4833      	ldr	r0, [pc, #204]	@ (8004a64 <QTimeEvt_armX+0x120>)
 8004998:	f7fb fd8a 	bl	80004b0 <Q_onError>
        && (ctr == 0U)
        && (me->act != (void *)0)
        && (tickRate < (uint_fast8_t)QF_MAX_TICK_RATE));

    #ifndef Q_UNSAFE
    QTimeEvtCtr const dis = (QTimeEvtCtr)~me->ctr_dis;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	617b      	str	r3, [r7, #20]
    Q_INVARIANT_INCRIT(411, ctr == dis);
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d004      	beq.n	80049b6 <QTimeEvt_armX+0x72>
 80049ac:	f240 119b 	movw	r1, #411	@ 0x19b
 80049b0:	482c      	ldr	r0, [pc, #176]	@ (8004a64 <QTimeEvt_armX+0x120>)
 80049b2:	f7fb fd7d 	bl	80004b0 <Q_onError>
    #else
    Q_UNUSED_PAR(ctr);
    #endif // ndef Q_UNSAFE

    me->ctr = (QTimeEvtCtr)nTicks;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	611a      	str	r2, [r3, #16]
    me->interval = (QTimeEvtCtr)interval;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	619a      	str	r2, [r3, #24]
    #ifndef Q_UNSAFE
    me->ctr_dis = (QTimeEvtCtr)~nTicks;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	43da      	mvns	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	615a      	str	r2, [r3, #20]

    // is the time event unlinked?
    // NOTE: For the duration of a single clock tick of the specified tick
    // rate a time event can be disarmed and yet still linked into the list
    // because un-linking is performed exclusively in QTimeEvt_tick_().
    if ((me->flags & QTE_FLAG_IS_LINKED) == 0U) {
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	7f5b      	ldrb	r3, [r3, #29]
 80049ce:	b25b      	sxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	db40      	blt.n	8004a56 <QTimeEvt_armX+0x112>
        me->flags |= QTE_FLAG_IS_LINKED; // mark as linked
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	7f5b      	ldrb	r3, [r3, #29]
 80049d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	775a      	strb	r2, [r3, #29]
        // armed" list is appended to the main list of armed time events
        // based on QTimeEvt_timeEvtHead_[tickRate].next. Again, this is
        // to keep any changes to the main list exclusively inside the
        // QTimeEvt_tick_().
    #ifndef Q_UNSAFE
        Q_INVARIANT_INCRIT(420,
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	461a      	mov	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d004      	beq.n	80049fc <QTimeEvt_armX+0xb8>
 80049f2:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 80049f6:	481b      	ldr	r0, [pc, #108]	@ (8004a64 <QTimeEvt_armX+0x120>)
 80049f8:	f7fb fd5a 	bl	80004b0 <Q_onError>
            Q_PTR2UINT_CAST_(me->next) == (uintptr_t)~me->next_dis);
        Q_INVARIANT_INCRIT(421,
 80049fc:	7efb      	ldrb	r3, [r7, #27]
 80049fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004a68 <QTimeEvt_armX+0x124>)
 8004a00:	015b      	lsls	r3, r3, #5
 8004a02:	4413      	add	r3, r2
 8004a04:	330c      	adds	r3, #12
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	7efb      	ldrb	r3, [r7, #27]
 8004a0c:	4a17      	ldr	r2, [pc, #92]	@ (8004a6c <QTimeEvt_armX+0x128>)
 8004a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	4299      	cmp	r1, r3
 8004a16:	d004      	beq.n	8004a22 <QTimeEvt_armX+0xde>
 8004a18:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8004a1c:	4811      	ldr	r0, [pc, #68]	@ (8004a64 <QTimeEvt_armX+0x120>)
 8004a1e:	f7fb fd47 	bl	80004b0 <Q_onError>
            Q_PTR2UINT_CAST_(QTimeEvt_timeEvtHead_[tickRate].act) ==
                (uintptr_t)(~QTimeEvt_timeEvtHead_dis_[tickRate]));
    #endif
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8004a22:	7efb      	ldrb	r3, [r7, #27]
 8004a24:	4a10      	ldr	r2, [pc, #64]	@ (8004a68 <QTimeEvt_armX+0x124>)
 8004a26:	015b      	lsls	r3, r3, #5
 8004a28:	4413      	add	r3, r2
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 8004a32:	7efb      	ldrb	r3, [r7, #27]
 8004a34:	4a0c      	ldr	r2, [pc, #48]	@ (8004a68 <QTimeEvt_armX+0x124>)
 8004a36:	015b      	lsls	r3, r3, #5
 8004a38:	4413      	add	r3, r2
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
        me->next_dis = (uintptr_t)~Q_PTR2UINT_CAST_(me->next);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	43da      	mvns	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	609a      	str	r2, [r3, #8]
        QTimeEvt_timeEvtHead_dis_[tickRate] = (uintptr_t)~Q_PTR2UINT_CAST_(me);
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	7efb      	ldrb	r3, [r7, #27]
 8004a4e:	43d2      	mvns	r2, r2
 8004a50:	4906      	ldr	r1, [pc, #24]	@ (8004a6c <QTimeEvt_armX+0x128>)
 8004a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        QS_TEC_PRE(interval); // the interval
        QS_U8_PRE(tickRate);  // tick rate
    QS_END_PRE()

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8004a56:	f7fc fe83 	bl	8001760 <vPortExitCritical>
}
 8004a5a:	bf00      	nop
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	08004de0 	.word	0x08004de0
 8004a68:	24000a14 	.word	0x24000a14
 8004a6c:	24000a34 	.word	0x24000a34

08004a70 <QTimeEvt_init>:
    return ctr;
}

//${QF::QTimeEvt::init} ......................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_init(void) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
    for (uint_fast8_t tickRate = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	e016      	b.n	8004aaa <QTimeEvt_init+0x3a>
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
         ++tickRate)
    {
        QTimeEvt_ctorX(&QTimeEvt_timeEvtHead_[tickRate],
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	015b      	lsls	r3, r3, #5
 8004a80:	4a0e      	ldr	r2, [pc, #56]	@ (8004abc <QTimeEvt_init+0x4c>)
 8004a82:	1898      	adds	r0, r3, r2
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2204      	movs	r2, #4
 8004a88:	2100      	movs	r1, #0
 8004a8a:	f7ff ff1d 	bl	80048c8 <QTimeEvt_ctorX>
                       (QActive *)0, Q_USER_SIG, tickRate);
    #ifndef Q_UNSAFE
        QTimeEvt_timeEvtHead_dis_[tickRate] =
            (uintptr_t)~Q_PTR2UINT_CAST_(QTimeEvt_timeEvtHead_[tickRate].act);
 8004a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8004abc <QTimeEvt_init+0x4c>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	015b      	lsls	r3, r3, #5
 8004a94:	4413      	add	r3, r2
 8004a96:	330c      	adds	r3, #12
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	43da      	mvns	r2, r3
        QTimeEvt_timeEvtHead_dis_[tickRate] =
 8004a9c:	4908      	ldr	r1, [pc, #32]	@ (8004ac0 <QTimeEvt_init+0x50>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         ++tickRate)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	607b      	str	r3, [r7, #4]
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0e5      	beq.n	8004a7c <QTimeEvt_init+0xc>
    #endif
    }
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	24000a14 	.word	0x24000a14
 8004ac0:	24000a34 	.word	0x24000a34

08004ac4 <memset>:
 8004ac4:	4402      	add	r2, r0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d100      	bne.n	8004ace <memset+0xa>
 8004acc:	4770      	bx	lr
 8004ace:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad2:	e7f9      	b.n	8004ac8 <memset+0x4>

08004ad4 <__libc_init_array>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8004b0c <__libc_init_array+0x38>)
 8004ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8004b10 <__libc_init_array+0x3c>)
 8004ada:	1b64      	subs	r4, r4, r5
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	2600      	movs	r6, #0
 8004ae0:	42a6      	cmp	r6, r4
 8004ae2:	d109      	bne.n	8004af8 <__libc_init_array+0x24>
 8004ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8004b14 <__libc_init_array+0x40>)
 8004ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8004b18 <__libc_init_array+0x44>)
 8004ae8:	f000 f826 	bl	8004b38 <_init>
 8004aec:	1b64      	subs	r4, r4, r5
 8004aee:	10a4      	asrs	r4, r4, #2
 8004af0:	2600      	movs	r6, #0
 8004af2:	42a6      	cmp	r6, r4
 8004af4:	d105      	bne.n	8004b02 <__libc_init_array+0x2e>
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afc:	4798      	blx	r3
 8004afe:	3601      	adds	r6, #1
 8004b00:	e7ee      	b.n	8004ae0 <__libc_init_array+0xc>
 8004b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b06:	4798      	blx	r3
 8004b08:	3601      	adds	r6, #1
 8004b0a:	e7f2      	b.n	8004af2 <__libc_init_array+0x1e>
 8004b0c:	08004de8 	.word	0x08004de8
 8004b10:	08004de8 	.word	0x08004de8
 8004b14:	08004de8 	.word	0x08004de8
 8004b18:	08004dec 	.word	0x08004dec

08004b1c <memcpy>:
 8004b1c:	440a      	add	r2, r1
 8004b1e:	4291      	cmp	r1, r2
 8004b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b24:	d100      	bne.n	8004b28 <memcpy+0xc>
 8004b26:	4770      	bx	lr
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b32:	4291      	cmp	r1, r2
 8004b34:	d1f9      	bne.n	8004b2a <memcpy+0xe>
 8004b36:	bd10      	pop	{r4, pc}

08004b38 <_init>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	bf00      	nop
 8004b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3e:	bc08      	pop	{r3}
 8004b40:	469e      	mov	lr, r3
 8004b42:	4770      	bx	lr

08004b44 <_fini>:
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	bf00      	nop
 8004b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4a:	bc08      	pop	{r3}
 8004b4c:	469e      	mov	lr, r3
 8004b4e:	4770      	bx	lr
